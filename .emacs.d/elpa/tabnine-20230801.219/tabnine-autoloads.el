;;; tabnine-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from tabnine-chat.el

(autoload 'tabnine-chat-send "tabnine-chat" "\
Submit this prompt to TabNine Chat." t)
(autoload 'tabnine-chat "tabnine-chat" "\
Switch to or start TabNine Chat session with NAME.

With a prefix arg, query for a (new) session name.

If region is active, use it as the INITIAL prompt. Returns the
buffer created or switched to.

(fn NAME &optional INITIAL)" t)
(register-definition-prefixes "tabnine-chat" '("tabnine-chat-"))


;;; Generated autoloads from tabnine-chat-curl.el

(autoload 'tabnine-chat-curl-get-response "tabnine-chat-curl" "\
Retrieve response to prompt in INFO.

INFO is a plist with the following keys:
- :prompt (the prompt being sent)
- :buffer (the TabNine Chat buffer)
- :position (marker at which to insert the response).

Call CALLBACK with the response and INFO afterwards. If omitted
the response is inserted into the current buffer after point.

(fn INFO &optional CALLBACK)")
(register-definition-prefixes "tabnine-chat-curl" '("tabnine-chat-"))


;;; Generated autoloads from tabnine-chat-transient.el

 (autoload 'tabnine-chat-menu "tabnine-chat-transient" nil t)
(register-definition-prefixes "tabnine-chat-transient" '("tabnine-chat--re"))


;;; Generated autoloads from tabnine-core.el

(autoload 'tabnine-complete "tabnine-core" "\
Complete at the current point with ARG, if arg is set, call from capf.

(fn ARG)" t)
(autoload 'tabnine-mode "tabnine-core" "\
Minor mode for TabNine.

This is a minor mode.  If called interactively, toggle the
`Tabnine mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `tabnine-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(put 'global-tabnine-mode 'globalized-minor-mode t)
(defvar global-tabnine-mode nil "\
Non-nil if Global Tabnine mode is enabled.
See the `global-tabnine-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-tabnine-mode'.")
(custom-autoload 'global-tabnine-mode "tabnine-core" nil)
(autoload 'global-tabnine-mode "tabnine-core" "\
Toggle Tabnine mode in all buffers.
With prefix ARG, enable Global Tabnine mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Tabnine mode is enabled in all buffers where `tabnine-mode' would do
it.

See `tabnine-mode' for more information on Tabnine mode.

(fn &optional ARG)" t)
(autoload 'tabnine-completion-at-point "tabnine-core" "\
TabNine Completion at point function.")
(register-definition-prefixes "tabnine-core" '("tabnine-"))


;;; Generated autoloads from tabnine-util.el

(register-definition-prefixes "tabnine-util" '("tabnine-util--"))

;;; End of scraped data

(provide 'tabnine-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; tabnine-autoloads.el ends here
