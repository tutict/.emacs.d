import { CancellationToken } from 'vscode-languageserver';
import * as lsp from 'vscode-languageserver-types';
import { URI } from 'vscode-uri';
import { LsConfiguration } from '../config';
import { ILogger } from '../logging';
import { IMdParser } from '../parser';
import { MdTableOfContentsProvider } from '../tableOfContents';
import { ITextDocument } from '../types/textDocument';
import { Disposable } from '../util/dispose';
import { IWorkspace } from '../workspace';
import { MdWorkspaceInfoCache } from '../workspaceCache';
import { MdLink } from './documentLinks';
export declare enum MdReferenceKind {
    Link = 1,
    Header = 2
}
/**
 * A link in a markdown file.
 */
export interface MdLinkReference {
    readonly kind: MdReferenceKind.Link;
    readonly isTriggerLocation: boolean;
    readonly isDefinition: boolean;
    readonly location: lsp.Location;
    readonly link: MdLink;
}
/**
 * A header in a markdown file.
 */
export interface MdHeaderReference {
    readonly kind: MdReferenceKind.Header;
    readonly isTriggerLocation: boolean;
    readonly isDefinition: boolean;
    /**
     * The range of the header.
     *
     * In `# a b c #` this would be the range of `# a b c #`
     */
    readonly location: lsp.Location;
    /**
     * The text of the header.
     *
     * In `# a b c #` this would be `a b c`
     */
    readonly headerText: string;
    /**
     * The range of the header text itself.
     *
     * In `# a b c #` this would be the range of `a b c`
     */
    readonly headerTextLocation: lsp.Location;
}
export declare type MdReference = MdLinkReference | MdHeaderReference;
/**
 * Stateful object that computes references for markdown files.
 */
export declare class MdReferencesProvider extends Disposable {
    private readonly configuration;
    private readonly parser;
    private readonly workspace;
    private readonly tocProvider;
    private readonly linkCache;
    private readonly logger;
    constructor(configuration: LsConfiguration, parser: IMdParser, workspace: IWorkspace, tocProvider: MdTableOfContentsProvider, linkCache: MdWorkspaceInfoCache<readonly MdLink[]>, logger: ILogger);
    provideReferences(document: ITextDocument, position: lsp.Position, context: lsp.ReferenceContext, token: CancellationToken): Promise<lsp.Location[]>;
    getReferencesAtPosition(document: ITextDocument, position: lsp.Position, token: CancellationToken): Promise<MdReference[]>;
    getReferencesToFileInWorkspace(resource: URI, token: CancellationToken): Promise<MdReference[]>;
    private getReferencesToHeader;
    private getReferencesToLinkAtPosition;
    private getReferencesToLink;
    private isMarkdownPath;
    private looksLikeLinkToDoc;
    private findLinksToFile;
    private getReferencesToLinkReference;
    /**
     * Get just the range of the file path, dropping the fragment
     */
    private getPathRange;
}
