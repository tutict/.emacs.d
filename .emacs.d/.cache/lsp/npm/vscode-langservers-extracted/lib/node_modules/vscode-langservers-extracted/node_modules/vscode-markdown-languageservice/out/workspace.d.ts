import { Event } from 'vscode-languageserver';
import { URI } from 'vscode-uri';
import { LsConfiguration } from './config';
import { ITextDocument } from './types/textDocument';
import { IDisposable } from './util/dispose';
import { ResourceMap } from './util/resourceMap';
export interface FileStat {
    readonly isDirectory?: boolean;
}
export interface ContainingDocumentContext {
    /**
     * Uri of the parent document.
     */
    readonly uri: URI;
    /**
     * List of child markdown documents.
     */
    readonly children: Iterable<{
        readonly uri: URI;
    }>;
}
/**
 * Provide information about the contents of a workspace.
 */
export interface IWorkspace {
    /**
     * Get the root folders for this workspace.
     */
    get workspaceFolders(): readonly URI[];
    /**
     * Fired when the content of a markdown document changes.
     */
    readonly onDidChangeMarkdownDocument: Event<ITextDocument>;
    /**
     * Fired when a markdown document is first created.
     */
    readonly onDidCreateMarkdownDocument: Event<ITextDocument>;
    /**
     * Fired when a markdown document is deleted.
     */
    readonly onDidDeleteMarkdownDocument: Event<URI>;
    /**
     * Get complete list of markdown documents.
     *
     * This may include documents that have not been opened yet (for example, getAllMarkdownDocuments should
     * return documents from disk even if they have not been opened yet in the editor)
     */
    getAllMarkdownDocuments(): Promise<Iterable<ITextDocument>>;
    /**
     * Check if a document already exists in the workspace contents.
     */
    hasMarkdownDocument(resource: URI): boolean;
    /**
     * Try to open a markdown document.
     *
     * This may either get the document from a cache or open it and add it to the cache.
     *
     * @return The document, or `undefined` if the file could not be opened or was not a markdown file.
     */
    openMarkdownDocument(resource: URI): Promise<ITextDocument | undefined>;
    /**
     * Get metadata about a file.
     *
     * @param resource URI to check. Does not have to be to a markdown file.
     *
     * @return Metadata or `undefined` if the resource does not exist.
     */
    stat(resource: URI): Promise<FileStat | undefined>;
    /**
     * List all files in a directory.
     *
     * @param resource URI of the directory to check. Does not have to be to a markdown file.
     *
     * @return List of `[fileName, metadata]` tuples.
     */
    readDirectory(resource: URI): Promise<Iterable<readonly [string, FileStat]>>;
    /**
     * Get the document that contains `resource` as a sub document.
     *
     * If `resource` is a notebook cell for example, this should return the parent notebook.
     *
     * @return The parent document info or `undefined` if none.
     */
    getContainingDocument?(resource: URI): ContainingDocumentContext | undefined;
}
export interface FileWatcherOptions {
    readonly ignoreCreate?: boolean;
    readonly ignoreChange?: boolean;
    readonly ignoreDelete?: boolean;
}
/**
 * A workspace that also supports watching arbitrary files.
 */
export interface IWorkspaceWithWatching extends IWorkspace {
    /**
     * Start watching a given file.
     */
    watchFile(path: URI, options: FileWatcherOptions): IFileSystemWatcher;
}
export declare function isWorkspaceWithFileWatching(workspace: IWorkspace): workspace is IWorkspaceWithWatching;
/**
 * Watches a file for changes to it on the file system.
 */
export interface IFileSystemWatcher extends IDisposable {
    /** Fired when the file is created. */
    readonly onDidCreate: Event<URI>;
    /** Fired when the file is changed on the file system. */
    readonly onDidChange: Event<URI>;
    /** Fired when the file is deleted. */
    readonly onDidDelete: Event<URI>;
}
export declare function getWorkspaceFolder(workspace: IWorkspace, docUri: URI): URI | undefined;
export declare function openLinkToMarkdownFile(config: LsConfiguration, workspace: IWorkspace, resource: URI): Promise<ITextDocument | undefined>;
/**
 * Check that a link to a file exists.
 *
 * @return The resolved URI or `undefined` if the file does not exist.
 */
export declare function statLinkToMarkdownFile(config: LsConfiguration, workspace: IWorkspace, linkUri: URI, out_statCache?: ResourceMap<{
    readonly exists: boolean;
}>): Promise<URI | undefined>;
