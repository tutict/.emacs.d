"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.MdDocumentSymbolProvider = void 0;
const lsp = require("vscode-languageserver-types");
const logging_1 = require("../logging");
class MdDocumentSymbolProvider {
    constructor(tocProvider, logger) {
        this.tocProvider = tocProvider;
        this.logger = logger;
    }
    async provideDocumentSymbolInformation(document) {
        this.logger.log(logging_1.LogLevel.Debug, 'DocumentSymbolProvider', `provideDocumentSymbolInformation - ${document.uri}`);
        const toc = await this.tocProvider.getForDocument(document);
        return toc.entries.map(entry => this.toSymbolInformation(entry));
    }
    async provideDocumentSymbols(document) {
        const toc = await this.tocProvider.getForDocument(document);
        const root = {
            level: -Infinity,
            children: [],
            parent: undefined
        };
        this.buildTree(root, toc.entries);
        return root.children;
    }
    buildTree(parent, entries) {
        if (!entries.length) {
            return;
        }
        const entry = entries[0];
        const symbol = this.toDocumentSymbol(entry);
        symbol.children = [];
        while (entry.level <= parent.level) {
            parent = parent.parent;
        }
        parent.children.push(symbol);
        this.buildTree({ level: entry.level, children: symbol.children, parent }, entries.slice(1));
    }
    toSymbolInformation(entry) {
        return {
            name: this.getSymbolName(entry),
            kind: lsp.SymbolKind.String,
            location: entry.sectionLocation
        };
    }
    toDocumentSymbol(entry) {
        return {
            name: this.getSymbolName(entry),
            kind: lsp.SymbolKind.String,
            range: entry.sectionLocation.range,
            selectionRange: entry.sectionLocation.range
        };
    }
    getSymbolName(entry) {
        return '#'.repeat(entry.level) + ' ' + entry.text;
    }
}
exports.MdDocumentSymbolProvider = MdDocumentSymbolProvider;
//# sourceMappingURL=documentSymbols.js.map