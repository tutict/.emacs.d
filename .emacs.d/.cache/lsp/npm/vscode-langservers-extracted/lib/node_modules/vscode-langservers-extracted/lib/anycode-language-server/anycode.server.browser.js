"use strict";

require("core-js/modules/es.reflect.construct.js");

require("core-js/modules/es.reflect.get.js");

require("regenerator-runtime/runtime.js");

require("core-js/modules/es.object.get-own-property-descriptor.js");

require("core-js/modules/es.object.get-own-property-names.js");

require("core-js/modules/es.object.get-prototype-of.js");

require("core-js/modules/es.object.keys.js");

require("core-js/modules/es.array.splice.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.map.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.split.js");

require("core-js/modules/es.regexp.to-string.js");

require("core-js/modules/es.string.trim.js");

require("core-js/modules/es.typed-array.uint8-array.js");

require("core-js/modules/es.typed-array.copy-within.js");

require("core-js/modules/es.typed-array.every.js");

require("core-js/modules/es.typed-array.fill.js");

require("core-js/modules/es.typed-array.filter.js");

require("core-js/modules/es.typed-array.find.js");

require("core-js/modules/es.typed-array.find-index.js");

require("core-js/modules/es.typed-array.for-each.js");

require("core-js/modules/es.typed-array.includes.js");

require("core-js/modules/es.typed-array.index-of.js");

require("core-js/modules/es.typed-array.iterator.js");

require("core-js/modules/es.typed-array.join.js");

require("core-js/modules/es.typed-array.last-index-of.js");

require("core-js/modules/es.typed-array.map.js");

require("core-js/modules/es.typed-array.reduce.js");

require("core-js/modules/es.typed-array.reduce-right.js");

require("core-js/modules/es.typed-array.reverse.js");

require("core-js/modules/es.typed-array.set.js");

require("core-js/modules/es.typed-array.slice.js");

require("core-js/modules/es.typed-array.some.js");

require("core-js/modules/es.typed-array.sort.js");

require("core-js/modules/es.typed-array.subarray.js");

require("core-js/modules/es.typed-array.to-locale-string.js");

require("core-js/modules/es.typed-array.to-string.js");

require("core-js/modules/es.promise.js");

require("core-js/modules/es.object.freeze.js");

require("core-js/modules/es.array.concat.js");

require("core-js/modules/es.number.constructor.js");

require("core-js/modules/es.symbol.iterator.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/es.symbol.to-string-tag.js");

require("core-js/modules/es.json.to-string-tag.js");

require("core-js/modules/es.math.to-string-tag.js");

require("core-js/modules/es.function.name.js");

require("core-js/modules/es.array.join.js");

require("core-js/modules/es.set.js");

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.string.replace.js");

require("core-js/modules/es.object.assign.js");

require("core-js/modules/es.weak-map.js");

require("core-js/modules/es.typed-array.int8-array.js");

require("core-js/modules/es.typed-array.int16-array.js");

require("core-js/modules/es.typed-array.int32-array.js");

require("core-js/modules/es.typed-array.uint16-array.js");

require("core-js/modules/es.typed-array.uint32-array.js");

require("core-js/modules/es.typed-array.float32-array.js");

require("core-js/modules/es.typed-array.float64-array.js");

require("core-js/modules/es.string.starts-with.js");

require("core-js/modules/es.array.includes.js");

require("core-js/modules/es.string.includes.js");

require("core-js/modules/es.array.copy-within.js");

require("core-js/modules/es.string.match.js");

require("core-js/modules/es.regexp.constructor.js");

require("core-js/modules/es.array.find.js");

require("core-js/modules/es.number.to-fixed.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.string.ends-with.js");

require("core-js/modules/es.array.sort.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.array.flat.js");

require("core-js/modules/es.array.unscopables.flat.js");

require("core-js/modules/es.string.repeat.js");

require("core-js/modules/esnext.promise.all-settled.js");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e6) { throw _e6; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e7) { didErr = true; err = _e7; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

(function () {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;

  var __markAsModule = function __markAsModule(target) {
    return __defProp(target, "__esModule", {
      value: true
    });
  };

  var __require = function __require(x) {
    if (typeof require !== "undefined") return require(x);
    throw new Error('Dynamic require of "' + x + '" is not supported');
  };

  var __commonJS = function __commonJS(cb, mod) {
    return function __require2() {
      return mod || (0, cb[Object.keys(cb)[0]])((mod = {
        exports: {}
      }).exports, mod), mod.exports;
    };
  };

  var __reExport = function __reExport(target, module, desc) {
    if (module && _typeof(module) === "object" || typeof module === "function") {
      var _iterator = _createForOfIteratorHelper(__getOwnPropNames(module)),
          _step;

      try {
        var _loop = function _loop() {
          var key = _step.value;
          if (!__hasOwnProp.call(target, key) && key !== "default") __defProp(target, key, {
            get: function get() {
              return module[key];
            },
            enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable
          });
        };

        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    return target;
  };

  var __toModule = function __toModule(module) {
    return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? {
      get: function get() {
        return module.default;
      },
      enumerable: true
    } : {
      value: module,
      enumerable: true
    })), module);
  }; // server/node_modules/vscode-jsonrpc/lib/common/ral.js


  var require_ral = __commonJS({
    "server/node_modules/vscode-jsonrpc/lib/common/ral.js": function serverNode_modulesVscodeJsonrpcLibCommonRalJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _ral;

      function RAL() {
        if (_ral === void 0) {
          throw new Error("No runtime abstraction layer installed");
        }

        return _ral;
      }

      (function (RAL2) {
        function install(ral) {
          if (ral === void 0) {
            throw new Error("No runtime abstraction layer provided");
          }

          _ral = ral;
        }

        RAL2.install = install;
      })(RAL || (RAL = {}));

      exports.default = RAL;
    }
  }); // server/node_modules/vscode-jsonrpc/lib/common/disposable.js


  var require_disposable = __commonJS({
    "server/node_modules/vscode-jsonrpc/lib/common/disposable.js": function serverNode_modulesVscodeJsonrpcLibCommonDisposableJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Disposable = void 0;
      var Disposable;

      (function (Disposable2) {
        function create(func) {
          return {
            dispose: func
          };
        }

        Disposable2.create = create;
      })(Disposable = exports.Disposable || (exports.Disposable = {}));
    }
  }); // server/node_modules/vscode-jsonrpc/lib/common/events.js


  var require_events = __commonJS({
    "server/node_modules/vscode-jsonrpc/lib/common/events.js": function serverNode_modulesVscodeJsonrpcLibCommonEventsJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Emitter = exports.Event = void 0;
      var ral_1 = require_ral();
      var Event;

      (function (Event2) {
        var _disposable = {
          dispose: function dispose() {}
        };

        Event2.None = function () {
          return _disposable;
        };
      })(Event = exports.Event || (exports.Event = {}));

      var CallbackList = /*#__PURE__*/function () {
        function CallbackList() {
          _classCallCheck(this, CallbackList);
        }

        _createClass(CallbackList, [{
          key: "add",
          value: function add(callback) {
            var _this2 = this;

            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var bucket = arguments.length > 2 ? arguments[2] : undefined;

            if (!this._callbacks) {
              this._callbacks = [];
              this._contexts = [];
            }

            this._callbacks.push(callback);

            this._contexts.push(context);

            if (Array.isArray(bucket)) {
              bucket.push({
                dispose: function dispose() {
                  return _this2.remove(callback, context);
                }
              });
            }
          }
        }, {
          key: "remove",
          value: function remove(callback) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            if (!this._callbacks) {
              return;
            }

            var foundCallbackWithDifferentContext = false;

            for (var i = 0, len = this._callbacks.length; i < len; i++) {
              if (this._callbacks[i] === callback) {
                if (this._contexts[i] === context) {
                  this._callbacks.splice(i, 1);

                  this._contexts.splice(i, 1);

                  return;
                } else {
                  foundCallbackWithDifferentContext = true;
                }
              }
            }

            if (foundCallbackWithDifferentContext) {
              throw new Error("When adding a listener with a context, you should remove it with the same context");
            }
          }
        }, {
          key: "invoke",
          value: function invoke() {
            if (!this._callbacks) {
              return [];
            }

            var ret = [],
                callbacks = this._callbacks.slice(0),
                contexts = this._contexts.slice(0);

            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            for (var i = 0, len = callbacks.length; i < len; i++) {
              try {
                ret.push(callbacks[i].apply(contexts[i], args));
              } catch (e) {
                (0, ral_1.default)().console.error(e);
              }
            }

            return ret;
          }
        }, {
          key: "isEmpty",
          value: function isEmpty() {
            return !this._callbacks || this._callbacks.length === 0;
          }
        }, {
          key: "dispose",
          value: function dispose() {
            this._callbacks = void 0;
            this._contexts = void 0;
          }
        }]);

        return CallbackList;
      }();

      var Emitter2 = /*#__PURE__*/function () {
        function Emitter2(_options) {
          _classCallCheck(this, Emitter2);

          this._options = _options;
        }

        _createClass(Emitter2, [{
          key: "event",
          get: function get() {
            var _this3 = this;

            if (!this._event) {
              this._event = function (listener, thisArgs, disposables) {
                if (!_this3._callbacks) {
                  _this3._callbacks = new CallbackList();
                }

                if (_this3._options && _this3._options.onFirstListenerAdd && _this3._callbacks.isEmpty()) {
                  _this3._options.onFirstListenerAdd(_this3);
                }

                _this3._callbacks.add(listener, thisArgs);

                var result = {
                  dispose: function dispose() {
                    if (!_this3._callbacks) {
                      return;
                    }

                    _this3._callbacks.remove(listener, thisArgs);

                    result.dispose = Emitter2._noop;

                    if (_this3._options && _this3._options.onLastListenerRemove && _this3._callbacks.isEmpty()) {
                      _this3._options.onLastListenerRemove(_this3);
                    }
                  }
                };

                if (Array.isArray(disposables)) {
                  disposables.push(result);
                }

                return result;
              };
            }

            return this._event;
          }
        }, {
          key: "fire",
          value: function fire(event) {
            if (this._callbacks) {
              this._callbacks.invoke.call(this._callbacks, event);
            }
          }
        }, {
          key: "dispose",
          value: function dispose() {
            if (this._callbacks) {
              this._callbacks.dispose();

              this._callbacks = void 0;
            }
          }
        }]);

        return Emitter2;
      }();

      exports.Emitter = Emitter2;

      Emitter2._noop = function () {};
    }
  }); // server/node_modules/vscode-jsonrpc/lib/common/messageBuffer.js


  var require_messageBuffer = __commonJS({
    "server/node_modules/vscode-jsonrpc/lib/common/messageBuffer.js": function serverNode_modulesVscodeJsonrpcLibCommonMessageBufferJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.AbstractMessageBuffer = void 0;
      var CR = 13;
      var LF = 10;
      var CRLF = "\r\n";

      var AbstractMessageBuffer = /*#__PURE__*/function () {
        function AbstractMessageBuffer() {
          var encoding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "utf-8";

          _classCallCheck(this, AbstractMessageBuffer);

          this._encoding = encoding;
          this._chunks = [];
          this._totalLength = 0;
        }

        _createClass(AbstractMessageBuffer, [{
          key: "encoding",
          get: function get() {
            return this._encoding;
          }
        }, {
          key: "append",
          value: function append(chunk) {
            var toAppend = typeof chunk === "string" ? this.fromString(chunk, this._encoding) : chunk;

            this._chunks.push(toAppend);

            this._totalLength += toAppend.byteLength;
          }
        }, {
          key: "tryReadHeaders",
          value: function tryReadHeaders() {
            if (this._chunks.length === 0) {
              return void 0;
            }

            var state = 0;
            var chunkIndex = 0;
            var offset = 0;
            var chunkBytesRead = 0;

            row: while (chunkIndex < this._chunks.length) {
              var chunk = this._chunks[chunkIndex];
              offset = 0;

              column: while (offset < chunk.length) {
                var value = chunk[offset];

                switch (value) {
                  case CR:
                    switch (state) {
                      case 0:
                        state = 1;
                        break;

                      case 2:
                        state = 3;
                        break;

                      default:
                        state = 0;
                    }

                    break;

                  case LF:
                    switch (state) {
                      case 1:
                        state = 2;
                        break;

                      case 3:
                        state = 4;
                        offset++;
                        break row;

                      default:
                        state = 0;
                    }

                    break;

                  default:
                    state = 0;
                }

                offset++;
              }

              chunkBytesRead += chunk.byteLength;
              chunkIndex++;
            }

            if (state !== 4) {
              return void 0;
            }

            var buffer = this._read(chunkBytesRead + offset);

            var result = new Map();
            var headers = this.toString(buffer, "ascii").split(CRLF);

            if (headers.length < 2) {
              return result;
            }

            for (var i = 0; i < headers.length - 2; i++) {
              var header = headers[i];
              var index = header.indexOf(":");

              if (index === -1) {
                throw new Error("Message header must separate key and value using :");
              }

              var key = header.substr(0, index);

              var _value2 = header.substr(index + 1).trim();

              result.set(key, _value2);
            }

            return result;
          }
        }, {
          key: "tryReadBody",
          value: function tryReadBody(length) {
            if (this._totalLength < length) {
              return void 0;
            }

            return this._read(length);
          }
        }, {
          key: "numberOfBytes",
          get: function get() {
            return this._totalLength;
          }
        }, {
          key: "_read",
          value: function _read(byteCount) {
            if (byteCount === 0) {
              return this.emptyBuffer();
            }

            if (byteCount > this._totalLength) {
              throw new Error("Cannot read so many bytes!");
            }

            if (this._chunks[0].byteLength === byteCount) {
              var chunk = this._chunks[0];

              this._chunks.shift();

              this._totalLength -= byteCount;
              return this.asNative(chunk);
            }

            if (this._chunks[0].byteLength > byteCount) {
              var _chunk = this._chunks[0];
              var result2 = this.asNative(_chunk, byteCount);
              this._chunks[0] = _chunk.slice(byteCount);
              this._totalLength -= byteCount;
              return result2;
            }

            var result = this.allocNative(byteCount);
            var resultOffset = 0;
            var chunkIndex = 0;

            while (byteCount > 0) {
              var _chunk2 = this._chunks[chunkIndex];

              if (_chunk2.byteLength > byteCount) {
                var chunkPart = _chunk2.slice(0, byteCount);

                result.set(chunkPart, resultOffset);
                resultOffset += byteCount;
                this._chunks[chunkIndex] = _chunk2.slice(byteCount);
                this._totalLength -= byteCount;
                byteCount -= byteCount;
              } else {
                result.set(_chunk2, resultOffset);
                resultOffset += _chunk2.byteLength;

                this._chunks.shift();

                this._totalLength -= _chunk2.byteLength;
                byteCount -= _chunk2.byteLength;
              }
            }

            return result;
          }
        }]);

        return AbstractMessageBuffer;
      }();

      exports.AbstractMessageBuffer = AbstractMessageBuffer;
    }
  }); // server/node_modules/vscode-jsonrpc/lib/browser/ril.js


  var require_ril = __commonJS({
    "server/node_modules/vscode-jsonrpc/lib/browser/ril.js": function serverNode_modulesVscodeJsonrpcLibBrowserRilJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var ral_1 = require_ral();
      var disposable_1 = require_disposable();
      var events_1 = require_events();
      var messageBuffer_1 = require_messageBuffer();

      var MessageBuffer = /*#__PURE__*/function (_messageBuffer_1$Abst) {
        _inherits(MessageBuffer, _messageBuffer_1$Abst);

        var _super = _createSuper(MessageBuffer);

        function MessageBuffer() {
          var _this4;

          var encoding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "utf-8";

          _classCallCheck(this, MessageBuffer);

          _this4 = _super.call(this, encoding);
          _this4.asciiDecoder = new TextDecoder("ascii");
          return _this4;
        }

        _createClass(MessageBuffer, [{
          key: "emptyBuffer",
          value: function emptyBuffer() {
            return MessageBuffer.emptyBuffer;
          }
        }, {
          key: "fromString",
          value: function fromString(value, _encoding) {
            return new TextEncoder().encode(value);
          }
        }, {
          key: "toString",
          value: function toString(value, encoding) {
            if (encoding === "ascii") {
              return this.asciiDecoder.decode(value);
            } else {
              return new TextDecoder(encoding).decode(value);
            }
          }
        }, {
          key: "asNative",
          value: function asNative(buffer, length) {
            if (length === void 0) {
              return buffer;
            } else {
              return buffer.slice(0, length);
            }
          }
        }, {
          key: "allocNative",
          value: function allocNative(length) {
            return new Uint8Array(length);
          }
        }]);

        return MessageBuffer;
      }(messageBuffer_1.AbstractMessageBuffer);

      MessageBuffer.emptyBuffer = new Uint8Array(0);

      var ReadableStreamWrapper = /*#__PURE__*/function () {
        function ReadableStreamWrapper(socket) {
          var _this5 = this;

          _classCallCheck(this, ReadableStreamWrapper);

          this.socket = socket;
          this._onData = new events_1.Emitter();

          this._messageListener = function (event) {
            var blob = event.data;
            blob.arrayBuffer().then(function (buffer) {
              _this5._onData.fire(new Uint8Array(buffer));
            }, function () {
              (0, ral_1.default)().console.error("Converting blob to array buffer failed.");
            });
          };

          this.socket.addEventListener("message", this._messageListener);
        }

        _createClass(ReadableStreamWrapper, [{
          key: "onClose",
          value: function onClose(listener) {
            var _this6 = this;

            this.socket.addEventListener("close", listener);
            return disposable_1.Disposable.create(function () {
              return _this6.socket.removeEventListener("close", listener);
            });
          }
        }, {
          key: "onError",
          value: function onError(listener) {
            var _this7 = this;

            this.socket.addEventListener("error", listener);
            return disposable_1.Disposable.create(function () {
              return _this7.socket.removeEventListener("error", listener);
            });
          }
        }, {
          key: "onEnd",
          value: function onEnd(listener) {
            var _this8 = this;

            this.socket.addEventListener("end", listener);
            return disposable_1.Disposable.create(function () {
              return _this8.socket.removeEventListener("end", listener);
            });
          }
        }, {
          key: "onData",
          value: function onData(listener) {
            return this._onData.event(listener);
          }
        }]);

        return ReadableStreamWrapper;
      }();

      var WritableStreamWrapper = /*#__PURE__*/function () {
        function WritableStreamWrapper(socket) {
          _classCallCheck(this, WritableStreamWrapper);

          this.socket = socket;
        }

        _createClass(WritableStreamWrapper, [{
          key: "onClose",
          value: function onClose(listener) {
            var _this9 = this;

            this.socket.addEventListener("close", listener);
            return disposable_1.Disposable.create(function () {
              return _this9.socket.removeEventListener("close", listener);
            });
          }
        }, {
          key: "onError",
          value: function onError(listener) {
            var _this10 = this;

            this.socket.addEventListener("error", listener);
            return disposable_1.Disposable.create(function () {
              return _this10.socket.removeEventListener("error", listener);
            });
          }
        }, {
          key: "onEnd",
          value: function onEnd(listener) {
            var _this11 = this;

            this.socket.addEventListener("end", listener);
            return disposable_1.Disposable.create(function () {
              return _this11.socket.removeEventListener("end", listener);
            });
          }
        }, {
          key: "write",
          value: function write(data, encoding) {
            if (typeof data === "string") {
              if (encoding !== void 0 && encoding !== "utf-8") {
                throw new Error("In a Browser environments only utf-8 text encoding is supported. But got encoding: ".concat(encoding));
              }

              this.socket.send(data);
            } else {
              this.socket.send(data);
            }

            return Promise.resolve();
          }
        }, {
          key: "end",
          value: function end() {
            this.socket.close();
          }
        }]);

        return WritableStreamWrapper;
      }();

      var _textEncoder = new TextEncoder();

      var _ril = Object.freeze({
        messageBuffer: Object.freeze({
          create: function create(encoding) {
            return new MessageBuffer(encoding);
          }
        }),
        applicationJson: Object.freeze({
          encoder: Object.freeze({
            name: "application/json",
            encode: function encode(msg, options) {
              if (options.charset !== "utf-8") {
                throw new Error("In a Browser environments only utf-8 text encoding is supported. But got encoding: ".concat(options.charset));
              }

              return Promise.resolve(_textEncoder.encode(JSON.stringify(msg, void 0, 0)));
            }
          }),
          decoder: Object.freeze({
            name: "application/json",
            decode: function decode(buffer, options) {
              if (!(buffer instanceof Uint8Array)) {
                throw new Error("In a Browser environments only Uint8Arrays are supported.");
              }

              return Promise.resolve(JSON.parse(new TextDecoder(options.charset).decode(buffer)));
            }
          })
        }),
        stream: Object.freeze({
          asReadableStream: function asReadableStream(socket) {
            return new ReadableStreamWrapper(socket);
          },
          asWritableStream: function asWritableStream(socket) {
            return new WritableStreamWrapper(socket);
          }
        }),
        console: console,
        timer: Object.freeze({
          setTimeout: function (_setTimeout) {
            function setTimeout(_x, _x2) {
              return _setTimeout.apply(this, arguments);
            }

            setTimeout.toString = function () {
              return _setTimeout.toString();
            };

            return setTimeout;
          }(function (callback, ms) {
            for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
              args[_key2 - 2] = arguments[_key2];
            }

            var handle = setTimeout.apply(void 0, [callback, ms].concat(args));
            return {
              dispose: function dispose() {
                return clearTimeout(handle);
              }
            };
          }),
          setImmediate: function setImmediate(callback) {
            for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
              args[_key3 - 1] = arguments[_key3];
            }

            var handle = setTimeout.apply(void 0, [callback, 0].concat(args));
            return {
              dispose: function dispose() {
                return clearTimeout(handle);
              }
            };
          },
          setInterval: function (_setInterval) {
            function setInterval(_x3, _x4) {
              return _setInterval.apply(this, arguments);
            }

            setInterval.toString = function () {
              return _setInterval.toString();
            };

            return setInterval;
          }(function (callback, ms) {
            for (var _len4 = arguments.length, args = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {
              args[_key4 - 2] = arguments[_key4];
            }

            var handle = setInterval.apply(void 0, [callback, ms].concat(args));
            return {
              dispose: function dispose() {
                return clearInterval(handle);
              }
            };
          })
        })
      });

      function RIL() {
        return _ril;
      }

      (function (RIL2) {
        function install() {
          ral_1.default.install(_ril);
        }

        RIL2.install = install;
      })(RIL || (RIL = {}));

      exports.default = RIL;
    }
  }); // server/node_modules/vscode-jsonrpc/lib/common/is.js


  var require_is = __commonJS({
    "server/node_modules/vscode-jsonrpc/lib/common/is.js": function serverNode_modulesVscodeJsonrpcLibCommonIsJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;

      function boolean(value) {
        return value === true || value === false;
      }

      exports.boolean = boolean;

      function string(value) {
        return typeof value === "string" || value instanceof String;
      }

      exports.string = string;

      function number(value) {
        return typeof value === "number" || value instanceof Number;
      }

      exports.number = number;

      function error(value) {
        return value instanceof Error;
      }

      exports.error = error;

      function func(value) {
        return typeof value === "function";
      }

      exports.func = func;

      function array(value) {
        return Array.isArray(value);
      }

      exports.array = array;

      function stringArray(value) {
        return array(value) && value.every(function (elem) {
          return string(elem);
        });
      }

      exports.stringArray = stringArray;
    }
  }); // server/node_modules/vscode-jsonrpc/lib/common/messages.js


  var require_messages = __commonJS({
    "server/node_modules/vscode-jsonrpc/lib/common/messages.js": function serverNode_modulesVscodeJsonrpcLibCommonMessagesJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Message = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType = exports.RequestType0 = exports.AbstractMessageSignature = exports.ParameterStructures = exports.ResponseError = exports.ErrorCodes = void 0;
      var is = require_is();
      var ErrorCodes;

      (function (ErrorCodes2) {
        ErrorCodes2.ParseError = -32700;
        ErrorCodes2.InvalidRequest = -32600;
        ErrorCodes2.MethodNotFound = -32601;
        ErrorCodes2.InvalidParams = -32602;
        ErrorCodes2.InternalError = -32603;
        ErrorCodes2.jsonrpcReservedErrorRangeStart = -32099;
        ErrorCodes2.serverErrorStart = ErrorCodes2.jsonrpcReservedErrorRangeStart;
        ErrorCodes2.MessageWriteError = -32099;
        ErrorCodes2.MessageReadError = -32098;
        ErrorCodes2.ServerNotInitialized = -32002;
        ErrorCodes2.UnknownErrorCode = -32001;
        ErrorCodes2.jsonrpcReservedErrorRangeEnd = -32e3;
        ErrorCodes2.serverErrorEnd = ErrorCodes2.jsonrpcReservedErrorRangeEnd;
      })(ErrorCodes = exports.ErrorCodes || (exports.ErrorCodes = {}));

      var ResponseError = /*#__PURE__*/function (_Error) {
        _inherits(ResponseError, _Error);

        var _super2 = _createSuper(ResponseError);

        function ResponseError(code, message, data) {
          var _this12;

          _classCallCheck(this, ResponseError);

          _this12 = _super2.call(this, message);
          _this12.code = is.number(code) ? code : ErrorCodes.UnknownErrorCode;
          _this12.data = data;
          Object.setPrototypeOf(_assertThisInitialized(_this12), ResponseError.prototype);
          return _this12;
        }

        _createClass(ResponseError, [{
          key: "toJson",
          value: function toJson() {
            var result = {
              code: this.code,
              message: this.message
            };

            if (this.data !== void 0) {
              result.data = this.data;
            }

            return result;
          }
        }]);

        return ResponseError;
      }( /*#__PURE__*/_wrapNativeSuper(Error));

      exports.ResponseError = ResponseError;

      var ParameterStructures = /*#__PURE__*/function () {
        function ParameterStructures(kind) {
          _classCallCheck(this, ParameterStructures);

          this.kind = kind;
        }

        _createClass(ParameterStructures, [{
          key: "toString",
          value: function toString() {
            return this.kind;
          }
        }], [{
          key: "is",
          value: function is(value) {
            return value === ParameterStructures.auto || value === ParameterStructures.byName || value === ParameterStructures.byPosition;
          }
        }]);

        return ParameterStructures;
      }();

      exports.ParameterStructures = ParameterStructures;
      ParameterStructures.auto = new ParameterStructures("auto");
      ParameterStructures.byPosition = new ParameterStructures("byPosition");
      ParameterStructures.byName = new ParameterStructures("byName");

      var AbstractMessageSignature = /*#__PURE__*/function () {
        function AbstractMessageSignature(method, numberOfParams) {
          _classCallCheck(this, AbstractMessageSignature);

          this.method = method;
          this.numberOfParams = numberOfParams;
        }

        _createClass(AbstractMessageSignature, [{
          key: "parameterStructures",
          get: function get() {
            return ParameterStructures.auto;
          }
        }]);

        return AbstractMessageSignature;
      }();

      exports.AbstractMessageSignature = AbstractMessageSignature;

      var RequestType0 = /*#__PURE__*/function (_AbstractMessageSigna) {
        _inherits(RequestType0, _AbstractMessageSigna);

        var _super3 = _createSuper(RequestType0);

        function RequestType0(method) {
          _classCallCheck(this, RequestType0);

          return _super3.call(this, method, 0);
        }

        return _createClass(RequestType0);
      }(AbstractMessageSignature);

      exports.RequestType0 = RequestType0;

      var RequestType = /*#__PURE__*/function (_AbstractMessageSigna2) {
        _inherits(RequestType, _AbstractMessageSigna2);

        var _super4 = _createSuper(RequestType);

        function RequestType(method) {
          var _this13;

          var _parameterStructures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ParameterStructures.auto;

          _classCallCheck(this, RequestType);

          _this13 = _super4.call(this, method, 1);
          _this13._parameterStructures = _parameterStructures;
          return _this13;
        }

        _createClass(RequestType, [{
          key: "parameterStructures",
          get: function get() {
            return this._parameterStructures;
          }
        }]);

        return RequestType;
      }(AbstractMessageSignature);

      exports.RequestType = RequestType;

      var RequestType1 = /*#__PURE__*/function (_AbstractMessageSigna3) {
        _inherits(RequestType1, _AbstractMessageSigna3);

        var _super5 = _createSuper(RequestType1);

        function RequestType1(method) {
          var _this14;

          var _parameterStructures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ParameterStructures.auto;

          _classCallCheck(this, RequestType1);

          _this14 = _super5.call(this, method, 1);
          _this14._parameterStructures = _parameterStructures;
          return _this14;
        }

        _createClass(RequestType1, [{
          key: "parameterStructures",
          get: function get() {
            return this._parameterStructures;
          }
        }]);

        return RequestType1;
      }(AbstractMessageSignature);

      exports.RequestType1 = RequestType1;

      var RequestType2 = /*#__PURE__*/function (_AbstractMessageSigna4) {
        _inherits(RequestType2, _AbstractMessageSigna4);

        var _super6 = _createSuper(RequestType2);

        function RequestType2(method) {
          _classCallCheck(this, RequestType2);

          return _super6.call(this, method, 2);
        }

        return _createClass(RequestType2);
      }(AbstractMessageSignature);

      exports.RequestType2 = RequestType2;

      var RequestType3 = /*#__PURE__*/function (_AbstractMessageSigna5) {
        _inherits(RequestType3, _AbstractMessageSigna5);

        var _super7 = _createSuper(RequestType3);

        function RequestType3(method) {
          _classCallCheck(this, RequestType3);

          return _super7.call(this, method, 3);
        }

        return _createClass(RequestType3);
      }(AbstractMessageSignature);

      exports.RequestType3 = RequestType3;

      var RequestType4 = /*#__PURE__*/function (_AbstractMessageSigna6) {
        _inherits(RequestType4, _AbstractMessageSigna6);

        var _super8 = _createSuper(RequestType4);

        function RequestType4(method) {
          _classCallCheck(this, RequestType4);

          return _super8.call(this, method, 4);
        }

        return _createClass(RequestType4);
      }(AbstractMessageSignature);

      exports.RequestType4 = RequestType4;

      var RequestType5 = /*#__PURE__*/function (_AbstractMessageSigna7) {
        _inherits(RequestType5, _AbstractMessageSigna7);

        var _super9 = _createSuper(RequestType5);

        function RequestType5(method) {
          _classCallCheck(this, RequestType5);

          return _super9.call(this, method, 5);
        }

        return _createClass(RequestType5);
      }(AbstractMessageSignature);

      exports.RequestType5 = RequestType5;

      var RequestType6 = /*#__PURE__*/function (_AbstractMessageSigna8) {
        _inherits(RequestType6, _AbstractMessageSigna8);

        var _super10 = _createSuper(RequestType6);

        function RequestType6(method) {
          _classCallCheck(this, RequestType6);

          return _super10.call(this, method, 6);
        }

        return _createClass(RequestType6);
      }(AbstractMessageSignature);

      exports.RequestType6 = RequestType6;

      var RequestType7 = /*#__PURE__*/function (_AbstractMessageSigna9) {
        _inherits(RequestType7, _AbstractMessageSigna9);

        var _super11 = _createSuper(RequestType7);

        function RequestType7(method) {
          _classCallCheck(this, RequestType7);

          return _super11.call(this, method, 7);
        }

        return _createClass(RequestType7);
      }(AbstractMessageSignature);

      exports.RequestType7 = RequestType7;

      var RequestType8 = /*#__PURE__*/function (_AbstractMessageSigna10) {
        _inherits(RequestType8, _AbstractMessageSigna10);

        var _super12 = _createSuper(RequestType8);

        function RequestType8(method) {
          _classCallCheck(this, RequestType8);

          return _super12.call(this, method, 8);
        }

        return _createClass(RequestType8);
      }(AbstractMessageSignature);

      exports.RequestType8 = RequestType8;

      var RequestType9 = /*#__PURE__*/function (_AbstractMessageSigna11) {
        _inherits(RequestType9, _AbstractMessageSigna11);

        var _super13 = _createSuper(RequestType9);

        function RequestType9(method) {
          _classCallCheck(this, RequestType9);

          return _super13.call(this, method, 9);
        }

        return _createClass(RequestType9);
      }(AbstractMessageSignature);

      exports.RequestType9 = RequestType9;

      var NotificationType = /*#__PURE__*/function (_AbstractMessageSigna12) {
        _inherits(NotificationType, _AbstractMessageSigna12);

        var _super14 = _createSuper(NotificationType);

        function NotificationType(method) {
          var _this15;

          var _parameterStructures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ParameterStructures.auto;

          _classCallCheck(this, NotificationType);

          _this15 = _super14.call(this, method, 1);
          _this15._parameterStructures = _parameterStructures;
          return _this15;
        }

        _createClass(NotificationType, [{
          key: "parameterStructures",
          get: function get() {
            return this._parameterStructures;
          }
        }]);

        return NotificationType;
      }(AbstractMessageSignature);

      exports.NotificationType = NotificationType;

      var NotificationType0 = /*#__PURE__*/function (_AbstractMessageSigna13) {
        _inherits(NotificationType0, _AbstractMessageSigna13);

        var _super15 = _createSuper(NotificationType0);

        function NotificationType0(method) {
          _classCallCheck(this, NotificationType0);

          return _super15.call(this, method, 0);
        }

        return _createClass(NotificationType0);
      }(AbstractMessageSignature);

      exports.NotificationType0 = NotificationType0;

      var NotificationType1 = /*#__PURE__*/function (_AbstractMessageSigna14) {
        _inherits(NotificationType1, _AbstractMessageSigna14);

        var _super16 = _createSuper(NotificationType1);

        function NotificationType1(method) {
          var _this16;

          var _parameterStructures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ParameterStructures.auto;

          _classCallCheck(this, NotificationType1);

          _this16 = _super16.call(this, method, 1);
          _this16._parameterStructures = _parameterStructures;
          return _this16;
        }

        _createClass(NotificationType1, [{
          key: "parameterStructures",
          get: function get() {
            return this._parameterStructures;
          }
        }]);

        return NotificationType1;
      }(AbstractMessageSignature);

      exports.NotificationType1 = NotificationType1;

      var NotificationType2 = /*#__PURE__*/function (_AbstractMessageSigna15) {
        _inherits(NotificationType2, _AbstractMessageSigna15);

        var _super17 = _createSuper(NotificationType2);

        function NotificationType2(method) {
          _classCallCheck(this, NotificationType2);

          return _super17.call(this, method, 2);
        }

        return _createClass(NotificationType2);
      }(AbstractMessageSignature);

      exports.NotificationType2 = NotificationType2;

      var NotificationType3 = /*#__PURE__*/function (_AbstractMessageSigna16) {
        _inherits(NotificationType3, _AbstractMessageSigna16);

        var _super18 = _createSuper(NotificationType3);

        function NotificationType3(method) {
          _classCallCheck(this, NotificationType3);

          return _super18.call(this, method, 3);
        }

        return _createClass(NotificationType3);
      }(AbstractMessageSignature);

      exports.NotificationType3 = NotificationType3;

      var NotificationType4 = /*#__PURE__*/function (_AbstractMessageSigna17) {
        _inherits(NotificationType4, _AbstractMessageSigna17);

        var _super19 = _createSuper(NotificationType4);

        function NotificationType4(method) {
          _classCallCheck(this, NotificationType4);

          return _super19.call(this, method, 4);
        }

        return _createClass(NotificationType4);
      }(AbstractMessageSignature);

      exports.NotificationType4 = NotificationType4;

      var NotificationType5 = /*#__PURE__*/function (_AbstractMessageSigna18) {
        _inherits(NotificationType5, _AbstractMessageSigna18);

        var _super20 = _createSuper(NotificationType5);

        function NotificationType5(method) {
          _classCallCheck(this, NotificationType5);

          return _super20.call(this, method, 5);
        }

        return _createClass(NotificationType5);
      }(AbstractMessageSignature);

      exports.NotificationType5 = NotificationType5;

      var NotificationType6 = /*#__PURE__*/function (_AbstractMessageSigna19) {
        _inherits(NotificationType6, _AbstractMessageSigna19);

        var _super21 = _createSuper(NotificationType6);

        function NotificationType6(method) {
          _classCallCheck(this, NotificationType6);

          return _super21.call(this, method, 6);
        }

        return _createClass(NotificationType6);
      }(AbstractMessageSignature);

      exports.NotificationType6 = NotificationType6;

      var NotificationType7 = /*#__PURE__*/function (_AbstractMessageSigna20) {
        _inherits(NotificationType7, _AbstractMessageSigna20);

        var _super22 = _createSuper(NotificationType7);

        function NotificationType7(method) {
          _classCallCheck(this, NotificationType7);

          return _super22.call(this, method, 7);
        }

        return _createClass(NotificationType7);
      }(AbstractMessageSignature);

      exports.NotificationType7 = NotificationType7;

      var NotificationType8 = /*#__PURE__*/function (_AbstractMessageSigna21) {
        _inherits(NotificationType8, _AbstractMessageSigna21);

        var _super23 = _createSuper(NotificationType8);

        function NotificationType8(method) {
          _classCallCheck(this, NotificationType8);

          return _super23.call(this, method, 8);
        }

        return _createClass(NotificationType8);
      }(AbstractMessageSignature);

      exports.NotificationType8 = NotificationType8;

      var NotificationType9 = /*#__PURE__*/function (_AbstractMessageSigna22) {
        _inherits(NotificationType9, _AbstractMessageSigna22);

        var _super24 = _createSuper(NotificationType9);

        function NotificationType9(method) {
          _classCallCheck(this, NotificationType9);

          return _super24.call(this, method, 9);
        }

        return _createClass(NotificationType9);
      }(AbstractMessageSignature);

      exports.NotificationType9 = NotificationType9;
      var Message;

      (function (Message2) {
        function isRequest(message) {
          var candidate = message;
          return candidate && is.string(candidate.method) && (is.string(candidate.id) || is.number(candidate.id));
        }

        Message2.isRequest = isRequest;

        function isNotification(message) {
          var candidate = message;
          return candidate && is.string(candidate.method) && message.id === void 0;
        }

        Message2.isNotification = isNotification;

        function isResponse(message) {
          var candidate = message;
          return candidate && (candidate.result !== void 0 || !!candidate.error) && (is.string(candidate.id) || is.number(candidate.id) || candidate.id === null);
        }

        Message2.isResponse = isResponse;
      })(Message = exports.Message || (exports.Message = {}));
    }
  }); // server/node_modules/vscode-jsonrpc/lib/common/linkedMap.js


  var require_linkedMap = __commonJS({
    "server/node_modules/vscode-jsonrpc/lib/common/linkedMap.js": function serverNode_modulesVscodeJsonrpcLibCommonLinkedMapJs(exports) {
      "use strict";

      var _a;

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.LRUCache = exports.LinkedMap = exports.Touch = void 0;
      var Touch;

      (function (Touch2) {
        Touch2.None = 0;
        Touch2.First = 1;
        Touch2.AsOld = Touch2.First;
        Touch2.Last = 2;
        Touch2.AsNew = Touch2.Last;
      })(Touch = exports.Touch || (exports.Touch = {}));

      var LinkedMap = /*#__PURE__*/function (_ref) {
        function LinkedMap() {
          _classCallCheck(this, LinkedMap);

          this[_a] = "LinkedMap";
          this._map = new Map();
          this._head = void 0;
          this._tail = void 0;
          this._size = 0;
          this._state = 0;
        }

        _createClass(LinkedMap, [{
          key: "clear",
          value: function clear() {
            this._map.clear();

            this._head = void 0;
            this._tail = void 0;
            this._size = 0;
            this._state++;
          }
        }, {
          key: "isEmpty",
          value: function isEmpty() {
            return !this._head && !this._tail;
          }
        }, {
          key: "size",
          get: function get() {
            return this._size;
          }
        }, {
          key: "first",
          get: function get() {
            var _this$_head;

            return (_this$_head = this._head) === null || _this$_head === void 0 ? void 0 : _this$_head.value;
          }
        }, {
          key: "last",
          get: function get() {
            var _this$_tail;

            return (_this$_tail = this._tail) === null || _this$_tail === void 0 ? void 0 : _this$_tail.value;
          }
        }, {
          key: "has",
          value: function has(key) {
            return this._map.has(key);
          }
        }, {
          key: "get",
          value: function get(key) {
            var touch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Touch.None;

            var item = this._map.get(key);

            if (!item) {
              return void 0;
            }

            if (touch !== Touch.None) {
              this.touch(item, touch);
            }

            return item.value;
          }
        }, {
          key: "set",
          value: function set(key, value) {
            var touch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Touch.None;

            var item = this._map.get(key);

            if (item) {
              item.value = value;

              if (touch !== Touch.None) {
                this.touch(item, touch);
              }
            } else {
              item = {
                key: key,
                value: value,
                next: void 0,
                previous: void 0
              };

              switch (touch) {
                case Touch.None:
                  this.addItemLast(item);
                  break;

                case Touch.First:
                  this.addItemFirst(item);
                  break;

                case Touch.Last:
                  this.addItemLast(item);
                  break;

                default:
                  this.addItemLast(item);
                  break;
              }

              this._map.set(key, item);

              this._size++;
            }

            return this;
          }
        }, {
          key: "delete",
          value: function _delete(key) {
            return !!this.remove(key);
          }
        }, {
          key: "remove",
          value: function remove(key) {
            var item = this._map.get(key);

            if (!item) {
              return void 0;
            }

            this._map.delete(key);

            this.removeItem(item);
            this._size--;
            return item.value;
          }
        }, {
          key: "shift",
          value: function shift() {
            if (!this._head && !this._tail) {
              return void 0;
            }

            if (!this._head || !this._tail) {
              throw new Error("Invalid list");
            }

            var item = this._head;

            this._map.delete(item.key);

            this.removeItem(item);
            this._size--;
            return item.value;
          }
        }, {
          key: "forEach",
          value: function forEach(callbackfn, thisArg) {
            var state = this._state;
            var current = this._head;

            while (current) {
              if (thisArg) {
                callbackfn.bind(thisArg)(current.value, current.key, this);
              } else {
                callbackfn(current.value, current.key, this);
              }

              if (this._state !== state) {
                throw new Error("LinkedMap got modified during iteration.");
              }

              current = current.next;
            }
          }
        }, {
          key: "keys",
          value: function keys() {
            var _this17 = this,
                _iterator2;

            var state = this._state;
            var current = this._head;
            var iterator = (_iterator2 = {}, _defineProperty(_iterator2, Symbol.iterator, function () {
              return iterator;
            }), _defineProperty(_iterator2, "next", function next() {
              if (_this17._state !== state) {
                throw new Error("LinkedMap got modified during iteration.");
              }

              if (current) {
                var result = {
                  value: current.key,
                  done: false
                };
                current = current.next;
                return result;
              } else {
                return {
                  value: void 0,
                  done: true
                };
              }
            }), _iterator2);
            return iterator;
          }
        }, {
          key: "values",
          value: function values() {
            var _this18 = this,
                _iterator3;

            var state = this._state;
            var current = this._head;
            var iterator = (_iterator3 = {}, _defineProperty(_iterator3, Symbol.iterator, function () {
              return iterator;
            }), _defineProperty(_iterator3, "next", function next() {
              if (_this18._state !== state) {
                throw new Error("LinkedMap got modified during iteration.");
              }

              if (current) {
                var result = {
                  value: current.value,
                  done: false
                };
                current = current.next;
                return result;
              } else {
                return {
                  value: void 0,
                  done: true
                };
              }
            }), _iterator3);
            return iterator;
          }
        }, {
          key: "entries",
          value: function entries() {
            var _this19 = this,
                _iterator4;

            var state = this._state;
            var current = this._head;
            var iterator = (_iterator4 = {}, _defineProperty(_iterator4, Symbol.iterator, function () {
              return iterator;
            }), _defineProperty(_iterator4, "next", function next() {
              if (_this19._state !== state) {
                throw new Error("LinkedMap got modified during iteration.");
              }

              if (current) {
                var result = {
                  value: [current.key, current.value],
                  done: false
                };
                current = current.next;
                return result;
              } else {
                return {
                  value: void 0,
                  done: true
                };
              }
            }), _iterator4);
            return iterator;
          }
        }, {
          key: _ref,
          value: function value() {
            return this.entries();
          }
        }, {
          key: "trimOld",
          value: function trimOld(newSize) {
            if (newSize >= this.size) {
              return;
            }

            if (newSize === 0) {
              this.clear();
              return;
            }

            var current = this._head;
            var currentSize = this.size;

            while (current && currentSize > newSize) {
              this._map.delete(current.key);

              current = current.next;
              currentSize--;
            }

            this._head = current;
            this._size = currentSize;

            if (current) {
              current.previous = void 0;
            }

            this._state++;
          }
        }, {
          key: "addItemFirst",
          value: function addItemFirst(item) {
            if (!this._head && !this._tail) {
              this._tail = item;
            } else if (!this._head) {
              throw new Error("Invalid list");
            } else {
              item.next = this._head;
              this._head.previous = item;
            }

            this._head = item;
            this._state++;
          }
        }, {
          key: "addItemLast",
          value: function addItemLast(item) {
            if (!this._head && !this._tail) {
              this._head = item;
            } else if (!this._tail) {
              throw new Error("Invalid list");
            } else {
              item.previous = this._tail;
              this._tail.next = item;
            }

            this._tail = item;
            this._state++;
          }
        }, {
          key: "removeItem",
          value: function removeItem(item) {
            if (item === this._head && item === this._tail) {
              this._head = void 0;
              this._tail = void 0;
            } else if (item === this._head) {
              if (!item.next) {
                throw new Error("Invalid list");
              }

              item.next.previous = void 0;
              this._head = item.next;
            } else if (item === this._tail) {
              if (!item.previous) {
                throw new Error("Invalid list");
              }

              item.previous.next = void 0;
              this._tail = item.previous;
            } else {
              var next = item.next;
              var previous = item.previous;

              if (!next || !previous) {
                throw new Error("Invalid list");
              }

              next.previous = previous;
              previous.next = next;
            }

            item.next = void 0;
            item.previous = void 0;
            this._state++;
          }
        }, {
          key: "touch",
          value: function touch(item, _touch) {
            if (!this._head || !this._tail) {
              throw new Error("Invalid list");
            }

            if (_touch !== Touch.First && _touch !== Touch.Last) {
              return;
            }

            if (_touch === Touch.First) {
              if (item === this._head) {
                return;
              }

              var next = item.next;
              var previous = item.previous;

              if (item === this._tail) {
                previous.next = void 0;
                this._tail = previous;
              } else {
                next.previous = previous;
                previous.next = next;
              }

              item.previous = void 0;
              item.next = this._head;
              this._head.previous = item;
              this._head = item;
              this._state++;
            } else if (_touch === Touch.Last) {
              if (item === this._tail) {
                return;
              }

              var _next = item.next;
              var _previous = item.previous;

              if (item === this._head) {
                _next.previous = void 0;
                this._head = _next;
              } else {
                _next.previous = _previous;
                _previous.next = _next;
              }

              item.next = void 0;
              item.previous = this._tail;
              this._tail.next = item;
              this._tail = item;
              this._state++;
            }
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            var data = [];
            this.forEach(function (value, key) {
              data.push([key, value]);
            });
            return data;
          }
        }, {
          key: "fromJSON",
          value: function fromJSON(data) {
            this.clear();

            var _iterator5 = _createForOfIteratorHelper(data),
                _step2;

            try {
              for (_iterator5.s(); !(_step2 = _iterator5.n()).done;) {
                var _step2$value = _slicedToArray(_step2.value, 2),
                    key = _step2$value[0],
                    value = _step2$value[1];

                this.set(key, value);
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }
          }
        }]);

        return LinkedMap;
      }((_a = Symbol.toStringTag, Symbol.iterator));

      exports.LinkedMap = LinkedMap;

      var LRUCache = /*#__PURE__*/function (_LinkedMap) {
        _inherits(LRUCache, _LinkedMap);

        var _super25 = _createSuper(LRUCache);

        function LRUCache(limit) {
          var _this20;

          var ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

          _classCallCheck(this, LRUCache);

          _this20 = _super25.call(this);
          _this20._limit = limit;
          _this20._ratio = Math.min(Math.max(0, ratio), 1);
          return _this20;
        }

        _createClass(LRUCache, [{
          key: "limit",
          get: function get() {
            return this._limit;
          },
          set: function set(limit) {
            this._limit = limit;
            this.checkTrim();
          }
        }, {
          key: "ratio",
          get: function get() {
            return this._ratio;
          },
          set: function set(ratio) {
            this._ratio = Math.min(Math.max(0, ratio), 1);
            this.checkTrim();
          }
        }, {
          key: "get",
          value: function get(key) {
            var touch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Touch.AsNew;
            return _get(_getPrototypeOf(LRUCache.prototype), "get", this).call(this, key, touch);
          }
        }, {
          key: "peek",
          value: function peek(key) {
            return _get(_getPrototypeOf(LRUCache.prototype), "get", this).call(this, key, Touch.None);
          }
        }, {
          key: "set",
          value: function set(key, value) {
            _get(_getPrototypeOf(LRUCache.prototype), "set", this).call(this, key, value, Touch.Last);

            this.checkTrim();
            return this;
          }
        }, {
          key: "checkTrim",
          value: function checkTrim() {
            if (this.size > this._limit) {
              this.trimOld(Math.round(this._limit * this._ratio));
            }
          }
        }]);

        return LRUCache;
      }(LinkedMap);

      exports.LRUCache = LRUCache;
    }
  }); // server/node_modules/vscode-jsonrpc/lib/common/cancellation.js


  var require_cancellation = __commonJS({
    "server/node_modules/vscode-jsonrpc/lib/common/cancellation.js": function serverNode_modulesVscodeJsonrpcLibCommonCancellationJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.CancellationTokenSource = exports.CancellationToken = void 0;
      var ral_1 = require_ral();
      var Is = require_is();
      var events_1 = require_events();
      var CancellationToken;

      (function (CancellationToken2) {
        CancellationToken2.None = Object.freeze({
          isCancellationRequested: false,
          onCancellationRequested: events_1.Event.None
        });
        CancellationToken2.Cancelled = Object.freeze({
          isCancellationRequested: true,
          onCancellationRequested: events_1.Event.None
        });

        function is(value) {
          var candidate = value;
          return candidate && (candidate === CancellationToken2.None || candidate === CancellationToken2.Cancelled || Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested);
        }

        CancellationToken2.is = is;
      })(CancellationToken = exports.CancellationToken || (exports.CancellationToken = {}));

      var shortcutEvent = Object.freeze(function (callback, context) {
        var handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);
        return {
          dispose: function dispose() {
            handle.dispose();
          }
        };
      });

      var MutableToken = /*#__PURE__*/function () {
        function MutableToken() {
          _classCallCheck(this, MutableToken);

          this._isCancelled = false;
        }

        _createClass(MutableToken, [{
          key: "cancel",
          value: function cancel() {
            if (!this._isCancelled) {
              this._isCancelled = true;

              if (this._emitter) {
                this._emitter.fire(void 0);

                this.dispose();
              }
            }
          }
        }, {
          key: "isCancellationRequested",
          get: function get() {
            return this._isCancelled;
          }
        }, {
          key: "onCancellationRequested",
          get: function get() {
            if (this._isCancelled) {
              return shortcutEvent;
            }

            if (!this._emitter) {
              this._emitter = new events_1.Emitter();
            }

            return this._emitter.event;
          }
        }, {
          key: "dispose",
          value: function dispose() {
            if (this._emitter) {
              this._emitter.dispose();

              this._emitter = void 0;
            }
          }
        }]);

        return MutableToken;
      }();

      var CancellationTokenSource3 = /*#__PURE__*/function () {
        function CancellationTokenSource3() {
          _classCallCheck(this, CancellationTokenSource3);
        }

        _createClass(CancellationTokenSource3, [{
          key: "token",
          get: function get() {
            if (!this._token) {
              this._token = new MutableToken();
            }

            return this._token;
          }
        }, {
          key: "cancel",
          value: function cancel() {
            if (!this._token) {
              this._token = CancellationToken.Cancelled;
            } else {
              this._token.cancel();
            }
          }
        }, {
          key: "dispose",
          value: function dispose() {
            if (!this._token) {
              this._token = CancellationToken.None;
            } else if (this._token instanceof MutableToken) {
              this._token.dispose();
            }
          }
        }]);

        return CancellationTokenSource3;
      }();

      exports.CancellationTokenSource = CancellationTokenSource3;
    }
  }); // server/node_modules/vscode-jsonrpc/lib/common/messageReader.js


  var require_messageReader = __commonJS({
    "server/node_modules/vscode-jsonrpc/lib/common/messageReader.js": function serverNode_modulesVscodeJsonrpcLibCommonMessageReaderJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = void 0;
      var ral_1 = require_ral();
      var Is = require_is();
      var events_1 = require_events();
      var MessageReader;

      (function (MessageReader2) {
        function is(value) {
          var candidate = value;
          return candidate && Is.func(candidate.listen) && Is.func(candidate.dispose) && Is.func(candidate.onError) && Is.func(candidate.onClose) && Is.func(candidate.onPartialMessage);
        }

        MessageReader2.is = is;
      })(MessageReader = exports.MessageReader || (exports.MessageReader = {}));

      var AbstractMessageReader = /*#__PURE__*/function () {
        function AbstractMessageReader() {
          _classCallCheck(this, AbstractMessageReader);

          this.errorEmitter = new events_1.Emitter();
          this.closeEmitter = new events_1.Emitter();
          this.partialMessageEmitter = new events_1.Emitter();
        }

        _createClass(AbstractMessageReader, [{
          key: "dispose",
          value: function dispose() {
            this.errorEmitter.dispose();
            this.closeEmitter.dispose();
          }
        }, {
          key: "onError",
          get: function get() {
            return this.errorEmitter.event;
          }
        }, {
          key: "fireError",
          value: function fireError(error) {
            this.errorEmitter.fire(this.asError(error));
          }
        }, {
          key: "onClose",
          get: function get() {
            return this.closeEmitter.event;
          }
        }, {
          key: "fireClose",
          value: function fireClose() {
            this.closeEmitter.fire(void 0);
          }
        }, {
          key: "onPartialMessage",
          get: function get() {
            return this.partialMessageEmitter.event;
          }
        }, {
          key: "firePartialMessage",
          value: function firePartialMessage(info) {
            this.partialMessageEmitter.fire(info);
          }
        }, {
          key: "asError",
          value: function asError(error) {
            if (error instanceof Error) {
              return error;
            } else {
              return new Error("Reader received error. Reason: ".concat(Is.string(error.message) ? error.message : "unknown"));
            }
          }
        }]);

        return AbstractMessageReader;
      }();

      exports.AbstractMessageReader = AbstractMessageReader;
      var ResolvedMessageReaderOptions;

      (function (ResolvedMessageReaderOptions2) {
        function fromOptions(options) {
          var charset;
          var result;
          var contentDecoder;
          var contentDecoders = new Map();
          var contentTypeDecoder;
          var contentTypeDecoders = new Map();

          if (options === void 0 || typeof options === "string") {
            charset = options !== null && options !== void 0 ? options : "utf-8";
          } else {
            var _options$charset;

            charset = (_options$charset = options.charset) !== null && _options$charset !== void 0 ? _options$charset : "utf-8";

            if (options.contentDecoder !== void 0) {
              contentDecoder = options.contentDecoder;
              contentDecoders.set(contentDecoder.name, contentDecoder);
            }

            if (options.contentDecoders !== void 0) {
              var _iterator6 = _createForOfIteratorHelper(options.contentDecoders),
                  _step3;

              try {
                for (_iterator6.s(); !(_step3 = _iterator6.n()).done;) {
                  var decoder = _step3.value;
                  contentDecoders.set(decoder.name, decoder);
                }
              } catch (err) {
                _iterator6.e(err);
              } finally {
                _iterator6.f();
              }
            }

            if (options.contentTypeDecoder !== void 0) {
              contentTypeDecoder = options.contentTypeDecoder;
              contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
            }

            if (options.contentTypeDecoders !== void 0) {
              var _iterator7 = _createForOfIteratorHelper(options.contentTypeDecoders),
                  _step4;

              try {
                for (_iterator7.s(); !(_step4 = _iterator7.n()).done;) {
                  var _decoder = _step4.value;
                  contentTypeDecoders.set(_decoder.name, _decoder);
                }
              } catch (err) {
                _iterator7.e(err);
              } finally {
                _iterator7.f();
              }
            }
          }

          if (contentTypeDecoder === void 0) {
            contentTypeDecoder = (0, ral_1.default)().applicationJson.decoder;
            contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
          }

          return {
            charset: charset,
            contentDecoder: contentDecoder,
            contentDecoders: contentDecoders,
            contentTypeDecoder: contentTypeDecoder,
            contentTypeDecoders: contentTypeDecoders
          };
        }

        ResolvedMessageReaderOptions2.fromOptions = fromOptions;
      })(ResolvedMessageReaderOptions || (ResolvedMessageReaderOptions = {}));

      var ReadableStreamMessageReader = /*#__PURE__*/function (_AbstractMessageReade) {
        _inherits(ReadableStreamMessageReader, _AbstractMessageReade);

        var _super26 = _createSuper(ReadableStreamMessageReader);

        function ReadableStreamMessageReader(readable, options) {
          var _this21;

          _classCallCheck(this, ReadableStreamMessageReader);

          _this21 = _super26.call(this);
          _this21.readable = readable;
          _this21.options = ResolvedMessageReaderOptions.fromOptions(options);
          _this21.buffer = (0, ral_1.default)().messageBuffer.create(_this21.options.charset);
          _this21._partialMessageTimeout = 1e4;
          _this21.nextMessageLength = -1;
          _this21.messageToken = 0;
          return _this21;
        }

        _createClass(ReadableStreamMessageReader, [{
          key: "partialMessageTimeout",
          get: function get() {
            return this._partialMessageTimeout;
          },
          set: function set(timeout) {
            this._partialMessageTimeout = timeout;
          }
        }, {
          key: "listen",
          value: function listen(callback) {
            var _this22 = this;

            this.nextMessageLength = -1;
            this.messageToken = 0;
            this.partialMessageTimer = void 0;
            this.callback = callback;
            var result = this.readable.onData(function (data) {
              _this22.onData(data);
            });
            this.readable.onError(function (error) {
              return _this22.fireError(error);
            });
            this.readable.onClose(function () {
              return _this22.fireClose();
            });
            return result;
          }
        }, {
          key: "onData",
          value: function onData(data) {
            var _this23 = this;

            this.buffer.append(data);

            while (true) {
              if (this.nextMessageLength === -1) {
                var headers = this.buffer.tryReadHeaders();

                if (!headers) {
                  return;
                }

                var contentLength = headers.get("Content-Length");

                if (!contentLength) {
                  throw new Error("Header must provide a Content-Length property.");
                }

                var length = parseInt(contentLength);

                if (isNaN(length)) {
                  throw new Error("Content-Length value must be a number.");
                }

                this.nextMessageLength = length;
              }

              var body = this.buffer.tryReadBody(this.nextMessageLength);

              if (body === void 0) {
                this.setPartialMessageTimer();
                return;
              }

              this.clearPartialMessageTimer();
              this.nextMessageLength = -1;
              var p = void 0;

              if (this.options.contentDecoder !== void 0) {
                p = this.options.contentDecoder.decode(body);
              } else {
                p = Promise.resolve(body);
              }

              p.then(function (value) {
                _this23.options.contentTypeDecoder.decode(value, _this23.options).then(function (msg) {
                  _this23.callback(msg);
                }, function (error) {
                  _this23.fireError(error);
                });
              }, function (error) {
                _this23.fireError(error);
              });
            }
          }
        }, {
          key: "clearPartialMessageTimer",
          value: function clearPartialMessageTimer() {
            if (this.partialMessageTimer) {
              this.partialMessageTimer.dispose();
              this.partialMessageTimer = void 0;
            }
          }
        }, {
          key: "setPartialMessageTimer",
          value: function setPartialMessageTimer() {
            var _this24 = this;

            this.clearPartialMessageTimer();

            if (this._partialMessageTimeout <= 0) {
              return;
            }

            this.partialMessageTimer = (0, ral_1.default)().timer.setTimeout(function (token, timeout) {
              _this24.partialMessageTimer = void 0;

              if (token === _this24.messageToken) {
                _this24.firePartialMessage({
                  messageToken: token,
                  waitingTime: timeout
                });

                _this24.setPartialMessageTimer();
              }
            }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);
          }
        }]);

        return ReadableStreamMessageReader;
      }(AbstractMessageReader);

      exports.ReadableStreamMessageReader = ReadableStreamMessageReader;
    }
  }); // server/node_modules/vscode-jsonrpc/lib/common/semaphore.js


  var require_semaphore = __commonJS({
    "server/node_modules/vscode-jsonrpc/lib/common/semaphore.js": function serverNode_modulesVscodeJsonrpcLibCommonSemaphoreJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Semaphore = void 0;
      var ral_1 = require_ral();

      var Semaphore = /*#__PURE__*/function () {
        function Semaphore() {
          var capacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

          _classCallCheck(this, Semaphore);

          if (capacity <= 0) {
            throw new Error("Capacity must be greater than 0");
          }

          this._capacity = capacity;
          this._active = 0;
          this._waiting = [];
        }

        _createClass(Semaphore, [{
          key: "lock",
          value: function lock(thunk) {
            var _this25 = this;

            return new Promise(function (resolve, reject) {
              _this25._waiting.push({
                thunk: thunk,
                resolve: resolve,
                reject: reject
              });

              _this25.runNext();
            });
          }
        }, {
          key: "active",
          get: function get() {
            return this._active;
          }
        }, {
          key: "runNext",
          value: function runNext() {
            var _this26 = this;

            if (this._waiting.length === 0 || this._active === this._capacity) {
              return;
            }

            (0, ral_1.default)().timer.setImmediate(function () {
              return _this26.doRunNext();
            });
          }
        }, {
          key: "doRunNext",
          value: function doRunNext() {
            var _this27 = this;

            if (this._waiting.length === 0 || this._active === this._capacity) {
              return;
            }

            var next = this._waiting.shift();

            this._active++;

            if (this._active > this._capacity) {
              throw new Error("To many thunks active");
            }

            try {
              var result = next.thunk();

              if (result instanceof Promise) {
                result.then(function (value) {
                  _this27._active--;
                  next.resolve(value);

                  _this27.runNext();
                }, function (err) {
                  _this27._active--;
                  next.reject(err);

                  _this27.runNext();
                });
              } else {
                this._active--;
                next.resolve(result);
                this.runNext();
              }
            } catch (err) {
              this._active--;
              next.reject(err);
              this.runNext();
            }
          }
        }]);

        return Semaphore;
      }();

      exports.Semaphore = Semaphore;
    }
  }); // server/node_modules/vscode-jsonrpc/lib/common/messageWriter.js


  var require_messageWriter = __commonJS({
    "server/node_modules/vscode-jsonrpc/lib/common/messageWriter.js": function serverNode_modulesVscodeJsonrpcLibCommonMessageWriterJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = void 0;
      var ral_1 = require_ral();
      var Is = require_is();
      var semaphore_1 = require_semaphore();
      var events_1 = require_events();
      var ContentLength = "Content-Length: ";
      var CRLF = "\r\n";
      var MessageWriter;

      (function (MessageWriter2) {
        function is(value) {
          var candidate = value;
          return candidate && Is.func(candidate.dispose) && Is.func(candidate.onClose) && Is.func(candidate.onError) && Is.func(candidate.write);
        }

        MessageWriter2.is = is;
      })(MessageWriter = exports.MessageWriter || (exports.MessageWriter = {}));

      var AbstractMessageWriter = /*#__PURE__*/function () {
        function AbstractMessageWriter() {
          _classCallCheck(this, AbstractMessageWriter);

          this.errorEmitter = new events_1.Emitter();
          this.closeEmitter = new events_1.Emitter();
        }

        _createClass(AbstractMessageWriter, [{
          key: "dispose",
          value: function dispose() {
            this.errorEmitter.dispose();
            this.closeEmitter.dispose();
          }
        }, {
          key: "onError",
          get: function get() {
            return this.errorEmitter.event;
          }
        }, {
          key: "fireError",
          value: function fireError(error, message, count) {
            this.errorEmitter.fire([this.asError(error), message, count]);
          }
        }, {
          key: "onClose",
          get: function get() {
            return this.closeEmitter.event;
          }
        }, {
          key: "fireClose",
          value: function fireClose() {
            this.closeEmitter.fire(void 0);
          }
        }, {
          key: "asError",
          value: function asError(error) {
            if (error instanceof Error) {
              return error;
            } else {
              return new Error("Writer received error. Reason: ".concat(Is.string(error.message) ? error.message : "unknown"));
            }
          }
        }]);

        return AbstractMessageWriter;
      }();

      exports.AbstractMessageWriter = AbstractMessageWriter;
      var ResolvedMessageWriterOptions;

      (function (ResolvedMessageWriterOptions2) {
        function fromOptions(options) {
          if (options === void 0 || typeof options === "string") {
            return {
              charset: options !== null && options !== void 0 ? options : "utf-8",
              contentTypeEncoder: (0, ral_1.default)().applicationJson.encoder
            };
          } else {
            var _options$charset2, _options$contentTypeE;

            return {
              charset: (_options$charset2 = options.charset) !== null && _options$charset2 !== void 0 ? _options$charset2 : "utf-8",
              contentEncoder: options.contentEncoder,
              contentTypeEncoder: (_options$contentTypeE = options.contentTypeEncoder) !== null && _options$contentTypeE !== void 0 ? _options$contentTypeE : (0, ral_1.default)().applicationJson.encoder
            };
          }
        }

        ResolvedMessageWriterOptions2.fromOptions = fromOptions;
      })(ResolvedMessageWriterOptions || (ResolvedMessageWriterOptions = {}));

      var WriteableStreamMessageWriter = /*#__PURE__*/function (_AbstractMessageWrite) {
        _inherits(WriteableStreamMessageWriter, _AbstractMessageWrite);

        var _super27 = _createSuper(WriteableStreamMessageWriter);

        function WriteableStreamMessageWriter(writable, options) {
          var _this28;

          _classCallCheck(this, WriteableStreamMessageWriter);

          _this28 = _super27.call(this);
          _this28.writable = writable;
          _this28.options = ResolvedMessageWriterOptions.fromOptions(options);
          _this28.errorCount = 0;
          _this28.writeSemaphore = new semaphore_1.Semaphore(1);

          _this28.writable.onError(function (error) {
            return _this28.fireError(error);
          });

          _this28.writable.onClose(function () {
            return _this28.fireClose();
          });

          return _this28;
        }

        _createClass(WriteableStreamMessageWriter, [{
          key: "write",
          value: function () {
            var _write = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(msg) {
              var _this29 = this;

              return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      return _context2.abrupt("return", this.writeSemaphore.lock( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                        var payload;
                        return regeneratorRuntime.wrap(function _callee$(_context) {
                          while (1) {
                            switch (_context.prev = _context.next) {
                              case 0:
                                payload = _this29.options.contentTypeEncoder.encode(msg, _this29.options).then(function (buffer) {
                                  if (_this29.options.contentEncoder !== void 0) {
                                    return _this29.options.contentEncoder.encode(buffer);
                                  } else {
                                    return buffer;
                                  }
                                });
                                return _context.abrupt("return", payload.then(function (buffer) {
                                  var headers = [];
                                  headers.push(ContentLength, buffer.byteLength.toString(), CRLF);
                                  headers.push(CRLF);
                                  return _this29.doWrite(msg, headers, buffer);
                                }, function (error) {
                                  _this29.fireError(error);

                                  throw error;
                                }));

                              case 2:
                              case "end":
                                return _context.stop();
                            }
                          }
                        }, _callee);
                      }))));

                    case 1:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2, this);
            }));

            function write(_x5) {
              return _write.apply(this, arguments);
            }

            return write;
          }()
        }, {
          key: "doWrite",
          value: function () {
            var _doWrite = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(msg, headers, data) {
              return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      _context3.prev = 0;
                      _context3.next = 3;
                      return this.writable.write(headers.join(""), "ascii");

                    case 3:
                      return _context3.abrupt("return", this.writable.write(data));

                    case 6:
                      _context3.prev = 6;
                      _context3.t0 = _context3["catch"](0);
                      this.handleError(_context3.t0, msg);
                      return _context3.abrupt("return", Promise.reject(_context3.t0));

                    case 10:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, _callee3, this, [[0, 6]]);
            }));

            function doWrite(_x6, _x7, _x8) {
              return _doWrite.apply(this, arguments);
            }

            return doWrite;
          }()
        }, {
          key: "handleError",
          value: function handleError(error, msg) {
            this.errorCount++;
            this.fireError(error, msg, this.errorCount);
          }
        }, {
          key: "end",
          value: function end() {
            this.writable.end();
          }
        }]);

        return WriteableStreamMessageWriter;
      }(AbstractMessageWriter);

      exports.WriteableStreamMessageWriter = WriteableStreamMessageWriter;
    }
  }); // server/node_modules/vscode-jsonrpc/lib/common/connection.js


  var require_connection = __commonJS({
    "server/node_modules/vscode-jsonrpc/lib/common/connection.js": function serverNode_modulesVscodeJsonrpcLibCommonConnectionJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createMessageConnection = exports.ConnectionOptions = exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.ConnectionStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.Trace = exports.NullLogger = exports.ProgressType = exports.ProgressToken = void 0;
      var ral_1 = require_ral();
      var Is = require_is();
      var messages_1 = require_messages();
      var linkedMap_1 = require_linkedMap();
      var events_1 = require_events();
      var cancellation_1 = require_cancellation();
      var CancelNotification;

      (function (CancelNotification2) {
        CancelNotification2.type = new messages_1.NotificationType("$/cancelRequest");
      })(CancelNotification || (CancelNotification = {}));

      var ProgressToken;

      (function (ProgressToken2) {
        function is(value) {
          return typeof value === "string" || typeof value === "number";
        }

        ProgressToken2.is = is;
      })(ProgressToken = exports.ProgressToken || (exports.ProgressToken = {}));

      var ProgressNotification;

      (function (ProgressNotification2) {
        ProgressNotification2.type = new messages_1.NotificationType("$/progress");
      })(ProgressNotification || (ProgressNotification = {}));

      var ProgressType = /*#__PURE__*/_createClass(function ProgressType() {
        _classCallCheck(this, ProgressType);
      });

      exports.ProgressType = ProgressType;
      var StarRequestHandler;

      (function (StarRequestHandler2) {
        function is(value) {
          return Is.func(value);
        }

        StarRequestHandler2.is = is;
      })(StarRequestHandler || (StarRequestHandler = {}));

      exports.NullLogger = Object.freeze({
        error: function error() {},
        warn: function warn() {},
        info: function info() {},
        log: function log() {}
      });
      var Trace;

      (function (Trace2) {
        Trace2[Trace2["Off"] = 0] = "Off";
        Trace2[Trace2["Messages"] = 1] = "Messages";
        Trace2[Trace2["Compact"] = 2] = "Compact";
        Trace2[Trace2["Verbose"] = 3] = "Verbose";
      })(Trace = exports.Trace || (exports.Trace = {}));

      (function (Trace2) {
        function fromString(value) {
          if (!Is.string(value)) {
            return Trace2.Off;
          }

          value = value.toLowerCase();

          switch (value) {
            case "off":
              return Trace2.Off;

            case "messages":
              return Trace2.Messages;

            case "compact":
              return Trace2.Compact;

            case "verbose":
              return Trace2.Verbose;

            default:
              return Trace2.Off;
          }
        }

        Trace2.fromString = fromString;

        function toString(value) {
          switch (value) {
            case Trace2.Off:
              return "off";

            case Trace2.Messages:
              return "messages";

            case Trace2.Compact:
              return "compact";

            case Trace2.Verbose:
              return "verbose";

            default:
              return "off";
          }
        }

        Trace2.toString = toString;
      })(Trace = exports.Trace || (exports.Trace = {}));

      var TraceFormat;

      (function (TraceFormat2) {
        TraceFormat2["Text"] = "text";
        TraceFormat2["JSON"] = "json";
      })(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));

      (function (TraceFormat2) {
        function fromString(value) {
          if (!Is.string(value)) {
            return TraceFormat2.Text;
          }

          value = value.toLowerCase();

          if (value === "json") {
            return TraceFormat2.JSON;
          } else {
            return TraceFormat2.Text;
          }
        }

        TraceFormat2.fromString = fromString;
      })(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));

      var SetTraceNotification;

      (function (SetTraceNotification2) {
        SetTraceNotification2.type = new messages_1.NotificationType("$/setTrace");
      })(SetTraceNotification = exports.SetTraceNotification || (exports.SetTraceNotification = {}));

      var LogTraceNotification;

      (function (LogTraceNotification2) {
        LogTraceNotification2.type = new messages_1.NotificationType("$/logTrace");
      })(LogTraceNotification = exports.LogTraceNotification || (exports.LogTraceNotification = {}));

      var ConnectionErrors;

      (function (ConnectionErrors2) {
        ConnectionErrors2[ConnectionErrors2["Closed"] = 1] = "Closed";
        ConnectionErrors2[ConnectionErrors2["Disposed"] = 2] = "Disposed";
        ConnectionErrors2[ConnectionErrors2["AlreadyListening"] = 3] = "AlreadyListening";
      })(ConnectionErrors = exports.ConnectionErrors || (exports.ConnectionErrors = {}));

      var ConnectionError = /*#__PURE__*/function (_Error2) {
        _inherits(ConnectionError, _Error2);

        var _super28 = _createSuper(ConnectionError);

        function ConnectionError(code, message) {
          var _this30;

          _classCallCheck(this, ConnectionError);

          _this30 = _super28.call(this, message);
          _this30.code = code;
          Object.setPrototypeOf(_assertThisInitialized(_this30), ConnectionError.prototype);
          return _this30;
        }

        return _createClass(ConnectionError);
      }( /*#__PURE__*/_wrapNativeSuper(Error));

      exports.ConnectionError = ConnectionError;
      var ConnectionStrategy;

      (function (ConnectionStrategy2) {
        function is(value) {
          var candidate = value;
          return candidate && Is.func(candidate.cancelUndispatched);
        }

        ConnectionStrategy2.is = is;
      })(ConnectionStrategy = exports.ConnectionStrategy || (exports.ConnectionStrategy = {}));

      var CancellationReceiverStrategy;

      (function (CancellationReceiverStrategy2) {
        CancellationReceiverStrategy2.Message = Object.freeze({
          createCancellationTokenSource: function createCancellationTokenSource(_) {
            return new cancellation_1.CancellationTokenSource();
          }
        });

        function is(value) {
          var candidate = value;
          return candidate && Is.func(candidate.createCancellationTokenSource);
        }

        CancellationReceiverStrategy2.is = is;
      })(CancellationReceiverStrategy = exports.CancellationReceiverStrategy || (exports.CancellationReceiverStrategy = {}));

      var CancellationSenderStrategy;

      (function (CancellationSenderStrategy2) {
        CancellationSenderStrategy2.Message = Object.freeze({
          sendCancellation: function sendCancellation(conn, id) {
            return conn.sendNotification(CancelNotification.type, {
              id: id
            });
          },
          cleanup: function cleanup(_) {}
        });

        function is(value) {
          var candidate = value;
          return candidate && Is.func(candidate.sendCancellation) && Is.func(candidate.cleanup);
        }

        CancellationSenderStrategy2.is = is;
      })(CancellationSenderStrategy = exports.CancellationSenderStrategy || (exports.CancellationSenderStrategy = {}));

      var CancellationStrategy;

      (function (CancellationStrategy2) {
        CancellationStrategy2.Message = Object.freeze({
          receiver: CancellationReceiverStrategy.Message,
          sender: CancellationSenderStrategy.Message
        });

        function is(value) {
          var candidate = value;
          return candidate && CancellationReceiverStrategy.is(candidate.receiver) && CancellationSenderStrategy.is(candidate.sender);
        }

        CancellationStrategy2.is = is;
      })(CancellationStrategy = exports.CancellationStrategy || (exports.CancellationStrategy = {}));

      var ConnectionOptions;

      (function (ConnectionOptions2) {
        function is(value) {
          var candidate = value;
          return candidate && (CancellationStrategy.is(candidate.cancellationStrategy) || ConnectionStrategy.is(candidate.connectionStrategy));
        }

        ConnectionOptions2.is = is;
      })(ConnectionOptions = exports.ConnectionOptions || (exports.ConnectionOptions = {}));

      var ConnectionState;

      (function (ConnectionState2) {
        ConnectionState2[ConnectionState2["New"] = 1] = "New";
        ConnectionState2[ConnectionState2["Listening"] = 2] = "Listening";
        ConnectionState2[ConnectionState2["Closed"] = 3] = "Closed";
        ConnectionState2[ConnectionState2["Disposed"] = 4] = "Disposed";
      })(ConnectionState || (ConnectionState = {}));

      function createMessageConnection(messageReader2, messageWriter2, _logger, options) {
        var logger = _logger !== void 0 ? _logger : exports.NullLogger;
        var sequenceNumber = 0;
        var notificationSequenceNumber = 0;
        var unknownResponseSequenceNumber = 0;
        var version = "2.0";
        var starRequestHandler = void 0;
        var requestHandlers = Object.create(null);
        var starNotificationHandler = void 0;
        var notificationHandlers = Object.create(null);
        var progressHandlers = new Map();
        var timer;
        var messageQueue = new linkedMap_1.LinkedMap();
        var responsePromises = Object.create(null);
        var knownCanceledRequests = new Set();
        var requestTokens = Object.create(null);
        var _trace = Trace.Off;
        var traceFormat = TraceFormat.Text;
        var tracer;
        var state = ConnectionState.New;
        var errorEmitter = new events_1.Emitter();
        var closeEmitter = new events_1.Emitter();
        var unhandledNotificationEmitter = new events_1.Emitter();
        var unhandledProgressEmitter = new events_1.Emitter();
        var disposeEmitter = new events_1.Emitter();
        var cancellationStrategy = options && options.cancellationStrategy ? options.cancellationStrategy : CancellationStrategy.Message;

        function createRequestQueueKey(id) {
          if (id === null) {
            throw new Error("Can't send requests with id null since the response can't be correlated.");
          }

          return "req-" + id.toString();
        }

        function createResponseQueueKey(id) {
          if (id === null) {
            return "res-unknown-" + (++unknownResponseSequenceNumber).toString();
          } else {
            return "res-" + id.toString();
          }
        }

        function createNotificationQueueKey() {
          return "not-" + (++notificationSequenceNumber).toString();
        }

        function addMessageToQueue(queue, message) {
          if (messages_1.Message.isRequest(message)) {
            queue.set(createRequestQueueKey(message.id), message);
          } else if (messages_1.Message.isResponse(message)) {
            queue.set(createResponseQueueKey(message.id), message);
          } else {
            queue.set(createNotificationQueueKey(), message);
          }
        }

        function cancelUndispatched(_message) {
          return void 0;
        }

        function isListening() {
          return state === ConnectionState.Listening;
        }

        function isClosed() {
          return state === ConnectionState.Closed;
        }

        function isDisposed() {
          return state === ConnectionState.Disposed;
        }

        function closeHandler() {
          if (state === ConnectionState.New || state === ConnectionState.Listening) {
            state = ConnectionState.Closed;
            closeEmitter.fire(void 0);
          }
        }

        function readErrorHandler(error) {
          errorEmitter.fire([error, void 0, void 0]);
        }

        function writeErrorHandler(data) {
          errorEmitter.fire(data);
        }

        messageReader2.onClose(closeHandler);
        messageReader2.onError(readErrorHandler);
        messageWriter2.onClose(closeHandler);
        messageWriter2.onError(writeErrorHandler);

        function triggerMessageQueue() {
          if (timer || messageQueue.size === 0) {
            return;
          }

          timer = (0, ral_1.default)().timer.setImmediate(function () {
            timer = void 0;
            processMessageQueue();
          });
        }

        function processMessageQueue() {
          if (messageQueue.size === 0) {
            return;
          }

          var message = messageQueue.shift();

          try {
            if (messages_1.Message.isRequest(message)) {
              handleRequest(message);
            } else if (messages_1.Message.isNotification(message)) {
              handleNotification(message);
            } else if (messages_1.Message.isResponse(message)) {
              handleResponse(message);
            } else {
              handleInvalidMessage(message);
            }
          } finally {
            triggerMessageQueue();
          }
        }

        var callback = function callback(message) {
          try {
            if (messages_1.Message.isNotification(message) && message.method === CancelNotification.type.method) {
              var cancelId = message.params.id;
              var key = createRequestQueueKey(cancelId);
              var toCancel = messageQueue.get(key);

              if (messages_1.Message.isRequest(toCancel)) {
                var strategy = options === null || options === void 0 ? void 0 : options.connectionStrategy;
                var response = strategy && strategy.cancelUndispatched ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);

                if (response && (response.error !== void 0 || response.result !== void 0)) {
                  messageQueue.delete(key);
                  response.id = toCancel.id;
                  traceSendingResponse(response, message.method, Date.now());
                  messageWriter2.write(response).catch(function () {
                    return logger.error("Sending response for canceled message failed.");
                  });
                  return;
                }
              }

              var tokenKey = String(cancelId);
              var cancellationToken = requestTokens[tokenKey];

              if (cancellationToken !== void 0) {
                cancellationToken.cancel();
                traceReceivedNotification(message);
                return;
              } else {
                knownCanceledRequests.add(cancelId);
              }
            }

            addMessageToQueue(messageQueue, message);
          } finally {
            triggerMessageQueue();
          }
        };

        function handleRequest(requestMessage) {
          if (isDisposed()) {
            return;
          }

          function reply(resultOrError, method, startTime2) {
            var message = {
              jsonrpc: version,
              id: requestMessage.id
            };

            if (resultOrError instanceof messages_1.ResponseError) {
              message.error = resultOrError.toJson();
            } else {
              message.result = resultOrError === void 0 ? null : resultOrError;
            }

            traceSendingResponse(message, method, startTime2);
            messageWriter2.write(message).catch(function () {
              return logger.error("Sending response failed.");
            });
          }

          function replyError(error, method, startTime2) {
            var message = {
              jsonrpc: version,
              id: requestMessage.id,
              error: error.toJson()
            };
            traceSendingResponse(message, method, startTime2);
            messageWriter2.write(message).catch(function () {
              return logger.error("Sending response failed.");
            });
          }

          function replySuccess(result, method, startTime2) {
            if (result === void 0) {
              result = null;
            }

            var message = {
              jsonrpc: version,
              id: requestMessage.id,
              result: result
            };
            traceSendingResponse(message, method, startTime2);
            messageWriter2.write(message).catch(function () {
              return logger.error("Sending response failed.");
            });
          }

          traceReceivedRequest(requestMessage);
          var element = requestHandlers[requestMessage.method];
          var type;
          var requestHandler;

          if (element) {
            type = element.type;
            requestHandler = element.handler;
          }

          var startTime = Date.now();

          if (requestHandler || starRequestHandler) {
            var tokenKey = String(requestMessage.id);
            var cancellationSource = cancellationStrategy.receiver.createCancellationTokenSource(tokenKey);

            if (requestMessage.id !== null && knownCanceledRequests.has(requestMessage.id)) {
              cancellationSource.cancel();
            }

            requestTokens[tokenKey] = cancellationSource;

            try {
              var handlerResult;

              if (requestHandler) {
                if (requestMessage.params === void 0) {
                  if (type !== void 0 && type.numberOfParams !== 0) {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, "Request ".concat(requestMessage.method, " defines ").concat(type.numberOfParams, " params but received none.")), requestMessage.method, startTime);
                    return;
                  }

                  handlerResult = requestHandler(cancellationSource.token);
                } else if (Array.isArray(requestMessage.params)) {
                  if (type !== void 0 && type.parameterStructures === messages_1.ParameterStructures.byName) {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, "Request ".concat(requestMessage.method, " defines parameters by name but received parameters by position")), requestMessage.method, startTime);
                    return;
                  }

                  handlerResult = requestHandler.apply(void 0, _toConsumableArray(requestMessage.params).concat([cancellationSource.token]));
                } else {
                  if (type !== void 0 && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, "Request ".concat(requestMessage.method, " defines parameters by position but received parameters by name")), requestMessage.method, startTime);
                    return;
                  }

                  handlerResult = requestHandler(requestMessage.params, cancellationSource.token);
                }
              } else if (starRequestHandler) {
                handlerResult = starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);
              }

              var promise = handlerResult;

              if (!handlerResult) {
                delete requestTokens[tokenKey];
                replySuccess(handlerResult, requestMessage.method, startTime);
              } else if (promise.then) {
                promise.then(function (resultOrError) {
                  delete requestTokens[tokenKey];
                  reply(resultOrError, requestMessage.method, startTime);
                }, function (error) {
                  delete requestTokens[tokenKey];

                  if (error instanceof messages_1.ResponseError) {
                    replyError(error, requestMessage.method, startTime);
                  } else if (error && Is.string(error.message)) {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, "Request ".concat(requestMessage.method, " failed with message: ").concat(error.message)), requestMessage.method, startTime);
                  } else {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, "Request ".concat(requestMessage.method, " failed unexpectedly without providing any details.")), requestMessage.method, startTime);
                  }
                });
              } else {
                delete requestTokens[tokenKey];
                reply(handlerResult, requestMessage.method, startTime);
              }
            } catch (error) {
              delete requestTokens[tokenKey];

              if (error instanceof messages_1.ResponseError) {
                reply(error, requestMessage.method, startTime);
              } else if (error && Is.string(error.message)) {
                replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, "Request ".concat(requestMessage.method, " failed with message: ").concat(error.message)), requestMessage.method, startTime);
              } else {
                replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, "Request ".concat(requestMessage.method, " failed unexpectedly without providing any details.")), requestMessage.method, startTime);
              }
            }
          } else {
            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, "Unhandled method ".concat(requestMessage.method)), requestMessage.method, startTime);
          }
        }

        function handleResponse(responseMessage) {
          if (isDisposed()) {
            return;
          }

          if (responseMessage.id === null) {
            if (responseMessage.error) {
              logger.error("Received response message without id: Error is: \n".concat(JSON.stringify(responseMessage.error, void 0, 4)));
            } else {
              logger.error("Received response message without id. No further error information provided.");
            }
          } else {
            var key = String(responseMessage.id);
            var responsePromise = responsePromises[key];
            traceReceivedResponse(responseMessage, responsePromise);

            if (responsePromise) {
              delete responsePromises[key];

              try {
                if (responseMessage.error) {
                  var error = responseMessage.error;
                  responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));
                } else if (responseMessage.result !== void 0) {
                  responsePromise.resolve(responseMessage.result);
                } else {
                  throw new Error("Should never happen.");
                }
              } catch (error) {
                if (error.message) {
                  logger.error("Response handler '".concat(responsePromise.method, "' failed with message: ").concat(error.message));
                } else {
                  logger.error("Response handler '".concat(responsePromise.method, "' failed unexpectedly."));
                }
              }
            }
          }
        }

        function handleNotification(message) {
          if (isDisposed()) {
            return;
          }

          var type = void 0;
          var notificationHandler;

          if (message.method === CancelNotification.type.method) {
            var cancelId = message.params.id;
            knownCanceledRequests.delete(cancelId);
            traceReceivedNotification(message);
            return;
          } else {
            var element = notificationHandlers[message.method];

            if (element) {
              notificationHandler = element.handler;
              type = element.type;
            }
          }

          if (notificationHandler || starNotificationHandler) {
            try {
              traceReceivedNotification(message);

              if (notificationHandler) {
                if (message.params === void 0) {
                  if (type !== void 0) {
                    if (type.numberOfParams !== 0 && type.parameterStructures !== messages_1.ParameterStructures.byName) {
                      logger.error("Notification ".concat(message.method, " defines ").concat(type.numberOfParams, " params but received none."));
                    }
                  }

                  notificationHandler();
                } else if (Array.isArray(message.params)) {
                  var params = message.params;

                  if (message.method === ProgressNotification.type.method && params.length === 2 && ProgressToken.is(params[0])) {
                    notificationHandler({
                      token: params[0],
                      value: params[1]
                    });
                  } else {
                    if (type !== void 0) {
                      if (type.parameterStructures === messages_1.ParameterStructures.byName) {
                        logger.error("Notification ".concat(message.method, " defines parameters by name but received parameters by position"));
                      }

                      if (type.numberOfParams !== message.params.length) {
                        logger.error("Notification ".concat(message.method, " defines ").concat(type.numberOfParams, " params but received ").concat(params.length, " arguments"));
                      }
                    }

                    notificationHandler.apply(void 0, _toConsumableArray(params));
                  }
                } else {
                  if (type !== void 0 && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                    logger.error("Notification ".concat(message.method, " defines parameters by position but received parameters by name"));
                  }

                  notificationHandler(message.params);
                }
              } else if (starNotificationHandler) {
                starNotificationHandler(message.method, message.params);
              }
            } catch (error) {
              if (error.message) {
                logger.error("Notification handler '".concat(message.method, "' failed with message: ").concat(error.message));
              } else {
                logger.error("Notification handler '".concat(message.method, "' failed unexpectedly."));
              }
            }
          } else {
            unhandledNotificationEmitter.fire(message);
          }
        }

        function handleInvalidMessage(message) {
          if (!message) {
            logger.error("Received empty message.");
            return;
          }

          logger.error("Received message which is neither a response nor a notification message:\n".concat(JSON.stringify(message, null, 4)));
          var responseMessage = message;

          if (Is.string(responseMessage.id) || Is.number(responseMessage.id)) {
            var key = String(responseMessage.id);
            var responseHandler = responsePromises[key];

            if (responseHandler) {
              responseHandler.reject(new Error("The received response has neither a result nor an error property."));
            }
          }
        }

        function stringifyTrace(params) {
          if (params === void 0 || params === null) {
            return void 0;
          }

          switch (_trace) {
            case Trace.Verbose:
              return JSON.stringify(params, null, 4);

            case Trace.Compact:
              return JSON.stringify(params);

            default:
              return void 0;
          }
        }

        function traceSendingRequest(message) {
          if (_trace === Trace.Off || !tracer) {
            return;
          }

          if (traceFormat === TraceFormat.Text) {
            var data = void 0;

            if ((_trace === Trace.Verbose || _trace === Trace.Compact) && message.params) {
              data = "Params: ".concat(stringifyTrace(message.params), "\n\n");
            }

            tracer.log("Sending request '".concat(message.method, " - (").concat(message.id, ")'."), data);
          } else {
            logLSPMessage("send-request", message);
          }
        }

        function traceSendingNotification(message) {
          if (_trace === Trace.Off || !tracer) {
            return;
          }

          if (traceFormat === TraceFormat.Text) {
            var data = void 0;

            if (_trace === Trace.Verbose || _trace === Trace.Compact) {
              if (message.params) {
                data = "Params: ".concat(stringifyTrace(message.params), "\n\n");
              } else {
                data = "No parameters provided.\n\n";
              }
            }

            tracer.log("Sending notification '".concat(message.method, "'."), data);
          } else {
            logLSPMessage("send-notification", message);
          }
        }

        function traceSendingResponse(message, method, startTime) {
          if (_trace === Trace.Off || !tracer) {
            return;
          }

          if (traceFormat === TraceFormat.Text) {
            var data = void 0;

            if (_trace === Trace.Verbose || _trace === Trace.Compact) {
              if (message.error && message.error.data) {
                data = "Error data: ".concat(stringifyTrace(message.error.data), "\n\n");
              } else {
                if (message.result) {
                  data = "Result: ".concat(stringifyTrace(message.result), "\n\n");
                } else if (message.error === void 0) {
                  data = "No result returned.\n\n";
                }
              }
            }

            tracer.log("Sending response '".concat(method, " - (").concat(message.id, ")'. Processing request took ").concat(Date.now() - startTime, "ms"), data);
          } else {
            logLSPMessage("send-response", message);
          }
        }

        function traceReceivedRequest(message) {
          if (_trace === Trace.Off || !tracer) {
            return;
          }

          if (traceFormat === TraceFormat.Text) {
            var data = void 0;

            if ((_trace === Trace.Verbose || _trace === Trace.Compact) && message.params) {
              data = "Params: ".concat(stringifyTrace(message.params), "\n\n");
            }

            tracer.log("Received request '".concat(message.method, " - (").concat(message.id, ")'."), data);
          } else {
            logLSPMessage("receive-request", message);
          }
        }

        function traceReceivedNotification(message) {
          if (_trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {
            return;
          }

          if (traceFormat === TraceFormat.Text) {
            var data = void 0;

            if (_trace === Trace.Verbose || _trace === Trace.Compact) {
              if (message.params) {
                data = "Params: ".concat(stringifyTrace(message.params), "\n\n");
              } else {
                data = "No parameters provided.\n\n";
              }
            }

            tracer.log("Received notification '".concat(message.method, "'."), data);
          } else {
            logLSPMessage("receive-notification", message);
          }
        }

        function traceReceivedResponse(message, responsePromise) {
          if (_trace === Trace.Off || !tracer) {
            return;
          }

          if (traceFormat === TraceFormat.Text) {
            var data = void 0;

            if (_trace === Trace.Verbose || _trace === Trace.Compact) {
              if (message.error && message.error.data) {
                data = "Error data: ".concat(stringifyTrace(message.error.data), "\n\n");
              } else {
                if (message.result) {
                  data = "Result: ".concat(stringifyTrace(message.result), "\n\n");
                } else if (message.error === void 0) {
                  data = "No result returned.\n\n";
                }
              }
            }

            if (responsePromise) {
              var error = message.error ? " Request failed: ".concat(message.error.message, " (").concat(message.error.code, ").") : "";
              tracer.log("Received response '".concat(responsePromise.method, " - (").concat(message.id, ")' in ").concat(Date.now() - responsePromise.timerStart, "ms.").concat(error), data);
            } else {
              tracer.log("Received response ".concat(message.id, " without active response promise."), data);
            }
          } else {
            logLSPMessage("receive-response", message);
          }
        }

        function logLSPMessage(type, message) {
          if (!tracer || _trace === Trace.Off) {
            return;
          }

          var lspMessage = {
            isLSPMessage: true,
            type: type,
            message: message,
            timestamp: Date.now()
          };
          tracer.log(lspMessage);
        }

        function throwIfClosedOrDisposed() {
          if (isClosed()) {
            throw new ConnectionError(ConnectionErrors.Closed, "Connection is closed.");
          }

          if (isDisposed()) {
            throw new ConnectionError(ConnectionErrors.Disposed, "Connection is disposed.");
          }
        }

        function throwIfListening() {
          if (isListening()) {
            throw new ConnectionError(ConnectionErrors.AlreadyListening, "Connection is already listening");
          }
        }

        function throwIfNotListening() {
          if (!isListening()) {
            throw new Error("Call listen() first.");
          }
        }

        function undefinedToNull(param) {
          if (param === void 0) {
            return null;
          } else {
            return param;
          }
        }

        function nullToUndefined(param) {
          if (param === null) {
            return void 0;
          } else {
            return param;
          }
        }

        function isNamedParam(param) {
          return param !== void 0 && param !== null && !Array.isArray(param) && _typeof(param) === "object";
        }

        function computeSingleParam(parameterStructures, param) {
          switch (parameterStructures) {
            case messages_1.ParameterStructures.auto:
              if (isNamedParam(param)) {
                return nullToUndefined(param);
              } else {
                return [undefinedToNull(param)];
              }

            case messages_1.ParameterStructures.byName:
              if (!isNamedParam(param)) {
                throw new Error("Received parameters by name but param is not an object literal.");
              }

              return nullToUndefined(param);

            case messages_1.ParameterStructures.byPosition:
              return [undefinedToNull(param)];

            default:
              throw new Error("Unknown parameter structure ".concat(parameterStructures.toString()));
          }
        }

        function computeMessageParams(type, params) {
          var result;
          var numberOfParams = type.numberOfParams;

          switch (numberOfParams) {
            case 0:
              result = void 0;
              break;

            case 1:
              result = computeSingleParam(type.parameterStructures, params[0]);
              break;

            default:
              result = [];

              for (var i = 0; i < params.length && i < numberOfParams; i++) {
                result.push(undefinedToNull(params[i]));
              }

              if (params.length < numberOfParams) {
                for (var _i2 = params.length; _i2 < numberOfParams; _i2++) {
                  result.push(null);
                }
              }

              break;
          }

          return result;
        }

        var connection2 = {
          sendNotification: function sendNotification(type) {
            throwIfClosedOrDisposed();
            var method;
            var messageParams;

            for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
              args[_key5 - 1] = arguments[_key5];
            }

            if (Is.string(type)) {
              method = type;
              var first = args[0];
              var paramStart = 0;
              var parameterStructures = messages_1.ParameterStructures.auto;

              if (messages_1.ParameterStructures.is(first)) {
                paramStart = 1;
                parameterStructures = first;
              }

              var paramEnd = args.length;
              var numberOfParams = paramEnd - paramStart;

              switch (numberOfParams) {
                case 0:
                  messageParams = void 0;
                  break;

                case 1:
                  messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                  break;

                default:
                  if (parameterStructures === messages_1.ParameterStructures.byName) {
                    throw new Error("Received ".concat(numberOfParams, " parameters for 'by Name' notification parameter structure."));
                  }

                  messageParams = args.slice(paramStart, paramEnd).map(function (value) {
                    return undefinedToNull(value);
                  });
                  break;
              }
            } else {
              var params = args;
              method = type.method;
              messageParams = computeMessageParams(type, params);
            }

            var notificationMessage = {
              jsonrpc: version,
              method: method,
              params: messageParams
            };
            traceSendingNotification(notificationMessage);
            return messageWriter2.write(notificationMessage).catch(function () {
              return logger.error("Sending notification failed.");
            });
          },
          onNotification: function onNotification(type, handler) {
            throwIfClosedOrDisposed();
            var method;

            if (Is.func(type)) {
              starNotificationHandler = type;
            } else if (handler) {
              if (Is.string(type)) {
                method = type;
                notificationHandlers[type] = {
                  type: void 0,
                  handler: handler
                };
              } else {
                method = type.method;
                notificationHandlers[type.method] = {
                  type: type,
                  handler: handler
                };
              }
            }

            return {
              dispose: function dispose() {
                if (method !== void 0) {
                  delete notificationHandlers[method];
                } else {
                  starNotificationHandler = void 0;
                }
              }
            };
          },
          onProgress: function onProgress(_type, token, handler) {
            if (progressHandlers.has(token)) {
              throw new Error("Progress handler for token ".concat(token, " already registered"));
            }

            progressHandlers.set(token, handler);
            return {
              dispose: function dispose() {
                progressHandlers.delete(token);
              }
            };
          },
          sendProgress: function sendProgress(_type, token, value) {
            return connection2.sendNotification(ProgressNotification.type, {
              token: token,
              value: value
            });
          },
          onUnhandledProgress: unhandledProgressEmitter.event,
          sendRequest: function sendRequest(type) {
            throwIfClosedOrDisposed();
            throwIfNotListening();
            var method;
            var messageParams;
            var token = void 0;

            for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
              args[_key6 - 1] = arguments[_key6];
            }

            if (Is.string(type)) {
              method = type;
              var first = args[0];
              var last = args[args.length - 1];
              var paramStart = 0;
              var parameterStructures = messages_1.ParameterStructures.auto;

              if (messages_1.ParameterStructures.is(first)) {
                paramStart = 1;
                parameterStructures = first;
              }

              var paramEnd = args.length;

              if (cancellation_1.CancellationToken.is(last)) {
                paramEnd = paramEnd - 1;
                token = last;
              }

              var numberOfParams = paramEnd - paramStart;

              switch (numberOfParams) {
                case 0:
                  messageParams = void 0;
                  break;

                case 1:
                  messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                  break;

                default:
                  if (parameterStructures === messages_1.ParameterStructures.byName) {
                    throw new Error("Received ".concat(numberOfParams, " parameters for 'by Name' request parameter structure."));
                  }

                  messageParams = args.slice(paramStart, paramEnd).map(function (value) {
                    return undefinedToNull(value);
                  });
                  break;
              }
            } else {
              var params = args;
              method = type.method;
              messageParams = computeMessageParams(type, params);
              var _numberOfParams = type.numberOfParams;
              token = cancellation_1.CancellationToken.is(params[_numberOfParams]) ? params[_numberOfParams] : void 0;
            }

            var id = sequenceNumber++;
            var disposable;

            if (token) {
              disposable = token.onCancellationRequested(function () {
                var p = cancellationStrategy.sender.sendCancellation(connection2, id);

                if (p === void 0) {
                  logger.log("Received no promise from cancellation strategy when cancelling id ".concat(id));
                  return Promise.resolve();
                } else {
                  return p.catch(function () {
                    logger.log("Sending cancellation messages for id ".concat(id, " failed"));
                  });
                }
              });
            }

            var result = new Promise(function (resolve, reject) {
              var requestMessage = {
                jsonrpc: version,
                id: id,
                method: method,
                params: messageParams
              };

              var resolveWithCleanup = function resolveWithCleanup(r) {
                var _disposable2;

                resolve(r);
                cancellationStrategy.sender.cleanup(id);
                (_disposable2 = disposable) === null || _disposable2 === void 0 ? void 0 : _disposable2.dispose();
              };

              var rejectWithCleanup = function rejectWithCleanup(r) {
                var _disposable3;

                reject(r);
                cancellationStrategy.sender.cleanup(id);
                (_disposable3 = disposable) === null || _disposable3 === void 0 ? void 0 : _disposable3.dispose();
              };

              var responsePromise = {
                method: method,
                timerStart: Date.now(),
                resolve: resolveWithCleanup,
                reject: rejectWithCleanup
              };
              traceSendingRequest(requestMessage);

              try {
                messageWriter2.write(requestMessage).catch(function () {
                  return logger.error("Sending request failed.");
                });
              } catch (e) {
                responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, e.message ? e.message : "Unknown reason"));
                responsePromise = null;
              }

              if (responsePromise) {
                responsePromises[String(id)] = responsePromise;
              }
            });
            return result;
          },
          onRequest: function onRequest(type, handler) {
            throwIfClosedOrDisposed();
            var method = null;

            if (StarRequestHandler.is(type)) {
              method = void 0;
              starRequestHandler = type;
            } else if (Is.string(type)) {
              method = null;

              if (handler !== void 0) {
                method = type;
                requestHandlers[type] = {
                  handler: handler,
                  type: void 0
                };
              }
            } else {
              if (handler !== void 0) {
                method = type.method;
                requestHandlers[type.method] = {
                  type: type,
                  handler: handler
                };
              }
            }

            return {
              dispose: function dispose() {
                if (method === null) {
                  return;
                }

                if (method !== void 0) {
                  delete requestHandlers[method];
                } else {
                  starRequestHandler = void 0;
                }
              }
            };
          },
          trace: function trace(_value, _tracer, sendNotificationOrTraceOptions) {
            var _sendNotification = false;
            var _traceFormat = TraceFormat.Text;

            if (sendNotificationOrTraceOptions !== void 0) {
              if (Is.boolean(sendNotificationOrTraceOptions)) {
                _sendNotification = sendNotificationOrTraceOptions;
              } else {
                _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;
                _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;
              }
            }

            _trace = _value;
            traceFormat = _traceFormat;

            if (_trace === Trace.Off) {
              tracer = void 0;
            } else {
              tracer = _tracer;
            }

            if (_sendNotification && !isClosed() && !isDisposed()) {
              connection2.sendNotification(SetTraceNotification.type, {
                value: Trace.toString(_value)
              }).catch(function () {
                logger.error("Sending trace notification failed");
              });
            }
          },
          onError: errorEmitter.event,
          onClose: closeEmitter.event,
          onUnhandledNotification: unhandledNotificationEmitter.event,
          onDispose: disposeEmitter.event,
          end: function end() {
            messageWriter2.end();
          },
          dispose: function dispose() {
            if (isDisposed()) {
              return;
            }

            state = ConnectionState.Disposed;
            disposeEmitter.fire(void 0);
            var error = new Error("Connection got disposed.");
            Object.keys(responsePromises).forEach(function (key) {
              responsePromises[key].reject(error);
            });
            responsePromises = Object.create(null);
            requestTokens = Object.create(null);
            knownCanceledRequests = new Set();
            messageQueue = new linkedMap_1.LinkedMap();

            if (Is.func(messageWriter2.dispose)) {
              messageWriter2.dispose();
            }

            if (Is.func(messageReader2.dispose)) {
              messageReader2.dispose();
            }
          },
          listen: function listen() {
            throwIfClosedOrDisposed();
            throwIfListening();
            state = ConnectionState.Listening;
            messageReader2.listen(callback);
          },
          inspect: function inspect() {
            (0, ral_1.default)().console.log("inspect");
          }
        };
        connection2.onNotification(LogTraceNotification.type, function (params) {
          if (_trace === Trace.Off || !tracer) {
            return;
          }

          var verbose = _trace === Trace.Verbose || _trace === Trace.Compact;
          tracer.log(params.message, verbose ? params.verbose : void 0);
        });
        connection2.onNotification(ProgressNotification.type, function (params) {
          var handler = progressHandlers.get(params.token);

          if (handler) {
            handler(params.value);
          } else {
            unhandledProgressEmitter.fire(params);
          }
        });
        return connection2;
      }

      exports.createMessageConnection = createMessageConnection;
    }
  }); // server/node_modules/vscode-jsonrpc/lib/common/api.js


  var require_api = __commonJS({
    "server/node_modules/vscode-jsonrpc/lib/common/api.js": function serverNode_modulesVscodeJsonrpcLibCommonApiJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SetTraceNotification = exports.TraceFormat = exports.Trace = exports.ProgressType = exports.ProgressToken = exports.createMessageConnection = exports.NullLogger = exports.ConnectionOptions = exports.ConnectionStrategy = exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = exports.CancellationToken = exports.CancellationTokenSource = exports.Emitter = exports.Event = exports.Disposable = exports.LRUCache = exports.Touch = exports.LinkedMap = exports.ParameterStructures = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.ErrorCodes = exports.ResponseError = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType0 = exports.RequestType = exports.Message = exports.RAL = void 0;
      exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = void 0;
      var messages_1 = require_messages();
      Object.defineProperty(exports, "Message", {
        enumerable: true,
        get: function get() {
          return messages_1.Message;
        }
      });
      Object.defineProperty(exports, "RequestType", {
        enumerable: true,
        get: function get() {
          return messages_1.RequestType;
        }
      });
      Object.defineProperty(exports, "RequestType0", {
        enumerable: true,
        get: function get() {
          return messages_1.RequestType0;
        }
      });
      Object.defineProperty(exports, "RequestType1", {
        enumerable: true,
        get: function get() {
          return messages_1.RequestType1;
        }
      });
      Object.defineProperty(exports, "RequestType2", {
        enumerable: true,
        get: function get() {
          return messages_1.RequestType2;
        }
      });
      Object.defineProperty(exports, "RequestType3", {
        enumerable: true,
        get: function get() {
          return messages_1.RequestType3;
        }
      });
      Object.defineProperty(exports, "RequestType4", {
        enumerable: true,
        get: function get() {
          return messages_1.RequestType4;
        }
      });
      Object.defineProperty(exports, "RequestType5", {
        enumerable: true,
        get: function get() {
          return messages_1.RequestType5;
        }
      });
      Object.defineProperty(exports, "RequestType6", {
        enumerable: true,
        get: function get() {
          return messages_1.RequestType6;
        }
      });
      Object.defineProperty(exports, "RequestType7", {
        enumerable: true,
        get: function get() {
          return messages_1.RequestType7;
        }
      });
      Object.defineProperty(exports, "RequestType8", {
        enumerable: true,
        get: function get() {
          return messages_1.RequestType8;
        }
      });
      Object.defineProperty(exports, "RequestType9", {
        enumerable: true,
        get: function get() {
          return messages_1.RequestType9;
        }
      });
      Object.defineProperty(exports, "ResponseError", {
        enumerable: true,
        get: function get() {
          return messages_1.ResponseError;
        }
      });
      Object.defineProperty(exports, "ErrorCodes", {
        enumerable: true,
        get: function get() {
          return messages_1.ErrorCodes;
        }
      });
      Object.defineProperty(exports, "NotificationType", {
        enumerable: true,
        get: function get() {
          return messages_1.NotificationType;
        }
      });
      Object.defineProperty(exports, "NotificationType0", {
        enumerable: true,
        get: function get() {
          return messages_1.NotificationType0;
        }
      });
      Object.defineProperty(exports, "NotificationType1", {
        enumerable: true,
        get: function get() {
          return messages_1.NotificationType1;
        }
      });
      Object.defineProperty(exports, "NotificationType2", {
        enumerable: true,
        get: function get() {
          return messages_1.NotificationType2;
        }
      });
      Object.defineProperty(exports, "NotificationType3", {
        enumerable: true,
        get: function get() {
          return messages_1.NotificationType3;
        }
      });
      Object.defineProperty(exports, "NotificationType4", {
        enumerable: true,
        get: function get() {
          return messages_1.NotificationType4;
        }
      });
      Object.defineProperty(exports, "NotificationType5", {
        enumerable: true,
        get: function get() {
          return messages_1.NotificationType5;
        }
      });
      Object.defineProperty(exports, "NotificationType6", {
        enumerable: true,
        get: function get() {
          return messages_1.NotificationType6;
        }
      });
      Object.defineProperty(exports, "NotificationType7", {
        enumerable: true,
        get: function get() {
          return messages_1.NotificationType7;
        }
      });
      Object.defineProperty(exports, "NotificationType8", {
        enumerable: true,
        get: function get() {
          return messages_1.NotificationType8;
        }
      });
      Object.defineProperty(exports, "NotificationType9", {
        enumerable: true,
        get: function get() {
          return messages_1.NotificationType9;
        }
      });
      Object.defineProperty(exports, "ParameterStructures", {
        enumerable: true,
        get: function get() {
          return messages_1.ParameterStructures;
        }
      });
      var linkedMap_1 = require_linkedMap();
      Object.defineProperty(exports, "LinkedMap", {
        enumerable: true,
        get: function get() {
          return linkedMap_1.LinkedMap;
        }
      });
      Object.defineProperty(exports, "LRUCache", {
        enumerable: true,
        get: function get() {
          return linkedMap_1.LRUCache;
        }
      });
      Object.defineProperty(exports, "Touch", {
        enumerable: true,
        get: function get() {
          return linkedMap_1.Touch;
        }
      });
      var disposable_1 = require_disposable();
      Object.defineProperty(exports, "Disposable", {
        enumerable: true,
        get: function get() {
          return disposable_1.Disposable;
        }
      });
      var events_1 = require_events();
      Object.defineProperty(exports, "Event", {
        enumerable: true,
        get: function get() {
          return events_1.Event;
        }
      });
      Object.defineProperty(exports, "Emitter", {
        enumerable: true,
        get: function get() {
          return events_1.Emitter;
        }
      });
      var cancellation_1 = require_cancellation();
      Object.defineProperty(exports, "CancellationTokenSource", {
        enumerable: true,
        get: function get() {
          return cancellation_1.CancellationTokenSource;
        }
      });
      Object.defineProperty(exports, "CancellationToken", {
        enumerable: true,
        get: function get() {
          return cancellation_1.CancellationToken;
        }
      });
      var messageReader_1 = require_messageReader();
      Object.defineProperty(exports, "MessageReader", {
        enumerable: true,
        get: function get() {
          return messageReader_1.MessageReader;
        }
      });
      Object.defineProperty(exports, "AbstractMessageReader", {
        enumerable: true,
        get: function get() {
          return messageReader_1.AbstractMessageReader;
        }
      });
      Object.defineProperty(exports, "ReadableStreamMessageReader", {
        enumerable: true,
        get: function get() {
          return messageReader_1.ReadableStreamMessageReader;
        }
      });
      var messageWriter_1 = require_messageWriter();
      Object.defineProperty(exports, "MessageWriter", {
        enumerable: true,
        get: function get() {
          return messageWriter_1.MessageWriter;
        }
      });
      Object.defineProperty(exports, "AbstractMessageWriter", {
        enumerable: true,
        get: function get() {
          return messageWriter_1.AbstractMessageWriter;
        }
      });
      Object.defineProperty(exports, "WriteableStreamMessageWriter", {
        enumerable: true,
        get: function get() {
          return messageWriter_1.WriteableStreamMessageWriter;
        }
      });
      var connection_1 = require_connection();
      Object.defineProperty(exports, "ConnectionStrategy", {
        enumerable: true,
        get: function get() {
          return connection_1.ConnectionStrategy;
        }
      });
      Object.defineProperty(exports, "ConnectionOptions", {
        enumerable: true,
        get: function get() {
          return connection_1.ConnectionOptions;
        }
      });
      Object.defineProperty(exports, "NullLogger", {
        enumerable: true,
        get: function get() {
          return connection_1.NullLogger;
        }
      });
      Object.defineProperty(exports, "createMessageConnection", {
        enumerable: true,
        get: function get() {
          return connection_1.createMessageConnection;
        }
      });
      Object.defineProperty(exports, "ProgressToken", {
        enumerable: true,
        get: function get() {
          return connection_1.ProgressToken;
        }
      });
      Object.defineProperty(exports, "ProgressType", {
        enumerable: true,
        get: function get() {
          return connection_1.ProgressType;
        }
      });
      Object.defineProperty(exports, "Trace", {
        enumerable: true,
        get: function get() {
          return connection_1.Trace;
        }
      });
      Object.defineProperty(exports, "TraceFormat", {
        enumerable: true,
        get: function get() {
          return connection_1.TraceFormat;
        }
      });
      Object.defineProperty(exports, "SetTraceNotification", {
        enumerable: true,
        get: function get() {
          return connection_1.SetTraceNotification;
        }
      });
      Object.defineProperty(exports, "LogTraceNotification", {
        enumerable: true,
        get: function get() {
          return connection_1.LogTraceNotification;
        }
      });
      Object.defineProperty(exports, "ConnectionErrors", {
        enumerable: true,
        get: function get() {
          return connection_1.ConnectionErrors;
        }
      });
      Object.defineProperty(exports, "ConnectionError", {
        enumerable: true,
        get: function get() {
          return connection_1.ConnectionError;
        }
      });
      Object.defineProperty(exports, "CancellationReceiverStrategy", {
        enumerable: true,
        get: function get() {
          return connection_1.CancellationReceiverStrategy;
        }
      });
      Object.defineProperty(exports, "CancellationSenderStrategy", {
        enumerable: true,
        get: function get() {
          return connection_1.CancellationSenderStrategy;
        }
      });
      Object.defineProperty(exports, "CancellationStrategy", {
        enumerable: true,
        get: function get() {
          return connection_1.CancellationStrategy;
        }
      });
      var ral_1 = require_ral();
      exports.RAL = ral_1.default;
    }
  }); // server/node_modules/vscode-jsonrpc/lib/browser/main.js


  var require_main = __commonJS({
    "server/node_modules/vscode-jsonrpc/lib/browser/main.js": function serverNode_modulesVscodeJsonrpcLibBrowserMainJs(exports) {
      "use strict";

      var __createBinding = exports && exports.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        });
      } : function (o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });

      var __exportStar = exports && exports.__exportStar || function (m, exports2) {
        for (var p in m) {
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
        }
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createMessageConnection = exports.BrowserMessageWriter = exports.BrowserMessageReader = void 0;
      var ril_1 = require_ril();
      ril_1.default.install();
      var api_1 = require_api();

      __exportStar(require_api(), exports);

      var BrowserMessageReader2 = /*#__PURE__*/function (_api_1$AbstractMessag) {
        _inherits(BrowserMessageReader2, _api_1$AbstractMessag);

        var _super29 = _createSuper(BrowserMessageReader2);

        function BrowserMessageReader2(context) {
          var _this31;

          _classCallCheck(this, BrowserMessageReader2);

          _this31 = _super29.call(this);
          _this31._onData = new api_1.Emitter();

          _this31._messageListener = function (event) {
            _this31._onData.fire(event.data);
          };

          context.addEventListener("error", function (event) {
            return _this31.fireError(event);
          });
          context.onmessage = _this31._messageListener;
          return _this31;
        }

        _createClass(BrowserMessageReader2, [{
          key: "listen",
          value: function listen(callback) {
            return this._onData.event(callback);
          }
        }]);

        return BrowserMessageReader2;
      }(api_1.AbstractMessageReader);

      exports.BrowserMessageReader = BrowserMessageReader2;

      var BrowserMessageWriter2 = /*#__PURE__*/function (_api_1$AbstractMessag2) {
        _inherits(BrowserMessageWriter2, _api_1$AbstractMessag2);

        var _super30 = _createSuper(BrowserMessageWriter2);

        function BrowserMessageWriter2(context) {
          var _this32;

          _classCallCheck(this, BrowserMessageWriter2);

          _this32 = _super30.call(this);
          _this32.context = context;
          _this32.errorCount = 0;
          context.addEventListener("error", function (event) {
            return _this32.fireError(event);
          });
          return _this32;
        }

        _createClass(BrowserMessageWriter2, [{
          key: "write",
          value: function write(msg) {
            try {
              this.context.postMessage(msg);
              return Promise.resolve();
            } catch (error) {
              this.handleError(error, msg);
              return Promise.reject(error);
            }
          }
        }, {
          key: "handleError",
          value: function handleError(error, msg) {
            this.errorCount++;
            this.fireError(error, msg, this.errorCount);
          }
        }, {
          key: "end",
          value: function end() {}
        }]);

        return BrowserMessageWriter2;
      }(api_1.AbstractMessageWriter);

      exports.BrowserMessageWriter = BrowserMessageWriter2;

      function createMessageConnection(reader, writer, logger, options) {
        if (logger === void 0) {
          logger = api_1.NullLogger;
        }

        if (api_1.ConnectionStrategy.is(options)) {
          options = {
            connectionStrategy: options
          };
        }

        return (0, api_1.createMessageConnection)(reader, writer, logger, options);
      }

      exports.createMessageConnection = createMessageConnection;
    }
  }); // server/node_modules/vscode-jsonrpc/browser.js


  var require_browser = __commonJS({
    "server/node_modules/vscode-jsonrpc/browser.js": function serverNode_modulesVscodeJsonrpcBrowserJs(exports, module) {
      "use strict";

      module.exports = require_main();
    }
  }); // server/node_modules/vscode-languageserver-types/lib/umd/main.js


  var require_main2 = __commonJS({
    "server/node_modules/vscode-languageserver-types/lib/umd/main.js": function serverNode_modulesVscodeLanguageserverTypesLibUmdMainJs(exports, module) {
      (function (factory2) {
        if (_typeof(module) === "object" && _typeof(module.exports) === "object") {
          var v = factory2(__require, exports);
          if (v !== void 0) module.exports = v;
        } else if (typeof define === "function" && define.amd) {
          define(["require", "exports"], factory2);
        }
      })(function (require2, exports2) {
        "use strict";

        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.TextDocument = exports2.EOL = exports2.InlineValuesContext = exports2.InlineValueEvaluatableExpression = exports2.InlineValueVariableLookup = exports2.InlineValueText = exports2.SemanticTokens = exports2.SemanticTokenModifiers = exports2.SemanticTokenTypes = exports2.SelectionRange = exports2.DocumentLink = exports2.FormattingOptions = exports2.CodeLens = exports2.CodeAction = exports2.CodeActionContext = exports2.CodeActionTriggerKind = exports2.CodeActionKind = exports2.DocumentSymbol = exports2.WorkspaceSymbol = exports2.SymbolInformation = exports2.SymbolTag = exports2.SymbolKind = exports2.DocumentHighlight = exports2.DocumentHighlightKind = exports2.SignatureInformation = exports2.ParameterInformation = exports2.Hover = exports2.MarkedString = exports2.CompletionList = exports2.CompletionItem = exports2.CompletionItemLabelDetails = exports2.InsertTextMode = exports2.InsertReplaceEdit = exports2.CompletionItemTag = exports2.InsertTextFormat = exports2.CompletionItemKind = exports2.MarkupContent = exports2.MarkupKind = exports2.TextDocumentItem = exports2.OptionalVersionedTextDocumentIdentifier = exports2.VersionedTextDocumentIdentifier = exports2.TextDocumentIdentifier = exports2.WorkspaceChange = exports2.WorkspaceEdit = exports2.DeleteFile = exports2.RenameFile = exports2.CreateFile = exports2.TextDocumentEdit = exports2.AnnotatedTextEdit = exports2.ChangeAnnotationIdentifier = exports2.ChangeAnnotation = exports2.TextEdit = exports2.Command = exports2.Diagnostic = exports2.CodeDescription = exports2.DiagnosticTag = exports2.DiagnosticSeverity = exports2.DiagnosticRelatedInformation = exports2.FoldingRange = exports2.FoldingRangeKind = exports2.ColorPresentation = exports2.ColorInformation = exports2.Color = exports2.LocationLink = exports2.Location = exports2.Range = exports2.Position = exports2.uinteger = exports2.integer = void 0;
        var integer;

        (function (integer2) {
          integer2.MIN_VALUE = -2147483648;
          integer2.MAX_VALUE = 2147483647;
        })(integer = exports2.integer || (exports2.integer = {}));

        var uinteger;

        (function (uinteger2) {
          uinteger2.MIN_VALUE = 0;
          uinteger2.MAX_VALUE = 2147483647;
        })(uinteger = exports2.uinteger || (exports2.uinteger = {}));

        var Position;

        (function (Position2) {
          function create(line, character) {
            if (line === Number.MAX_VALUE) {
              line = uinteger.MAX_VALUE;
            }

            if (character === Number.MAX_VALUE) {
              character = uinteger.MAX_VALUE;
            }

            return {
              line: line,
              character: character
            };
          }

          Position2.create = create;

          function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);
          }

          Position2.is = is;
        })(Position = exports2.Position || (exports2.Position = {}));

        var Range4;

        (function (Range5) {
          function create(one, two, three, four) {
            if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {
              return {
                start: Position.create(one, two),
                end: Position.create(three, four)
              };
            } else if (Position.is(one) && Position.is(two)) {
              return {
                start: one,
                end: two
              };
            } else {
              throw new Error("Range#create called with invalid arguments[".concat(one, ", ").concat(two, ", ").concat(three, ", ").concat(four, "]"));
            }
          }

          Range5.create = create;

          function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);
          }

          Range5.is = is;
        })(Range4 = exports2.Range || (exports2.Range = {}));

        var Location4;

        (function (Location5) {
          function create(uri, range) {
            return {
              uri: uri,
              range: range
            };
          }

          Location5.create = create;

          function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Range4.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
          }

          Location5.is = is;
        })(Location4 = exports2.Location || (exports2.Location = {}));

        var LocationLink;

        (function (LocationLink2) {
          function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
            return {
              targetUri: targetUri,
              targetRange: targetRange,
              targetSelectionRange: targetSelectionRange,
              originSelectionRange: originSelectionRange
            };
          }

          LocationLink2.create = create;

          function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Range4.is(candidate.targetRange) && Is.string(candidate.targetUri) && Range4.is(candidate.targetSelectionRange) && (Range4.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));
          }

          LocationLink2.is = is;
        })(LocationLink = exports2.LocationLink || (exports2.LocationLink = {}));

        var Color;

        (function (Color2) {
          function create(red, green, blue, alpha) {
            return {
              red: red,
              green: green,
              blue: blue,
              alpha: alpha
            };
          }

          Color2.create = create;

          function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1) && Is.numberRange(candidate.green, 0, 1) && Is.numberRange(candidate.blue, 0, 1) && Is.numberRange(candidate.alpha, 0, 1);
          }

          Color2.is = is;
        })(Color = exports2.Color || (exports2.Color = {}));

        var ColorInformation;

        (function (ColorInformation2) {
          function create(range, color) {
            return {
              range: range,
              color: color
            };
          }

          ColorInformation2.create = create;

          function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && Range4.is(candidate.range) && Color.is(candidate.color);
          }

          ColorInformation2.is = is;
        })(ColorInformation = exports2.ColorInformation || (exports2.ColorInformation = {}));

        var ColorPresentation;

        (function (ColorPresentation2) {
          function create(label, textEdit, additionalTextEdits) {
            return {
              label: label,
              textEdit: textEdit,
              additionalTextEdits: additionalTextEdits
            };
          }

          ColorPresentation2.create = create;

          function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate)) && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));
          }

          ColorPresentation2.is = is;
        })(ColorPresentation = exports2.ColorPresentation || (exports2.ColorPresentation = {}));

        var FoldingRangeKind;

        (function (FoldingRangeKind2) {
          FoldingRangeKind2["Comment"] = "comment";
          FoldingRangeKind2["Imports"] = "imports";
          FoldingRangeKind2["Region"] = "region";
        })(FoldingRangeKind = exports2.FoldingRangeKind || (exports2.FoldingRangeKind = {}));

        var FoldingRange2;

        (function (FoldingRange3) {
          function create(startLine, endLine, startCharacter, endCharacter, kind) {
            var result = {
              startLine: startLine,
              endLine: endLine
            };

            if (Is.defined(startCharacter)) {
              result.startCharacter = startCharacter;
            }

            if (Is.defined(endCharacter)) {
              result.endCharacter = endCharacter;
            }

            if (Is.defined(kind)) {
              result.kind = kind;
            }

            return result;
          }

          FoldingRange3.create = create;

          function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine) && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter)) && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter)) && (Is.undefined(candidate.kind) || Is.string(candidate.kind));
          }

          FoldingRange3.is = is;
        })(FoldingRange2 = exports2.FoldingRange || (exports2.FoldingRange = {}));

        var DiagnosticRelatedInformation;

        (function (DiagnosticRelatedInformation2) {
          function create(location, message) {
            return {
              location: location,
              message: message
            };
          }

          DiagnosticRelatedInformation2.create = create;

          function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Location4.is(candidate.location) && Is.string(candidate.message);
          }

          DiagnosticRelatedInformation2.is = is;
        })(DiagnosticRelatedInformation = exports2.DiagnosticRelatedInformation || (exports2.DiagnosticRelatedInformation = {}));

        var DiagnosticSeverity2;

        (function (DiagnosticSeverity3) {
          DiagnosticSeverity3.Error = 1;
          DiagnosticSeverity3.Warning = 2;
          DiagnosticSeverity3.Information = 3;
          DiagnosticSeverity3.Hint = 4;
        })(DiagnosticSeverity2 = exports2.DiagnosticSeverity || (exports2.DiagnosticSeverity = {}));

        var DiagnosticTag;

        (function (DiagnosticTag2) {
          DiagnosticTag2.Unnecessary = 1;
          DiagnosticTag2.Deprecated = 2;
        })(DiagnosticTag = exports2.DiagnosticTag || (exports2.DiagnosticTag = {}));

        var CodeDescription;

        (function (CodeDescription2) {
          function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && Is.string(candidate.href);
          }

          CodeDescription2.is = is;
        })(CodeDescription = exports2.CodeDescription || (exports2.CodeDescription = {}));

        var Diagnostic2;

        (function (Diagnostic3) {
          function create(range, message, severity, code, source, relatedInformation) {
            var result = {
              range: range,
              message: message
            };

            if (Is.defined(severity)) {
              result.severity = severity;
            }

            if (Is.defined(code)) {
              result.code = code;
            }

            if (Is.defined(source)) {
              result.source = source;
            }

            if (Is.defined(relatedInformation)) {
              result.relatedInformation = relatedInformation;
            }

            return result;
          }

          Diagnostic3.create = create;

          function is(value) {
            var _a;

            var candidate = value;
            return Is.defined(candidate) && Range4.is(candidate.range) && Is.string(candidate.message) && (Is.number(candidate.severity) || Is.undefined(candidate.severity)) && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code)) && (Is.undefined(candidate.codeDescription) || Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)) && (Is.string(candidate.source) || Is.undefined(candidate.source)) && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
          }

          Diagnostic3.is = is;
        })(Diagnostic2 = exports2.Diagnostic || (exports2.Diagnostic = {}));

        var Command;

        (function (Command2) {
          function create(title, command) {
            var args = [];

            for (var _i = 2; _i < arguments.length; _i++) {
              args[_i - 2] = arguments[_i];
            }

            var result = {
              title: title,
              command: command
            };

            if (Is.defined(args) && args.length > 0) {
              result.arguments = args;
            }

            return result;
          }

          Command2.create = create;

          function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);
          }

          Command2.is = is;
        })(Command = exports2.Command || (exports2.Command = {}));

        var TextEdit;

        (function (TextEdit2) {
          function replace(range, newText) {
            return {
              range: range,
              newText: newText
            };
          }

          TextEdit2.replace = replace;

          function insert(position, newText) {
            return {
              range: {
                start: position,
                end: position
              },
              newText: newText
            };
          }

          TextEdit2.insert = insert;

          function del(range) {
            return {
              range: range,
              newText: ""
            };
          }

          TextEdit2.del = del;

          function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && Is.string(candidate.newText) && Range4.is(candidate.range);
          }

          TextEdit2.is = is;
        })(TextEdit = exports2.TextEdit || (exports2.TextEdit = {}));

        var ChangeAnnotation;

        (function (ChangeAnnotation2) {
          function create(label, needsConfirmation, description) {
            var result = {
              label: label
            };

            if (needsConfirmation !== void 0) {
              result.needsConfirmation = needsConfirmation;
            }

            if (description !== void 0) {
              result.description = description;
            }

            return result;
          }

          ChangeAnnotation2.create = create;

          function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === void 0) && (Is.string(candidate.description) || candidate.description === void 0);
          }

          ChangeAnnotation2.is = is;
        })(ChangeAnnotation = exports2.ChangeAnnotation || (exports2.ChangeAnnotation = {}));

        var ChangeAnnotationIdentifier;

        (function (ChangeAnnotationIdentifier2) {
          function is(value) {
            var candidate = value;
            return Is.string(candidate);
          }

          ChangeAnnotationIdentifier2.is = is;
        })(ChangeAnnotationIdentifier = exports2.ChangeAnnotationIdentifier || (exports2.ChangeAnnotationIdentifier = {}));

        var AnnotatedTextEdit;

        (function (AnnotatedTextEdit2) {
          function replace(range, newText, annotation) {
            return {
              range: range,
              newText: newText,
              annotationId: annotation
            };
          }

          AnnotatedTextEdit2.replace = replace;

          function insert(position, newText, annotation) {
            return {
              range: {
                start: position,
                end: position
              },
              newText: newText,
              annotationId: annotation
            };
          }

          AnnotatedTextEdit2.insert = insert;

          function del(range, annotation) {
            return {
              range: range,
              newText: "",
              annotationId: annotation
            };
          }

          AnnotatedTextEdit2.del = del;

          function is(value) {
            var candidate = value;
            return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));
          }

          AnnotatedTextEdit2.is = is;
        })(AnnotatedTextEdit = exports2.AnnotatedTextEdit || (exports2.AnnotatedTextEdit = {}));

        var TextDocumentEdit;

        (function (TextDocumentEdit2) {
          function create(textDocument, edits) {
            return {
              textDocument: textDocument,
              edits: edits
            };
          }

          TextDocumentEdit2.create = create;

          function is(value) {
            var candidate = value;
            return Is.defined(candidate) && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument) && Array.isArray(candidate.edits);
          }

          TextDocumentEdit2.is = is;
        })(TextDocumentEdit = exports2.TextDocumentEdit || (exports2.TextDocumentEdit = {}));

        var CreateFile;

        (function (CreateFile2) {
          function create(uri, options, annotation) {
            var result = {
              kind: "create",
              uri: uri
            };

            if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {
              result.options = options;
            }

            if (annotation !== void 0) {
              result.annotationId = annotation;
            }

            return result;
          }

          CreateFile2.create = create;

          function is(value) {
            var candidate = value;
            return candidate && candidate.kind === "create" && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
          }

          CreateFile2.is = is;
        })(CreateFile = exports2.CreateFile || (exports2.CreateFile = {}));

        var RenameFile;

        (function (RenameFile2) {
          function create(oldUri, newUri, options, annotation) {
            var result = {
              kind: "rename",
              oldUri: oldUri,
              newUri: newUri
            };

            if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {
              result.options = options;
            }

            if (annotation !== void 0) {
              result.annotationId = annotation;
            }

            return result;
          }

          RenameFile2.create = create;

          function is(value) {
            var candidate = value;
            return candidate && candidate.kind === "rename" && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
          }

          RenameFile2.is = is;
        })(RenameFile = exports2.RenameFile || (exports2.RenameFile = {}));

        var DeleteFile;

        (function (DeleteFile2) {
          function create(uri, options, annotation) {
            var result = {
              kind: "delete",
              uri: uri
            };

            if (options !== void 0 && (options.recursive !== void 0 || options.ignoreIfNotExists !== void 0)) {
              result.options = options;
            }

            if (annotation !== void 0) {
              result.annotationId = annotation;
            }

            return result;
          }

          DeleteFile2.create = create;

          function is(value) {
            var candidate = value;
            return candidate && candidate.kind === "delete" && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.recursive === void 0 || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === void 0 || Is.boolean(candidate.options.ignoreIfNotExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
          }

          DeleteFile2.is = is;
        })(DeleteFile = exports2.DeleteFile || (exports2.DeleteFile = {}));

        var WorkspaceEdit;

        (function (WorkspaceEdit2) {
          function is(value) {
            var candidate = value;
            return candidate && (candidate.changes !== void 0 || candidate.documentChanges !== void 0) && (candidate.documentChanges === void 0 || candidate.documentChanges.every(function (change) {
              if (Is.string(change.kind)) {
                return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);
              } else {
                return TextDocumentEdit.is(change);
              }
            }));
          }

          WorkspaceEdit2.is = is;
        })(WorkspaceEdit = exports2.WorkspaceEdit || (exports2.WorkspaceEdit = {}));

        var TextEditChangeImpl = function () {
          function TextEditChangeImpl2(edits, changeAnnotations) {
            this.edits = edits;
            this.changeAnnotations = changeAnnotations;
          }

          TextEditChangeImpl2.prototype.insert = function (position, newText, annotation) {
            var edit;
            var id;

            if (annotation === void 0) {
              edit = TextEdit.insert(position, newText);
            } else if (ChangeAnnotationIdentifier.is(annotation)) {
              id = annotation;
              edit = AnnotatedTextEdit.insert(position, newText, annotation);
            } else {
              this.assertChangeAnnotations(this.changeAnnotations);
              id = this.changeAnnotations.manage(annotation);
              edit = AnnotatedTextEdit.insert(position, newText, id);
            }

            this.edits.push(edit);

            if (id !== void 0) {
              return id;
            }
          };

          TextEditChangeImpl2.prototype.replace = function (range, newText, annotation) {
            var edit;
            var id;

            if (annotation === void 0) {
              edit = TextEdit.replace(range, newText);
            } else if (ChangeAnnotationIdentifier.is(annotation)) {
              id = annotation;
              edit = AnnotatedTextEdit.replace(range, newText, annotation);
            } else {
              this.assertChangeAnnotations(this.changeAnnotations);
              id = this.changeAnnotations.manage(annotation);
              edit = AnnotatedTextEdit.replace(range, newText, id);
            }

            this.edits.push(edit);

            if (id !== void 0) {
              return id;
            }
          };

          TextEditChangeImpl2.prototype.delete = function (range, annotation) {
            var edit;
            var id;

            if (annotation === void 0) {
              edit = TextEdit.del(range);
            } else if (ChangeAnnotationIdentifier.is(annotation)) {
              id = annotation;
              edit = AnnotatedTextEdit.del(range, annotation);
            } else {
              this.assertChangeAnnotations(this.changeAnnotations);
              id = this.changeAnnotations.manage(annotation);
              edit = AnnotatedTextEdit.del(range, id);
            }

            this.edits.push(edit);

            if (id !== void 0) {
              return id;
            }
          };

          TextEditChangeImpl2.prototype.add = function (edit) {
            this.edits.push(edit);
          };

          TextEditChangeImpl2.prototype.all = function () {
            return this.edits;
          };

          TextEditChangeImpl2.prototype.clear = function () {
            this.edits.splice(0, this.edits.length);
          };

          TextEditChangeImpl2.prototype.assertChangeAnnotations = function (value) {
            if (value === void 0) {
              throw new Error("Text edit change is not configured to manage change annotations.");
            }
          };

          return TextEditChangeImpl2;
        }();

        var ChangeAnnotations = function () {
          function ChangeAnnotations2(annotations) {
            this._annotations = annotations === void 0 ? Object.create(null) : annotations;
            this._counter = 0;
            this._size = 0;
          }

          ChangeAnnotations2.prototype.all = function () {
            return this._annotations;
          };

          Object.defineProperty(ChangeAnnotations2.prototype, "size", {
            get: function get() {
              return this._size;
            },
            enumerable: false,
            configurable: true
          });

          ChangeAnnotations2.prototype.manage = function (idOrAnnotation, annotation) {
            var id;

            if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {
              id = idOrAnnotation;
            } else {
              id = this.nextId();
              annotation = idOrAnnotation;
            }

            if (this._annotations[id] !== void 0) {
              throw new Error("Id ".concat(id, " is already in use."));
            }

            if (annotation === void 0) {
              throw new Error("No annotation provided for id ".concat(id));
            }

            this._annotations[id] = annotation;
            this._size++;
            return id;
          };

          ChangeAnnotations2.prototype.nextId = function () {
            this._counter++;
            return this._counter.toString();
          };

          return ChangeAnnotations2;
        }();

        var WorkspaceChange = function () {
          function WorkspaceChange2(workspaceEdit) {
            var _this = this;

            this._textEditChanges = Object.create(null);

            if (workspaceEdit !== void 0) {
              this._workspaceEdit = workspaceEdit;

              if (workspaceEdit.documentChanges) {
                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);
                workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                workspaceEdit.documentChanges.forEach(function (change) {
                  if (TextDocumentEdit.is(change)) {
                    var textEditChange = new TextEditChangeImpl(change.edits, _this._changeAnnotations);
                    _this._textEditChanges[change.textDocument.uri] = textEditChange;
                  }
                });
              } else if (workspaceEdit.changes) {
                Object.keys(workspaceEdit.changes).forEach(function (key) {
                  var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);
                  _this._textEditChanges[key] = textEditChange;
                });
              }
            } else {
              this._workspaceEdit = {};
            }
          }

          Object.defineProperty(WorkspaceChange2.prototype, "edit", {
            get: function get() {
              this.initDocumentChanges();

              if (this._changeAnnotations !== void 0) {
                if (this._changeAnnotations.size === 0) {
                  this._workspaceEdit.changeAnnotations = void 0;
                } else {
                  this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                }
              }

              return this._workspaceEdit;
            },
            enumerable: false,
            configurable: true
          });

          WorkspaceChange2.prototype.getTextEditChange = function (key) {
            if (OptionalVersionedTextDocumentIdentifier.is(key)) {
              this.initDocumentChanges();

              if (this._workspaceEdit.documentChanges === void 0) {
                throw new Error("Workspace edit is not configured for document changes.");
              }

              var textDocument = {
                uri: key.uri,
                version: key.version
              };
              var result = this._textEditChanges[textDocument.uri];

              if (!result) {
                var edits = [];
                var textDocumentEdit = {
                  textDocument: textDocument,
                  edits: edits
                };

                this._workspaceEdit.documentChanges.push(textDocumentEdit);

                result = new TextEditChangeImpl(edits, this._changeAnnotations);
                this._textEditChanges[textDocument.uri] = result;
              }

              return result;
            } else {
              this.initChanges();

              if (this._workspaceEdit.changes === void 0) {
                throw new Error("Workspace edit is not configured for normal text edit changes.");
              }

              var result = this._textEditChanges[key];

              if (!result) {
                var edits = [];
                this._workspaceEdit.changes[key] = edits;
                result = new TextEditChangeImpl(edits);
                this._textEditChanges[key] = result;
              }

              return result;
            }
          };

          WorkspaceChange2.prototype.initDocumentChanges = function () {
            if (this._workspaceEdit.documentChanges === void 0 && this._workspaceEdit.changes === void 0) {
              this._changeAnnotations = new ChangeAnnotations();
              this._workspaceEdit.documentChanges = [];
              this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
            }
          };

          WorkspaceChange2.prototype.initChanges = function () {
            if (this._workspaceEdit.documentChanges === void 0 && this._workspaceEdit.changes === void 0) {
              this._workspaceEdit.changes = Object.create(null);
            }
          };

          WorkspaceChange2.prototype.createFile = function (uri, optionsOrAnnotation, options) {
            this.initDocumentChanges();

            if (this._workspaceEdit.documentChanges === void 0) {
              throw new Error("Workspace edit is not configured for document changes.");
            }

            var annotation;

            if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
              annotation = optionsOrAnnotation;
            } else {
              options = optionsOrAnnotation;
            }

            var operation;
            var id;

            if (annotation === void 0) {
              operation = CreateFile.create(uri, options);
            } else {
              id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
              operation = CreateFile.create(uri, options, id);
            }

            this._workspaceEdit.documentChanges.push(operation);

            if (id !== void 0) {
              return id;
            }
          };

          WorkspaceChange2.prototype.renameFile = function (oldUri, newUri, optionsOrAnnotation, options) {
            this.initDocumentChanges();

            if (this._workspaceEdit.documentChanges === void 0) {
              throw new Error("Workspace edit is not configured for document changes.");
            }

            var annotation;

            if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
              annotation = optionsOrAnnotation;
            } else {
              options = optionsOrAnnotation;
            }

            var operation;
            var id;

            if (annotation === void 0) {
              operation = RenameFile.create(oldUri, newUri, options);
            } else {
              id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
              operation = RenameFile.create(oldUri, newUri, options, id);
            }

            this._workspaceEdit.documentChanges.push(operation);

            if (id !== void 0) {
              return id;
            }
          };

          WorkspaceChange2.prototype.deleteFile = function (uri, optionsOrAnnotation, options) {
            this.initDocumentChanges();

            if (this._workspaceEdit.documentChanges === void 0) {
              throw new Error("Workspace edit is not configured for document changes.");
            }

            var annotation;

            if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
              annotation = optionsOrAnnotation;
            } else {
              options = optionsOrAnnotation;
            }

            var operation;
            var id;

            if (annotation === void 0) {
              operation = DeleteFile.create(uri, options);
            } else {
              id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
              operation = DeleteFile.create(uri, options, id);
            }

            this._workspaceEdit.documentChanges.push(operation);

            if (id !== void 0) {
              return id;
            }
          };

          return WorkspaceChange2;
        }();

        exports2.WorkspaceChange = WorkspaceChange;
        var TextDocumentIdentifier;

        (function (TextDocumentIdentifier2) {
          function create(uri) {
            return {
              uri: uri
            };
          }

          TextDocumentIdentifier2.create = create;

          function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Is.string(candidate.uri);
          }

          TextDocumentIdentifier2.is = is;
        })(TextDocumentIdentifier = exports2.TextDocumentIdentifier || (exports2.TextDocumentIdentifier = {}));

        var VersionedTextDocumentIdentifier;

        (function (VersionedTextDocumentIdentifier2) {
          function create(uri, version) {
            return {
              uri: uri,
              version: version
            };
          }

          VersionedTextDocumentIdentifier2.create = create;

          function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);
          }

          VersionedTextDocumentIdentifier2.is = is;
        })(VersionedTextDocumentIdentifier = exports2.VersionedTextDocumentIdentifier || (exports2.VersionedTextDocumentIdentifier = {}));

        var OptionalVersionedTextDocumentIdentifier;

        (function (OptionalVersionedTextDocumentIdentifier2) {
          function create(uri, version) {
            return {
              uri: uri,
              version: version
            };
          }

          OptionalVersionedTextDocumentIdentifier2.create = create;

          function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));
          }

          OptionalVersionedTextDocumentIdentifier2.is = is;
        })(OptionalVersionedTextDocumentIdentifier = exports2.OptionalVersionedTextDocumentIdentifier || (exports2.OptionalVersionedTextDocumentIdentifier = {}));

        var TextDocumentItem;

        (function (TextDocumentItem2) {
          function create(uri, languageId, version, text) {
            return {
              uri: uri,
              languageId: languageId,
              version: version,
              text: text
            };
          }

          TextDocumentItem2.create = create;

          function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);
          }

          TextDocumentItem2.is = is;
        })(TextDocumentItem = exports2.TextDocumentItem || (exports2.TextDocumentItem = {}));

        var MarkupKind;

        (function (MarkupKind2) {
          MarkupKind2.PlainText = "plaintext";
          MarkupKind2.Markdown = "markdown";
        })(MarkupKind = exports2.MarkupKind || (exports2.MarkupKind = {}));

        (function (MarkupKind2) {
          function is(value) {
            var candidate = value;
            return candidate === MarkupKind2.PlainText || candidate === MarkupKind2.Markdown;
          }

          MarkupKind2.is = is;
        })(MarkupKind = exports2.MarkupKind || (exports2.MarkupKind = {}));

        var MarkupContent;

        (function (MarkupContent2) {
          function is(value) {
            var candidate = value;
            return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);
          }

          MarkupContent2.is = is;
        })(MarkupContent = exports2.MarkupContent || (exports2.MarkupContent = {}));

        var CompletionItemKind2;

        (function (CompletionItemKind3) {
          CompletionItemKind3.Text = 1;
          CompletionItemKind3.Method = 2;
          CompletionItemKind3.Function = 3;
          CompletionItemKind3.Constructor = 4;
          CompletionItemKind3.Field = 5;
          CompletionItemKind3.Variable = 6;
          CompletionItemKind3.Class = 7;
          CompletionItemKind3.Interface = 8;
          CompletionItemKind3.Module = 9;
          CompletionItemKind3.Property = 10;
          CompletionItemKind3.Unit = 11;
          CompletionItemKind3.Value = 12;
          CompletionItemKind3.Enum = 13;
          CompletionItemKind3.Keyword = 14;
          CompletionItemKind3.Snippet = 15;
          CompletionItemKind3.Color = 16;
          CompletionItemKind3.File = 17;
          CompletionItemKind3.Reference = 18;
          CompletionItemKind3.Folder = 19;
          CompletionItemKind3.EnumMember = 20;
          CompletionItemKind3.Constant = 21;
          CompletionItemKind3.Struct = 22;
          CompletionItemKind3.Event = 23;
          CompletionItemKind3.Operator = 24;
          CompletionItemKind3.TypeParameter = 25;
        })(CompletionItemKind2 = exports2.CompletionItemKind || (exports2.CompletionItemKind = {}));

        var InsertTextFormat;

        (function (InsertTextFormat2) {
          InsertTextFormat2.PlainText = 1;
          InsertTextFormat2.Snippet = 2;
        })(InsertTextFormat = exports2.InsertTextFormat || (exports2.InsertTextFormat = {}));

        var CompletionItemTag;

        (function (CompletionItemTag2) {
          CompletionItemTag2.Deprecated = 1;
        })(CompletionItemTag = exports2.CompletionItemTag || (exports2.CompletionItemTag = {}));

        var InsertReplaceEdit;

        (function (InsertReplaceEdit2) {
          function create(newText, insert, replace) {
            return {
              newText: newText,
              insert: insert,
              replace: replace
            };
          }

          InsertReplaceEdit2.create = create;

          function is(value) {
            var candidate = value;
            return candidate && Is.string(candidate.newText) && Range4.is(candidate.insert) && Range4.is(candidate.replace);
          }

          InsertReplaceEdit2.is = is;
        })(InsertReplaceEdit = exports2.InsertReplaceEdit || (exports2.InsertReplaceEdit = {}));

        var InsertTextMode;

        (function (InsertTextMode2) {
          InsertTextMode2.asIs = 1;
          InsertTextMode2.adjustIndentation = 2;
        })(InsertTextMode = exports2.InsertTextMode || (exports2.InsertTextMode = {}));

        var CompletionItemLabelDetails;

        (function (CompletionItemLabelDetails2) {
          function is(value) {
            var candidate = value;
            return candidate && (Is.string(candidate.detail) || candidate.detail === void 0) && (Is.string(candidate.description) || candidate.description === void 0);
          }

          CompletionItemLabelDetails2.is = is;
        })(CompletionItemLabelDetails = exports2.CompletionItemLabelDetails || (exports2.CompletionItemLabelDetails = {}));

        var CompletionItem;

        (function (CompletionItem2) {
          function create(label) {
            return {
              label: label
            };
          }

          CompletionItem2.create = create;
        })(CompletionItem = exports2.CompletionItem || (exports2.CompletionItem = {}));

        var CompletionList;

        (function (CompletionList2) {
          function create(items, isIncomplete) {
            return {
              items: items ? items : [],
              isIncomplete: !!isIncomplete
            };
          }

          CompletionList2.create = create;
        })(CompletionList = exports2.CompletionList || (exports2.CompletionList = {}));

        var MarkedString;

        (function (MarkedString2) {
          function fromPlainText(plainText) {
            return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
          }

          MarkedString2.fromPlainText = fromPlainText;

          function is(value) {
            var candidate = value;
            return Is.string(candidate) || Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value);
          }

          MarkedString2.is = is;
        })(MarkedString = exports2.MarkedString || (exports2.MarkedString = {}));

        var Hover;

        (function (Hover2) {
          function is(value) {
            var candidate = value;
            return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) || MarkedString.is(candidate.contents) || Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === void 0 || Range4.is(value.range));
          }

          Hover2.is = is;
        })(Hover = exports2.Hover || (exports2.Hover = {}));

        var ParameterInformation;

        (function (ParameterInformation2) {
          function create(label, documentation) {
            return documentation ? {
              label: label,
              documentation: documentation
            } : {
              label: label
            };
          }

          ParameterInformation2.create = create;
        })(ParameterInformation = exports2.ParameterInformation || (exports2.ParameterInformation = {}));

        var SignatureInformation;

        (function (SignatureInformation2) {
          function create(label, documentation) {
            var parameters = [];

            for (var _i = 2; _i < arguments.length; _i++) {
              parameters[_i - 2] = arguments[_i];
            }

            var result = {
              label: label
            };

            if (Is.defined(documentation)) {
              result.documentation = documentation;
            }

            if (Is.defined(parameters)) {
              result.parameters = parameters;
            } else {
              result.parameters = [];
            }

            return result;
          }

          SignatureInformation2.create = create;
        })(SignatureInformation = exports2.SignatureInformation || (exports2.SignatureInformation = {}));

        var DocumentHighlightKind2;

        (function (DocumentHighlightKind3) {
          DocumentHighlightKind3.Text = 1;
          DocumentHighlightKind3.Read = 2;
          DocumentHighlightKind3.Write = 3;
        })(DocumentHighlightKind2 = exports2.DocumentHighlightKind || (exports2.DocumentHighlightKind = {}));

        var DocumentHighlight2;

        (function (DocumentHighlight3) {
          function create(range, kind) {
            var result = {
              range: range
            };

            if (Is.number(kind)) {
              result.kind = kind;
            }

            return result;
          }

          DocumentHighlight3.create = create;
        })(DocumentHighlight2 = exports2.DocumentHighlight || (exports2.DocumentHighlight = {}));

        var SymbolKind4;

        (function (SymbolKind5) {
          SymbolKind5.File = 1;
          SymbolKind5.Module = 2;
          SymbolKind5.Namespace = 3;
          SymbolKind5.Package = 4;
          SymbolKind5.Class = 5;
          SymbolKind5.Method = 6;
          SymbolKind5.Property = 7;
          SymbolKind5.Field = 8;
          SymbolKind5.Constructor = 9;
          SymbolKind5.Enum = 10;
          SymbolKind5.Interface = 11;
          SymbolKind5.Function = 12;
          SymbolKind5.Variable = 13;
          SymbolKind5.Constant = 14;
          SymbolKind5.String = 15;
          SymbolKind5.Number = 16;
          SymbolKind5.Boolean = 17;
          SymbolKind5.Array = 18;
          SymbolKind5.Object = 19;
          SymbolKind5.Key = 20;
          SymbolKind5.Null = 21;
          SymbolKind5.EnumMember = 22;
          SymbolKind5.Struct = 23;
          SymbolKind5.Event = 24;
          SymbolKind5.Operator = 25;
          SymbolKind5.TypeParameter = 26;
        })(SymbolKind4 = exports2.SymbolKind || (exports2.SymbolKind = {}));

        var SymbolTag;

        (function (SymbolTag2) {
          SymbolTag2.Deprecated = 1;
        })(SymbolTag = exports2.SymbolTag || (exports2.SymbolTag = {}));

        var SymbolInformation3;

        (function (SymbolInformation4) {
          function create(name, kind, range, uri, containerName) {
            var result = {
              name: name,
              kind: kind,
              location: {
                uri: uri,
                range: range
              }
            };

            if (containerName) {
              result.containerName = containerName;
            }

            return result;
          }

          SymbolInformation4.create = create;
        })(SymbolInformation3 = exports2.SymbolInformation || (exports2.SymbolInformation = {}));

        var WorkspaceSymbol3;

        (function (WorkspaceSymbol4) {
          function create(name, kind, uri, range) {
            return range !== void 0 ? {
              name: name,
              kind: kind,
              location: {
                uri: uri,
                range: range
              }
            } : {
              name: name,
              kind: kind,
              location: {
                uri: uri
              }
            };
          }

          WorkspaceSymbol4.create = create;
        })(WorkspaceSymbol3 = exports2.WorkspaceSymbol || (exports2.WorkspaceSymbol = {}));

        var DocumentSymbol2;

        (function (DocumentSymbol3) {
          function create(name, detail, kind, range, selectionRange, children) {
            var result = {
              name: name,
              detail: detail,
              kind: kind,
              range: range,
              selectionRange: selectionRange
            };

            if (children !== void 0) {
              result.children = children;
            }

            return result;
          }

          DocumentSymbol3.create = create;

          function is(value) {
            var candidate = value;
            return candidate && Is.string(candidate.name) && Is.number(candidate.kind) && Range4.is(candidate.range) && Range4.is(candidate.selectionRange) && (candidate.detail === void 0 || Is.string(candidate.detail)) && (candidate.deprecated === void 0 || Is.boolean(candidate.deprecated)) && (candidate.children === void 0 || Array.isArray(candidate.children)) && (candidate.tags === void 0 || Array.isArray(candidate.tags));
          }

          DocumentSymbol3.is = is;
        })(DocumentSymbol2 = exports2.DocumentSymbol || (exports2.DocumentSymbol = {}));

        var CodeActionKind;

        (function (CodeActionKind2) {
          CodeActionKind2.Empty = "";
          CodeActionKind2.QuickFix = "quickfix";
          CodeActionKind2.Refactor = "refactor";
          CodeActionKind2.RefactorExtract = "refactor.extract";
          CodeActionKind2.RefactorInline = "refactor.inline";
          CodeActionKind2.RefactorRewrite = "refactor.rewrite";
          CodeActionKind2.Source = "source";
          CodeActionKind2.SourceOrganizeImports = "source.organizeImports";
          CodeActionKind2.SourceFixAll = "source.fixAll";
        })(CodeActionKind = exports2.CodeActionKind || (exports2.CodeActionKind = {}));

        var CodeActionTriggerKind;

        (function (CodeActionTriggerKind2) {
          CodeActionTriggerKind2.Invoked = 1;
          CodeActionTriggerKind2.Automatic = 2;
        })(CodeActionTriggerKind = exports2.CodeActionTriggerKind || (exports2.CodeActionTriggerKind = {}));

        var CodeActionContext;

        (function (CodeActionContext2) {
          function create(diagnostics, only, triggerKind) {
            var result = {
              diagnostics: diagnostics
            };

            if (only !== void 0 && only !== null) {
              result.only = only;
            }

            if (triggerKind !== void 0 && triggerKind !== null) {
              result.triggerKind = triggerKind;
            }

            return result;
          }

          CodeActionContext2.create = create;

          function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic2.is) && (candidate.only === void 0 || Is.typedArray(candidate.only, Is.string)) && (candidate.triggerKind === void 0 || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);
          }

          CodeActionContext2.is = is;
        })(CodeActionContext = exports2.CodeActionContext || (exports2.CodeActionContext = {}));

        var CodeAction;

        (function (CodeAction2) {
          function create(title, kindOrCommandOrEdit, kind) {
            var result = {
              title: title
            };
            var checkKind = true;

            if (typeof kindOrCommandOrEdit === "string") {
              checkKind = false;
              result.kind = kindOrCommandOrEdit;
            } else if (Command.is(kindOrCommandOrEdit)) {
              result.command = kindOrCommandOrEdit;
            } else {
              result.edit = kindOrCommandOrEdit;
            }

            if (checkKind && kind !== void 0) {
              result.kind = kind;
            }

            return result;
          }

          CodeAction2.create = create;

          function is(value) {
            var candidate = value;
            return candidate && Is.string(candidate.title) && (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, Diagnostic2.is)) && (candidate.kind === void 0 || Is.string(candidate.kind)) && (candidate.edit !== void 0 || candidate.command !== void 0) && (candidate.command === void 0 || Command.is(candidate.command)) && (candidate.isPreferred === void 0 || Is.boolean(candidate.isPreferred)) && (candidate.edit === void 0 || WorkspaceEdit.is(candidate.edit));
          }

          CodeAction2.is = is;
        })(CodeAction = exports2.CodeAction || (exports2.CodeAction = {}));

        var CodeLens;

        (function (CodeLens2) {
          function create(range, data) {
            var result = {
              range: range
            };

            if (Is.defined(data)) {
              result.data = data;
            }

            return result;
          }

          CodeLens2.create = create;

          function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Range4.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));
          }

          CodeLens2.is = is;
        })(CodeLens = exports2.CodeLens || (exports2.CodeLens = {}));

        var FormattingOptions;

        (function (FormattingOptions2) {
          function create(tabSize, insertSpaces) {
            return {
              tabSize: tabSize,
              insertSpaces: insertSpaces
            };
          }

          FormattingOptions2.create = create;

          function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
          }

          FormattingOptions2.is = is;
        })(FormattingOptions = exports2.FormattingOptions || (exports2.FormattingOptions = {}));

        var DocumentLink;

        (function (DocumentLink2) {
          function create(range, target, data) {
            return {
              range: range,
              target: target,
              data: data
            };
          }

          DocumentLink2.create = create;

          function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Range4.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
          }

          DocumentLink2.is = is;
        })(DocumentLink = exports2.DocumentLink || (exports2.DocumentLink = {}));

        var SelectionRange2;

        (function (SelectionRange3) {
          function create(range, parent) {
            return {
              range: range,
              parent: parent
            };
          }

          SelectionRange3.create = create;

          function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && Range4.is(candidate.range) && (candidate.parent === void 0 || SelectionRange3.is(candidate.parent));
          }

          SelectionRange3.is = is;
        })(SelectionRange2 = exports2.SelectionRange || (exports2.SelectionRange = {}));

        var SemanticTokenTypes;

        (function (SemanticTokenTypes2) {
          SemanticTokenTypes2["namespace"] = "namespace";
          SemanticTokenTypes2["type"] = "type";
          SemanticTokenTypes2["class"] = "class";
          SemanticTokenTypes2["enum"] = "enum";
          SemanticTokenTypes2["interface"] = "interface";
          SemanticTokenTypes2["struct"] = "struct";
          SemanticTokenTypes2["typeParameter"] = "typeParameter";
          SemanticTokenTypes2["parameter"] = "parameter";
          SemanticTokenTypes2["variable"] = "variable";
          SemanticTokenTypes2["property"] = "property";
          SemanticTokenTypes2["enumMember"] = "enumMember";
          SemanticTokenTypes2["event"] = "event";
          SemanticTokenTypes2["function"] = "function";
          SemanticTokenTypes2["method"] = "method";
          SemanticTokenTypes2["macro"] = "macro";
          SemanticTokenTypes2["keyword"] = "keyword";
          SemanticTokenTypes2["modifier"] = "modifier";
          SemanticTokenTypes2["comment"] = "comment";
          SemanticTokenTypes2["string"] = "string";
          SemanticTokenTypes2["number"] = "number";
          SemanticTokenTypes2["regexp"] = "regexp";
          SemanticTokenTypes2["operator"] = "operator";
          SemanticTokenTypes2["decorator"] = "decorator";
        })(SemanticTokenTypes = exports2.SemanticTokenTypes || (exports2.SemanticTokenTypes = {}));

        var SemanticTokenModifiers;

        (function (SemanticTokenModifiers2) {
          SemanticTokenModifiers2["declaration"] = "declaration";
          SemanticTokenModifiers2["definition"] = "definition";
          SemanticTokenModifiers2["readonly"] = "readonly";
          SemanticTokenModifiers2["static"] = "static";
          SemanticTokenModifiers2["deprecated"] = "deprecated";
          SemanticTokenModifiers2["abstract"] = "abstract";
          SemanticTokenModifiers2["async"] = "async";
          SemanticTokenModifiers2["modification"] = "modification";
          SemanticTokenModifiers2["documentation"] = "documentation";
          SemanticTokenModifiers2["defaultLibrary"] = "defaultLibrary";
        })(SemanticTokenModifiers = exports2.SemanticTokenModifiers || (exports2.SemanticTokenModifiers = {}));

        var SemanticTokens;

        (function (SemanticTokens2) {
          function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && (candidate.resultId === void 0 || typeof candidate.resultId === "string") && Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === "number");
          }

          SemanticTokens2.is = is;
        })(SemanticTokens = exports2.SemanticTokens || (exports2.SemanticTokens = {}));

        var InlineValueText;

        (function (InlineValueText2) {
          function create(range, text) {
            return {
              range: range,
              text: text
            };
          }

          InlineValueText2.create = create;

          function is(value) {
            var candidate = value;
            return candidate !== void 0 && candidate !== null && Range4.is(candidate.range) && Is.string(candidate.text);
          }

          InlineValueText2.is = is;
        })(InlineValueText = exports2.InlineValueText || (exports2.InlineValueText = {}));

        var InlineValueVariableLookup;

        (function (InlineValueVariableLookup2) {
          function create(range, variableName, caseSensitiveLookup) {
            return {
              range: range,
              variableName: variableName,
              caseSensitiveLookup: caseSensitiveLookup
            };
          }

          InlineValueVariableLookup2.create = create;

          function is(value) {
            var candidate = value;
            return candidate !== void 0 && candidate !== null && Range4.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup) && (Is.string(candidate.variableName) || candidate.variableName === void 0);
          }

          InlineValueVariableLookup2.is = is;
        })(InlineValueVariableLookup = exports2.InlineValueVariableLookup || (exports2.InlineValueVariableLookup = {}));

        var InlineValueEvaluatableExpression;

        (function (InlineValueEvaluatableExpression2) {
          function create(range, expression) {
            return {
              range: range,
              expression: expression
            };
          }

          InlineValueEvaluatableExpression2.create = create;

          function is(value) {
            var candidate = value;
            return candidate !== void 0 && candidate !== null && Range4.is(candidate.range) && (Is.string(candidate.expression) || candidate.expression === void 0);
          }

          InlineValueEvaluatableExpression2.is = is;
        })(InlineValueEvaluatableExpression = exports2.InlineValueEvaluatableExpression || (exports2.InlineValueEvaluatableExpression = {}));

        var InlineValuesContext;

        (function (InlineValuesContext2) {
          function create(stoppedLocation) {
            return {
              stoppedLocation: stoppedLocation
            };
          }

          InlineValuesContext2.create = create;

          function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Range4.is(value.stoppedLocation);
          }

          InlineValuesContext2.is = is;
        })(InlineValuesContext = exports2.InlineValuesContext || (exports2.InlineValuesContext = {}));

        exports2.EOL = ["\n", "\r\n", "\r"];
        var TextDocument2;

        (function (TextDocument3) {
          function create(uri, languageId, version, content) {
            return new FullTextDocument2(uri, languageId, version, content);
          }

          TextDocument3.create = create;

          function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount) && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;
          }

          TextDocument3.is = is;

          function applyEdits(document, edits) {
            var text = document.getText();
            var sortedEdits = mergeSort2(edits, function (a, b) {
              var diff = a.range.start.line - b.range.start.line;

              if (diff === 0) {
                return a.range.start.character - b.range.start.character;
              }

              return diff;
            });
            var lastModifiedOffset = text.length;

            for (var i = sortedEdits.length - 1; i >= 0; i--) {
              var e = sortedEdits[i];
              var startOffset = document.offsetAt(e.range.start);
              var endOffset = document.offsetAt(e.range.end);

              if (endOffset <= lastModifiedOffset) {
                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
              } else {
                throw new Error("Overlapping edit");
              }

              lastModifiedOffset = startOffset;
            }

            return text;
          }

          TextDocument3.applyEdits = applyEdits;

          function mergeSort2(data, compare) {
            if (data.length <= 1) {
              return data;
            }

            var p = data.length / 2 | 0;
            var left = data.slice(0, p);
            var right = data.slice(p);
            mergeSort2(left, compare);
            mergeSort2(right, compare);
            var leftIdx = 0;
            var rightIdx = 0;
            var i = 0;

            while (leftIdx < left.length && rightIdx < right.length) {
              var ret = compare(left[leftIdx], right[rightIdx]);

              if (ret <= 0) {
                data[i++] = left[leftIdx++];
              } else {
                data[i++] = right[rightIdx++];
              }
            }

            while (leftIdx < left.length) {
              data[i++] = left[leftIdx++];
            }

            while (rightIdx < right.length) {
              data[i++] = right[rightIdx++];
            }

            return data;
          }
        })(TextDocument2 = exports2.TextDocument || (exports2.TextDocument = {}));

        var FullTextDocument2 = function () {
          function FullTextDocument3(uri, languageId, version, content) {
            this._uri = uri;
            this._languageId = languageId;
            this._version = version;
            this._content = content;
            this._lineOffsets = void 0;
          }

          Object.defineProperty(FullTextDocument3.prototype, "uri", {
            get: function get() {
              return this._uri;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(FullTextDocument3.prototype, "languageId", {
            get: function get() {
              return this._languageId;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(FullTextDocument3.prototype, "version", {
            get: function get() {
              return this._version;
            },
            enumerable: false,
            configurable: true
          });

          FullTextDocument3.prototype.getText = function (range) {
            if (range) {
              var start = this.offsetAt(range.start);
              var end = this.offsetAt(range.end);
              return this._content.substring(start, end);
            }

            return this._content;
          };

          FullTextDocument3.prototype.update = function (event, version) {
            this._content = event.text;
            this._version = version;
            this._lineOffsets = void 0;
          };

          FullTextDocument3.prototype.getLineOffsets = function () {
            if (this._lineOffsets === void 0) {
              var lineOffsets = [];
              var text = this._content;
              var isLineStart = true;

              for (var i = 0; i < text.length; i++) {
                if (isLineStart) {
                  lineOffsets.push(i);
                  isLineStart = false;
                }

                var ch = text.charAt(i);
                isLineStart = ch === "\r" || ch === "\n";

                if (ch === "\r" && i + 1 < text.length && text.charAt(i + 1) === "\n") {
                  i++;
                }
              }

              if (isLineStart && text.length > 0) {
                lineOffsets.push(text.length);
              }

              this._lineOffsets = lineOffsets;
            }

            return this._lineOffsets;
          };

          FullTextDocument3.prototype.positionAt = function (offset) {
            offset = Math.max(Math.min(offset, this._content.length), 0);
            var lineOffsets = this.getLineOffsets();
            var low = 0,
                high = lineOffsets.length;

            if (high === 0) {
              return Position.create(0, offset);
            }

            while (low < high) {
              var mid = Math.floor((low + high) / 2);

              if (lineOffsets[mid] > offset) {
                high = mid;
              } else {
                low = mid + 1;
              }
            }

            var line = low - 1;
            return Position.create(line, offset - lineOffsets[line]);
          };

          FullTextDocument3.prototype.offsetAt = function (position) {
            var lineOffsets = this.getLineOffsets();

            if (position.line >= lineOffsets.length) {
              return this._content.length;
            } else if (position.line < 0) {
              return 0;
            }

            var lineOffset = lineOffsets[position.line];
            var nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
            return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
          };

          Object.defineProperty(FullTextDocument3.prototype, "lineCount", {
            get: function get() {
              return this.getLineOffsets().length;
            },
            enumerable: false,
            configurable: true
          });
          return FullTextDocument3;
        }();

        var Is;

        (function (Is2) {
          var toString = Object.prototype.toString;

          function defined(value) {
            return typeof value !== "undefined";
          }

          Is2.defined = defined;

          function undefined2(value) {
            return typeof value === "undefined";
          }

          Is2.undefined = undefined2;

          function boolean(value) {
            return value === true || value === false;
          }

          Is2.boolean = boolean;

          function string(value) {
            return toString.call(value) === "[object String]";
          }

          Is2.string = string;

          function number(value) {
            return toString.call(value) === "[object Number]";
          }

          Is2.number = number;

          function numberRange(value, min, max) {
            return toString.call(value) === "[object Number]" && min <= value && value <= max;
          }

          Is2.numberRange = numberRange;

          function integer2(value) {
            return toString.call(value) === "[object Number]" && -2147483648 <= value && value <= 2147483647;
          }

          Is2.integer = integer2;

          function uinteger2(value) {
            return toString.call(value) === "[object Number]" && 0 <= value && value <= 2147483647;
          }

          Is2.uinteger = uinteger2;

          function func(value) {
            return toString.call(value) === "[object Function]";
          }

          Is2.func = func;

          function objectLiteral(value) {
            return value !== null && _typeof(value) === "object";
          }

          Is2.objectLiteral = objectLiteral;

          function typedArray(value, check) {
            return Array.isArray(value) && value.every(check);
          }

          Is2.typedArray = typedArray;
        })(Is || (Is = {}));
      });
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/messages.js


  var require_messages2 = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/messages.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonMessagesJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ProtocolNotificationType = exports.ProtocolNotificationType0 = exports.ProtocolRequestType = exports.ProtocolRequestType0 = exports.RegistrationType = void 0;
      var vscode_jsonrpc_1 = require_main();

      var RegistrationType = /*#__PURE__*/_createClass(function RegistrationType(method) {
        _classCallCheck(this, RegistrationType);

        this.method = method;
      });

      exports.RegistrationType = RegistrationType;

      var ProtocolRequestType0 = /*#__PURE__*/function (_vscode_jsonrpc_1$Req) {
        _inherits(ProtocolRequestType0, _vscode_jsonrpc_1$Req);

        var _super31 = _createSuper(ProtocolRequestType0);

        function ProtocolRequestType0(method) {
          _classCallCheck(this, ProtocolRequestType0);

          return _super31.call(this, method);
        }

        return _createClass(ProtocolRequestType0);
      }(vscode_jsonrpc_1.RequestType0);

      exports.ProtocolRequestType0 = ProtocolRequestType0;

      var ProtocolRequestType = /*#__PURE__*/function (_vscode_jsonrpc_1$Req2) {
        _inherits(ProtocolRequestType, _vscode_jsonrpc_1$Req2);

        var _super32 = _createSuper(ProtocolRequestType);

        function ProtocolRequestType(method) {
          _classCallCheck(this, ProtocolRequestType);

          return _super32.call(this, method, vscode_jsonrpc_1.ParameterStructures.byName);
        }

        return _createClass(ProtocolRequestType);
      }(vscode_jsonrpc_1.RequestType);

      exports.ProtocolRequestType = ProtocolRequestType;

      var ProtocolNotificationType0 = /*#__PURE__*/function (_vscode_jsonrpc_1$Not) {
        _inherits(ProtocolNotificationType0, _vscode_jsonrpc_1$Not);

        var _super33 = _createSuper(ProtocolNotificationType0);

        function ProtocolNotificationType0(method) {
          _classCallCheck(this, ProtocolNotificationType0);

          return _super33.call(this, method);
        }

        return _createClass(ProtocolNotificationType0);
      }(vscode_jsonrpc_1.NotificationType0);

      exports.ProtocolNotificationType0 = ProtocolNotificationType0;

      var ProtocolNotificationType = /*#__PURE__*/function (_vscode_jsonrpc_1$Not2) {
        _inherits(ProtocolNotificationType, _vscode_jsonrpc_1$Not2);

        var _super34 = _createSuper(ProtocolNotificationType);

        function ProtocolNotificationType(method) {
          _classCallCheck(this, ProtocolNotificationType);

          return _super34.call(this, method, vscode_jsonrpc_1.ParameterStructures.byName);
        }

        return _createClass(ProtocolNotificationType);
      }(vscode_jsonrpc_1.NotificationType);

      exports.ProtocolNotificationType = ProtocolNotificationType;
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/utils/is.js


  var require_is2 = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/utils/is.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonUtilsIsJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.objectLiteral = exports.typedArray = exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;

      function boolean(value) {
        return value === true || value === false;
      }

      exports.boolean = boolean;

      function string(value) {
        return typeof value === "string" || value instanceof String;
      }

      exports.string = string;

      function number(value) {
        return typeof value === "number" || value instanceof Number;
      }

      exports.number = number;

      function error(value) {
        return value instanceof Error;
      }

      exports.error = error;

      function func(value) {
        return typeof value === "function";
      }

      exports.func = func;

      function array(value) {
        return Array.isArray(value);
      }

      exports.array = array;

      function stringArray(value) {
        return array(value) && value.every(function (elem) {
          return string(elem);
        });
      }

      exports.stringArray = stringArray;

      function typedArray(value, check) {
        return Array.isArray(value) && value.every(check);
      }

      exports.typedArray = typedArray;

      function objectLiteral(value) {
        return value !== null && _typeof(value) === "object";
      }

      exports.objectLiteral = objectLiteral;
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/protocol.implementation.js


  var require_protocol_implementation = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/protocol.implementation.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonProtocolImplementationJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ImplementationRequest = void 0;
      var messages_1 = require_messages2();
      var ImplementationRequest;

      (function (ImplementationRequest2) {
        ImplementationRequest2.method = "textDocument/implementation";
        ImplementationRequest2.type = new messages_1.ProtocolRequestType(ImplementationRequest2.method);
      })(ImplementationRequest = exports.ImplementationRequest || (exports.ImplementationRequest = {}));
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/protocol.typeDefinition.js


  var require_protocol_typeDefinition = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/protocol.typeDefinition.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonProtocolTypeDefinitionJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.TypeDefinitionRequest = void 0;
      var messages_1 = require_messages2();
      var TypeDefinitionRequest;

      (function (TypeDefinitionRequest2) {
        TypeDefinitionRequest2.method = "textDocument/typeDefinition";
        TypeDefinitionRequest2.type = new messages_1.ProtocolRequestType(TypeDefinitionRequest2.method);
      })(TypeDefinitionRequest = exports.TypeDefinitionRequest || (exports.TypeDefinitionRequest = {}));
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/protocol.workspaceFolders.js


  var require_protocol_workspaceFolders = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/protocol.workspaceFolders.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonProtocolWorkspaceFoldersJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = void 0;
      var messages_1 = require_messages2();
      var WorkspaceFoldersRequest;

      (function (WorkspaceFoldersRequest2) {
        WorkspaceFoldersRequest2.type = new messages_1.ProtocolRequestType0("workspace/workspaceFolders");
      })(WorkspaceFoldersRequest = exports.WorkspaceFoldersRequest || (exports.WorkspaceFoldersRequest = {}));

      var DidChangeWorkspaceFoldersNotification;

      (function (DidChangeWorkspaceFoldersNotification2) {
        DidChangeWorkspaceFoldersNotification2.type = new messages_1.ProtocolNotificationType("workspace/didChangeWorkspaceFolders");
      })(DidChangeWorkspaceFoldersNotification = exports.DidChangeWorkspaceFoldersNotification || (exports.DidChangeWorkspaceFoldersNotification = {}));
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js


  var require_protocol_configuration = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonProtocolConfigurationJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ConfigurationRequest = void 0;
      var messages_1 = require_messages2();
      var ConfigurationRequest;

      (function (ConfigurationRequest2) {
        ConfigurationRequest2.type = new messages_1.ProtocolRequestType("workspace/configuration");
      })(ConfigurationRequest = exports.ConfigurationRequest || (exports.ConfigurationRequest = {}));
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/protocol.colorProvider.js


  var require_protocol_colorProvider = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/protocol.colorProvider.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonProtocolColorProviderJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ColorPresentationRequest = exports.DocumentColorRequest = void 0;
      var messages_1 = require_messages2();
      var DocumentColorRequest;

      (function (DocumentColorRequest2) {
        DocumentColorRequest2.method = "textDocument/documentColor";
        DocumentColorRequest2.type = new messages_1.ProtocolRequestType(DocumentColorRequest2.method);
      })(DocumentColorRequest = exports.DocumentColorRequest || (exports.DocumentColorRequest = {}));

      var ColorPresentationRequest;

      (function (ColorPresentationRequest2) {
        ColorPresentationRequest2.type = new messages_1.ProtocolRequestType("textDocument/colorPresentation");
      })(ColorPresentationRequest = exports.ColorPresentationRequest || (exports.ColorPresentationRequest = {}));
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/protocol.foldingRange.js


  var require_protocol_foldingRange = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/protocol.foldingRange.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonProtocolFoldingRangeJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.FoldingRangeRequest = exports.FoldingRangeKind = void 0;
      var messages_1 = require_messages2();
      var FoldingRangeKind;

      (function (FoldingRangeKind2) {
        FoldingRangeKind2["Comment"] = "comment";
        FoldingRangeKind2["Imports"] = "imports";
        FoldingRangeKind2["Region"] = "region";
      })(FoldingRangeKind = exports.FoldingRangeKind || (exports.FoldingRangeKind = {}));

      var FoldingRangeRequest2;

      (function (FoldingRangeRequest3) {
        FoldingRangeRequest3.method = "textDocument/foldingRange";
        FoldingRangeRequest3.type = new messages_1.ProtocolRequestType(FoldingRangeRequest3.method);
      })(FoldingRangeRequest2 = exports.FoldingRangeRequest || (exports.FoldingRangeRequest = {}));
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/protocol.declaration.js


  var require_protocol_declaration = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/protocol.declaration.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonProtocolDeclarationJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.DeclarationRequest = void 0;
      var messages_1 = require_messages2();
      var DeclarationRequest;

      (function (DeclarationRequest2) {
        DeclarationRequest2.method = "textDocument/declaration";
        DeclarationRequest2.type = new messages_1.ProtocolRequestType(DeclarationRequest2.method);
      })(DeclarationRequest = exports.DeclarationRequest || (exports.DeclarationRequest = {}));
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/protocol.selectionRange.js


  var require_protocol_selectionRange = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/protocol.selectionRange.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonProtocolSelectionRangeJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SelectionRangeRequest = void 0;
      var messages_1 = require_messages2();
      var SelectionRangeRequest2;

      (function (SelectionRangeRequest3) {
        SelectionRangeRequest3.method = "textDocument/selectionRange";
        SelectionRangeRequest3.type = new messages_1.ProtocolRequestType(SelectionRangeRequest3.method);
      })(SelectionRangeRequest2 = exports.SelectionRangeRequest || (exports.SelectionRangeRequest = {}));
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js


  var require_protocol_progress = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonProtocolProgressJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = void 0;
      var vscode_jsonrpc_1 = require_main();
      var messages_1 = require_messages2();
      var WorkDoneProgress;

      (function (WorkDoneProgress2) {
        WorkDoneProgress2.type = new vscode_jsonrpc_1.ProgressType();

        function is(value) {
          return value === WorkDoneProgress2.type;
        }

        WorkDoneProgress2.is = is;
      })(WorkDoneProgress = exports.WorkDoneProgress || (exports.WorkDoneProgress = {}));

      var WorkDoneProgressCreateRequest;

      (function (WorkDoneProgressCreateRequest2) {
        WorkDoneProgressCreateRequest2.type = new messages_1.ProtocolRequestType("window/workDoneProgress/create");
      })(WorkDoneProgressCreateRequest = exports.WorkDoneProgressCreateRequest || (exports.WorkDoneProgressCreateRequest = {}));

      var WorkDoneProgressCancelNotification;

      (function (WorkDoneProgressCancelNotification2) {
        WorkDoneProgressCancelNotification2.type = new messages_1.ProtocolNotificationType("window/workDoneProgress/cancel");
      })(WorkDoneProgressCancelNotification = exports.WorkDoneProgressCancelNotification || (exports.WorkDoneProgressCancelNotification = {}));
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/protocol.callHierarchy.js


  var require_protocol_callHierarchy = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/protocol.callHierarchy.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonProtocolCallHierarchyJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.CallHierarchyPrepareRequest = void 0;
      var messages_1 = require_messages2();
      var CallHierarchyPrepareRequest;

      (function (CallHierarchyPrepareRequest2) {
        CallHierarchyPrepareRequest2.method = "textDocument/prepareCallHierarchy";
        CallHierarchyPrepareRequest2.type = new messages_1.ProtocolRequestType(CallHierarchyPrepareRequest2.method);
      })(CallHierarchyPrepareRequest = exports.CallHierarchyPrepareRequest || (exports.CallHierarchyPrepareRequest = {}));

      var CallHierarchyIncomingCallsRequest;

      (function (CallHierarchyIncomingCallsRequest2) {
        CallHierarchyIncomingCallsRequest2.method = "callHierarchy/incomingCalls";
        CallHierarchyIncomingCallsRequest2.type = new messages_1.ProtocolRequestType(CallHierarchyIncomingCallsRequest2.method);
      })(CallHierarchyIncomingCallsRequest = exports.CallHierarchyIncomingCallsRequest || (exports.CallHierarchyIncomingCallsRequest = {}));

      var CallHierarchyOutgoingCallsRequest;

      (function (CallHierarchyOutgoingCallsRequest2) {
        CallHierarchyOutgoingCallsRequest2.method = "callHierarchy/outgoingCalls";
        CallHierarchyOutgoingCallsRequest2.type = new messages_1.ProtocolRequestType(CallHierarchyOutgoingCallsRequest2.method);
      })(CallHierarchyOutgoingCallsRequest = exports.CallHierarchyOutgoingCallsRequest || (exports.CallHierarchyOutgoingCallsRequest = {}));
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/protocol.semanticTokens.js


  var require_protocol_semanticTokens = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/protocol.semanticTokens.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonProtocolSemanticTokensJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.SemanticTokensRegistrationType = exports.TokenFormat = void 0;
      var messages_1 = require_messages2();
      var TokenFormat;

      (function (TokenFormat2) {
        TokenFormat2.Relative = "relative";
      })(TokenFormat = exports.TokenFormat || (exports.TokenFormat = {}));

      var SemanticTokensRegistrationType;

      (function (SemanticTokensRegistrationType2) {
        SemanticTokensRegistrationType2.method = "textDocument/semanticTokens";
        SemanticTokensRegistrationType2.type = new messages_1.RegistrationType(SemanticTokensRegistrationType2.method);
      })(SemanticTokensRegistrationType = exports.SemanticTokensRegistrationType || (exports.SemanticTokensRegistrationType = {}));

      var SemanticTokensRequest;

      (function (SemanticTokensRequest2) {
        SemanticTokensRequest2.method = "textDocument/semanticTokens/full";
        SemanticTokensRequest2.type = new messages_1.ProtocolRequestType(SemanticTokensRequest2.method);
      })(SemanticTokensRequest = exports.SemanticTokensRequest || (exports.SemanticTokensRequest = {}));

      var SemanticTokensDeltaRequest;

      (function (SemanticTokensDeltaRequest2) {
        SemanticTokensDeltaRequest2.method = "textDocument/semanticTokens/full/delta";
        SemanticTokensDeltaRequest2.type = new messages_1.ProtocolRequestType(SemanticTokensDeltaRequest2.method);
      })(SemanticTokensDeltaRequest = exports.SemanticTokensDeltaRequest || (exports.SemanticTokensDeltaRequest = {}));

      var SemanticTokensRangeRequest;

      (function (SemanticTokensRangeRequest2) {
        SemanticTokensRangeRequest2.method = "textDocument/semanticTokens/range";
        SemanticTokensRangeRequest2.type = new messages_1.ProtocolRequestType(SemanticTokensRangeRequest2.method);
      })(SemanticTokensRangeRequest = exports.SemanticTokensRangeRequest || (exports.SemanticTokensRangeRequest = {}));

      var SemanticTokensRefreshRequest;

      (function (SemanticTokensRefreshRequest2) {
        SemanticTokensRefreshRequest2.method = "workspace/semanticTokens/refresh";
        SemanticTokensRefreshRequest2.type = new messages_1.ProtocolRequestType0(SemanticTokensRefreshRequest2.method);
      })(SemanticTokensRefreshRequest = exports.SemanticTokensRefreshRequest || (exports.SemanticTokensRefreshRequest = {}));
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/protocol.showDocument.js


  var require_protocol_showDocument = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/protocol.showDocument.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonProtocolShowDocumentJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ShowDocumentRequest = void 0;
      var messages_1 = require_messages2();
      var ShowDocumentRequest;

      (function (ShowDocumentRequest2) {
        ShowDocumentRequest2.method = "window/showDocument";
        ShowDocumentRequest2.type = new messages_1.ProtocolRequestType(ShowDocumentRequest2.method);
      })(ShowDocumentRequest = exports.ShowDocumentRequest || (exports.ShowDocumentRequest = {}));
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/protocol.linkedEditingRange.js


  var require_protocol_linkedEditingRange = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/protocol.linkedEditingRange.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonProtocolLinkedEditingRangeJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.LinkedEditingRangeRequest = void 0;
      var messages_1 = require_messages2();
      var LinkedEditingRangeRequest;

      (function (LinkedEditingRangeRequest2) {
        LinkedEditingRangeRequest2.method = "textDocument/linkedEditingRange";
        LinkedEditingRangeRequest2.type = new messages_1.ProtocolRequestType(LinkedEditingRangeRequest2.method);
      })(LinkedEditingRangeRequest = exports.LinkedEditingRangeRequest || (exports.LinkedEditingRangeRequest = {}));
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js


  var require_protocol_fileOperations = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonProtocolFileOperationsJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.DidRenameFilesNotification = exports.WillRenameFilesRequest = exports.DidCreateFilesNotification = exports.WillCreateFilesRequest = exports.FileOperationPatternKind = void 0;
      var messages_1 = require_messages2();
      var FileOperationPatternKind;

      (function (FileOperationPatternKind2) {
        FileOperationPatternKind2.file = "file";
        FileOperationPatternKind2.folder = "folder";
      })(FileOperationPatternKind = exports.FileOperationPatternKind || (exports.FileOperationPatternKind = {}));

      var WillCreateFilesRequest;

      (function (WillCreateFilesRequest2) {
        WillCreateFilesRequest2.method = "workspace/willCreateFiles";
        WillCreateFilesRequest2.type = new messages_1.ProtocolRequestType(WillCreateFilesRequest2.method);
      })(WillCreateFilesRequest = exports.WillCreateFilesRequest || (exports.WillCreateFilesRequest = {}));

      var DidCreateFilesNotification;

      (function (DidCreateFilesNotification2) {
        DidCreateFilesNotification2.method = "workspace/didCreateFiles";
        DidCreateFilesNotification2.type = new messages_1.ProtocolNotificationType(DidCreateFilesNotification2.method);
      })(DidCreateFilesNotification = exports.DidCreateFilesNotification || (exports.DidCreateFilesNotification = {}));

      var WillRenameFilesRequest;

      (function (WillRenameFilesRequest2) {
        WillRenameFilesRequest2.method = "workspace/willRenameFiles";
        WillRenameFilesRequest2.type = new messages_1.ProtocolRequestType(WillRenameFilesRequest2.method);
      })(WillRenameFilesRequest = exports.WillRenameFilesRequest || (exports.WillRenameFilesRequest = {}));

      var DidRenameFilesNotification;

      (function (DidRenameFilesNotification2) {
        DidRenameFilesNotification2.method = "workspace/didRenameFiles";
        DidRenameFilesNotification2.type = new messages_1.ProtocolNotificationType(DidRenameFilesNotification2.method);
      })(DidRenameFilesNotification = exports.DidRenameFilesNotification || (exports.DidRenameFilesNotification = {}));

      var DidDeleteFilesNotification;

      (function (DidDeleteFilesNotification2) {
        DidDeleteFilesNotification2.method = "workspace/didDeleteFiles";
        DidDeleteFilesNotification2.type = new messages_1.ProtocolNotificationType(DidDeleteFilesNotification2.method);
      })(DidDeleteFilesNotification = exports.DidDeleteFilesNotification || (exports.DidDeleteFilesNotification = {}));

      var WillDeleteFilesRequest;

      (function (WillDeleteFilesRequest2) {
        WillDeleteFilesRequest2.method = "workspace/willDeleteFiles";
        WillDeleteFilesRequest2.type = new messages_1.ProtocolRequestType(WillDeleteFilesRequest2.method);
      })(WillDeleteFilesRequest = exports.WillDeleteFilesRequest || (exports.WillDeleteFilesRequest = {}));
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/protocol.moniker.js


  var require_protocol_moniker = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/protocol.moniker.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonProtocolMonikerJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = void 0;
      var messages_1 = require_messages2();
      var UniquenessLevel;

      (function (UniquenessLevel2) {
        UniquenessLevel2["document"] = "document";
        UniquenessLevel2["project"] = "project";
        UniquenessLevel2["group"] = "group";
        UniquenessLevel2["scheme"] = "scheme";
        UniquenessLevel2["global"] = "global";
      })(UniquenessLevel = exports.UniquenessLevel || (exports.UniquenessLevel = {}));

      var MonikerKind;

      (function (MonikerKind2) {
        MonikerKind2["import"] = "import";
        MonikerKind2["export"] = "export";
        MonikerKind2["local"] = "local";
      })(MonikerKind = exports.MonikerKind || (exports.MonikerKind = {}));

      var MonikerRequest;

      (function (MonikerRequest2) {
        MonikerRequest2.method = "textDocument/moniker";
        MonikerRequest2.type = new messages_1.ProtocolRequestType(MonikerRequest2.method);
      })(MonikerRequest = exports.MonikerRequest || (exports.MonikerRequest = {}));
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/protocol.js


  var require_protocol = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/protocol.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonProtocolJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.CodeLensRefreshRequest = exports.CodeLensResolveRequest = exports.CodeLensRequest = exports.WorkspaceSymbolResolveRequest = exports.WorkspaceSymbolRequest = exports.CodeActionResolveRequest = exports.CodeActionRequest = exports.DocumentSymbolRequest = exports.DocumentHighlightRequest = exports.ReferencesRequest = exports.DefinitionRequest = exports.SignatureHelpRequest = exports.SignatureHelpTriggerKind = exports.HoverRequest = exports.CompletionResolveRequest = exports.CompletionRequest = exports.CompletionTriggerKind = exports.PublishDiagnosticsNotification = exports.WatchKind = exports.FileChangeType = exports.DidChangeWatchedFilesNotification = exports.WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentNotification = exports.TextDocumentSaveReason = exports.DidSaveTextDocumentNotification = exports.DidCloseTextDocumentNotification = exports.DidChangeTextDocumentNotification = exports.TextDocumentContentChangeEvent = exports.DidOpenTextDocumentNotification = exports.TextDocumentSyncKind = exports.TelemetryEventNotification = exports.LogMessageNotification = exports.ShowMessageRequest = exports.ShowMessageNotification = exports.MessageType = exports.DidChangeConfigurationNotification = exports.ExitNotification = exports.ShutdownRequest = exports.InitializedNotification = exports.InitializeError = exports.InitializeRequest = exports.WorkDoneProgressOptions = exports.TextDocumentRegistrationOptions = exports.StaticRegistrationOptions = exports.FailureHandlingKind = exports.ResourceOperationKind = exports.UnregistrationRequest = exports.RegistrationRequest = exports.DocumentSelector = exports.DocumentFilter = void 0;
      exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.WillRenameFilesRequest = exports.DidRenameFilesNotification = exports.WillCreateFilesRequest = exports.DidCreateFilesNotification = exports.FileOperationPatternKind = exports.LinkedEditingRangeRequest = exports.ShowDocumentRequest = exports.SemanticTokensRegistrationType = exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.TokenFormat = exports.CallHierarchyPrepareRequest = exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = exports.SelectionRangeRequest = exports.DeclarationRequest = exports.FoldingRangeRequest = exports.ColorPresentationRequest = exports.DocumentColorRequest = exports.ConfigurationRequest = exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = exports.TypeDefinitionRequest = exports.ImplementationRequest = exports.ApplyWorkspaceEditRequest = exports.ExecuteCommandRequest = exports.PrepareRenameRequest = exports.RenameRequest = exports.PrepareSupportDefaultBehavior = exports.DocumentOnTypeFormattingRequest = exports.DocumentRangeFormattingRequest = exports.DocumentFormattingRequest = exports.DocumentLinkResolveRequest = exports.DocumentLinkRequest = void 0;
      var messages_1 = require_messages2();
      var Is = require_is2();
      var protocol_implementation_1 = require_protocol_implementation();
      Object.defineProperty(exports, "ImplementationRequest", {
        enumerable: true,
        get: function get() {
          return protocol_implementation_1.ImplementationRequest;
        }
      });
      var protocol_typeDefinition_1 = require_protocol_typeDefinition();
      Object.defineProperty(exports, "TypeDefinitionRequest", {
        enumerable: true,
        get: function get() {
          return protocol_typeDefinition_1.TypeDefinitionRequest;
        }
      });
      var protocol_workspaceFolders_1 = require_protocol_workspaceFolders();
      Object.defineProperty(exports, "WorkspaceFoldersRequest", {
        enumerable: true,
        get: function get() {
          return protocol_workspaceFolders_1.WorkspaceFoldersRequest;
        }
      });
      Object.defineProperty(exports, "DidChangeWorkspaceFoldersNotification", {
        enumerable: true,
        get: function get() {
          return protocol_workspaceFolders_1.DidChangeWorkspaceFoldersNotification;
        }
      });
      var protocol_configuration_1 = require_protocol_configuration();
      Object.defineProperty(exports, "ConfigurationRequest", {
        enumerable: true,
        get: function get() {
          return protocol_configuration_1.ConfigurationRequest;
        }
      });
      var protocol_colorProvider_1 = require_protocol_colorProvider();
      Object.defineProperty(exports, "DocumentColorRequest", {
        enumerable: true,
        get: function get() {
          return protocol_colorProvider_1.DocumentColorRequest;
        }
      });
      Object.defineProperty(exports, "ColorPresentationRequest", {
        enumerable: true,
        get: function get() {
          return protocol_colorProvider_1.ColorPresentationRequest;
        }
      });
      var protocol_foldingRange_1 = require_protocol_foldingRange();
      Object.defineProperty(exports, "FoldingRangeRequest", {
        enumerable: true,
        get: function get() {
          return protocol_foldingRange_1.FoldingRangeRequest;
        }
      });
      var protocol_declaration_1 = require_protocol_declaration();
      Object.defineProperty(exports, "DeclarationRequest", {
        enumerable: true,
        get: function get() {
          return protocol_declaration_1.DeclarationRequest;
        }
      });
      var protocol_selectionRange_1 = require_protocol_selectionRange();
      Object.defineProperty(exports, "SelectionRangeRequest", {
        enumerable: true,
        get: function get() {
          return protocol_selectionRange_1.SelectionRangeRequest;
        }
      });
      var protocol_progress_1 = require_protocol_progress();
      Object.defineProperty(exports, "WorkDoneProgress", {
        enumerable: true,
        get: function get() {
          return protocol_progress_1.WorkDoneProgress;
        }
      });
      Object.defineProperty(exports, "WorkDoneProgressCreateRequest", {
        enumerable: true,
        get: function get() {
          return protocol_progress_1.WorkDoneProgressCreateRequest;
        }
      });
      Object.defineProperty(exports, "WorkDoneProgressCancelNotification", {
        enumerable: true,
        get: function get() {
          return protocol_progress_1.WorkDoneProgressCancelNotification;
        }
      });
      var protocol_callHierarchy_1 = require_protocol_callHierarchy();
      Object.defineProperty(exports, "CallHierarchyIncomingCallsRequest", {
        enumerable: true,
        get: function get() {
          return protocol_callHierarchy_1.CallHierarchyIncomingCallsRequest;
        }
      });
      Object.defineProperty(exports, "CallHierarchyOutgoingCallsRequest", {
        enumerable: true,
        get: function get() {
          return protocol_callHierarchy_1.CallHierarchyOutgoingCallsRequest;
        }
      });
      Object.defineProperty(exports, "CallHierarchyPrepareRequest", {
        enumerable: true,
        get: function get() {
          return protocol_callHierarchy_1.CallHierarchyPrepareRequest;
        }
      });
      var protocol_semanticTokens_1 = require_protocol_semanticTokens();
      Object.defineProperty(exports, "TokenFormat", {
        enumerable: true,
        get: function get() {
          return protocol_semanticTokens_1.TokenFormat;
        }
      });
      Object.defineProperty(exports, "SemanticTokensRequest", {
        enumerable: true,
        get: function get() {
          return protocol_semanticTokens_1.SemanticTokensRequest;
        }
      });
      Object.defineProperty(exports, "SemanticTokensDeltaRequest", {
        enumerable: true,
        get: function get() {
          return protocol_semanticTokens_1.SemanticTokensDeltaRequest;
        }
      });
      Object.defineProperty(exports, "SemanticTokensRangeRequest", {
        enumerable: true,
        get: function get() {
          return protocol_semanticTokens_1.SemanticTokensRangeRequest;
        }
      });
      Object.defineProperty(exports, "SemanticTokensRefreshRequest", {
        enumerable: true,
        get: function get() {
          return protocol_semanticTokens_1.SemanticTokensRefreshRequest;
        }
      });
      Object.defineProperty(exports, "SemanticTokensRegistrationType", {
        enumerable: true,
        get: function get() {
          return protocol_semanticTokens_1.SemanticTokensRegistrationType;
        }
      });
      var protocol_showDocument_1 = require_protocol_showDocument();
      Object.defineProperty(exports, "ShowDocumentRequest", {
        enumerable: true,
        get: function get() {
          return protocol_showDocument_1.ShowDocumentRequest;
        }
      });
      var protocol_linkedEditingRange_1 = require_protocol_linkedEditingRange();
      Object.defineProperty(exports, "LinkedEditingRangeRequest", {
        enumerable: true,
        get: function get() {
          return protocol_linkedEditingRange_1.LinkedEditingRangeRequest;
        }
      });
      var protocol_fileOperations_1 = require_protocol_fileOperations();
      Object.defineProperty(exports, "FileOperationPatternKind", {
        enumerable: true,
        get: function get() {
          return protocol_fileOperations_1.FileOperationPatternKind;
        }
      });
      Object.defineProperty(exports, "DidCreateFilesNotification", {
        enumerable: true,
        get: function get() {
          return protocol_fileOperations_1.DidCreateFilesNotification;
        }
      });
      Object.defineProperty(exports, "WillCreateFilesRequest", {
        enumerable: true,
        get: function get() {
          return protocol_fileOperations_1.WillCreateFilesRequest;
        }
      });
      Object.defineProperty(exports, "DidRenameFilesNotification", {
        enumerable: true,
        get: function get() {
          return protocol_fileOperations_1.DidRenameFilesNotification;
        }
      });
      Object.defineProperty(exports, "WillRenameFilesRequest", {
        enumerable: true,
        get: function get() {
          return protocol_fileOperations_1.WillRenameFilesRequest;
        }
      });
      Object.defineProperty(exports, "DidDeleteFilesNotification", {
        enumerable: true,
        get: function get() {
          return protocol_fileOperations_1.DidDeleteFilesNotification;
        }
      });
      Object.defineProperty(exports, "WillDeleteFilesRequest", {
        enumerable: true,
        get: function get() {
          return protocol_fileOperations_1.WillDeleteFilesRequest;
        }
      });
      var protocol_moniker_1 = require_protocol_moniker();
      Object.defineProperty(exports, "UniquenessLevel", {
        enumerable: true,
        get: function get() {
          return protocol_moniker_1.UniquenessLevel;
        }
      });
      Object.defineProperty(exports, "MonikerKind", {
        enumerable: true,
        get: function get() {
          return protocol_moniker_1.MonikerKind;
        }
      });
      Object.defineProperty(exports, "MonikerRequest", {
        enumerable: true,
        get: function get() {
          return protocol_moniker_1.MonikerRequest;
        }
      });
      var DocumentFilter;

      (function (DocumentFilter2) {
        function is(value) {
          var candidate = value;
          return Is.string(candidate.language) || Is.string(candidate.scheme) || Is.string(candidate.pattern);
        }

        DocumentFilter2.is = is;
      })(DocumentFilter = exports.DocumentFilter || (exports.DocumentFilter = {}));

      var DocumentSelector;

      (function (DocumentSelector2) {
        function is(value) {
          if (!Array.isArray(value)) {
            return false;
          }

          var _iterator8 = _createForOfIteratorHelper(value),
              _step5;

          try {
            for (_iterator8.s(); !(_step5 = _iterator8.n()).done;) {
              var elem = _step5.value;

              if (!Is.string(elem) && !DocumentFilter.is(elem)) {
                return false;
              }
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }

          return true;
        }

        DocumentSelector2.is = is;
      })(DocumentSelector = exports.DocumentSelector || (exports.DocumentSelector = {}));

      var RegistrationRequest;

      (function (RegistrationRequest2) {
        RegistrationRequest2.type = new messages_1.ProtocolRequestType("client/registerCapability");
      })(RegistrationRequest = exports.RegistrationRequest || (exports.RegistrationRequest = {}));

      var UnregistrationRequest;

      (function (UnregistrationRequest2) {
        UnregistrationRequest2.type = new messages_1.ProtocolRequestType("client/unregisterCapability");
      })(UnregistrationRequest = exports.UnregistrationRequest || (exports.UnregistrationRequest = {}));

      var ResourceOperationKind;

      (function (ResourceOperationKind2) {
        ResourceOperationKind2.Create = "create";
        ResourceOperationKind2.Rename = "rename";
        ResourceOperationKind2.Delete = "delete";
      })(ResourceOperationKind = exports.ResourceOperationKind || (exports.ResourceOperationKind = {}));

      var FailureHandlingKind;

      (function (FailureHandlingKind2) {
        FailureHandlingKind2.Abort = "abort";
        FailureHandlingKind2.Transactional = "transactional";
        FailureHandlingKind2.TextOnlyTransactional = "textOnlyTransactional";
        FailureHandlingKind2.Undo = "undo";
      })(FailureHandlingKind = exports.FailureHandlingKind || (exports.FailureHandlingKind = {}));

      var StaticRegistrationOptions;

      (function (StaticRegistrationOptions2) {
        function hasId(value) {
          var candidate = value;
          return candidate && Is.string(candidate.id) && candidate.id.length > 0;
        }

        StaticRegistrationOptions2.hasId = hasId;
      })(StaticRegistrationOptions = exports.StaticRegistrationOptions || (exports.StaticRegistrationOptions = {}));

      var TextDocumentRegistrationOptions;

      (function (TextDocumentRegistrationOptions2) {
        function is(value) {
          var candidate = value;
          return candidate && (candidate.documentSelector === null || DocumentSelector.is(candidate.documentSelector));
        }

        TextDocumentRegistrationOptions2.is = is;
      })(TextDocumentRegistrationOptions = exports.TextDocumentRegistrationOptions || (exports.TextDocumentRegistrationOptions = {}));

      var WorkDoneProgressOptions;

      (function (WorkDoneProgressOptions2) {
        function is(value) {
          var candidate = value;
          return Is.objectLiteral(candidate) && (candidate.workDoneProgress === void 0 || Is.boolean(candidate.workDoneProgress));
        }

        WorkDoneProgressOptions2.is = is;

        function hasWorkDoneProgress(value) {
          var candidate = value;
          return candidate && Is.boolean(candidate.workDoneProgress);
        }

        WorkDoneProgressOptions2.hasWorkDoneProgress = hasWorkDoneProgress;
      })(WorkDoneProgressOptions = exports.WorkDoneProgressOptions || (exports.WorkDoneProgressOptions = {}));

      var InitializeRequest;

      (function (InitializeRequest2) {
        InitializeRequest2.type = new messages_1.ProtocolRequestType("initialize");
      })(InitializeRequest = exports.InitializeRequest || (exports.InitializeRequest = {}));

      var InitializeError;

      (function (InitializeError2) {
        InitializeError2.unknownProtocolVersion = 1;
      })(InitializeError = exports.InitializeError || (exports.InitializeError = {}));

      var InitializedNotification;

      (function (InitializedNotification2) {
        InitializedNotification2.type = new messages_1.ProtocolNotificationType("initialized");
      })(InitializedNotification = exports.InitializedNotification || (exports.InitializedNotification = {}));

      var ShutdownRequest;

      (function (ShutdownRequest2) {
        ShutdownRequest2.type = new messages_1.ProtocolRequestType0("shutdown");
      })(ShutdownRequest = exports.ShutdownRequest || (exports.ShutdownRequest = {}));

      var ExitNotification;

      (function (ExitNotification2) {
        ExitNotification2.type = new messages_1.ProtocolNotificationType0("exit");
      })(ExitNotification = exports.ExitNotification || (exports.ExitNotification = {}));

      var DidChangeConfigurationNotification;

      (function (DidChangeConfigurationNotification2) {
        DidChangeConfigurationNotification2.type = new messages_1.ProtocolNotificationType("workspace/didChangeConfiguration");
      })(DidChangeConfigurationNotification = exports.DidChangeConfigurationNotification || (exports.DidChangeConfigurationNotification = {}));

      var MessageType;

      (function (MessageType2) {
        MessageType2.Error = 1;
        MessageType2.Warning = 2;
        MessageType2.Info = 3;
        MessageType2.Log = 4;
      })(MessageType = exports.MessageType || (exports.MessageType = {}));

      var ShowMessageNotification;

      (function (ShowMessageNotification2) {
        ShowMessageNotification2.type = new messages_1.ProtocolNotificationType("window/showMessage");
      })(ShowMessageNotification = exports.ShowMessageNotification || (exports.ShowMessageNotification = {}));

      var ShowMessageRequest;

      (function (ShowMessageRequest2) {
        ShowMessageRequest2.type = new messages_1.ProtocolRequestType("window/showMessageRequest");
      })(ShowMessageRequest = exports.ShowMessageRequest || (exports.ShowMessageRequest = {}));

      var LogMessageNotification;

      (function (LogMessageNotification2) {
        LogMessageNotification2.type = new messages_1.ProtocolNotificationType("window/logMessage");
      })(LogMessageNotification = exports.LogMessageNotification || (exports.LogMessageNotification = {}));

      var TelemetryEventNotification;

      (function (TelemetryEventNotification2) {
        TelemetryEventNotification2.type = new messages_1.ProtocolNotificationType("telemetry/event");
      })(TelemetryEventNotification = exports.TelemetryEventNotification || (exports.TelemetryEventNotification = {}));

      var TextDocumentSyncKind2;

      (function (TextDocumentSyncKind3) {
        TextDocumentSyncKind3.None = 0;
        TextDocumentSyncKind3.Full = 1;
        TextDocumentSyncKind3.Incremental = 2;
      })(TextDocumentSyncKind2 = exports.TextDocumentSyncKind || (exports.TextDocumentSyncKind = {}));

      var DidOpenTextDocumentNotification;

      (function (DidOpenTextDocumentNotification2) {
        DidOpenTextDocumentNotification2.method = "textDocument/didOpen";
        DidOpenTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidOpenTextDocumentNotification2.method);
      })(DidOpenTextDocumentNotification = exports.DidOpenTextDocumentNotification || (exports.DidOpenTextDocumentNotification = {}));

      var TextDocumentContentChangeEvent2;

      (function (TextDocumentContentChangeEvent3) {
        function isIncremental(event) {
          var candidate = event;
          return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range !== void 0 && (candidate.rangeLength === void 0 || typeof candidate.rangeLength === "number");
        }

        TextDocumentContentChangeEvent3.isIncremental = isIncremental;

        function isFull(event) {
          var candidate = event;
          return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range === void 0 && candidate.rangeLength === void 0;
        }

        TextDocumentContentChangeEvent3.isFull = isFull;
      })(TextDocumentContentChangeEvent2 = exports.TextDocumentContentChangeEvent || (exports.TextDocumentContentChangeEvent = {}));

      var DidChangeTextDocumentNotification;

      (function (DidChangeTextDocumentNotification2) {
        DidChangeTextDocumentNotification2.method = "textDocument/didChange";
        DidChangeTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidChangeTextDocumentNotification2.method);
      })(DidChangeTextDocumentNotification = exports.DidChangeTextDocumentNotification || (exports.DidChangeTextDocumentNotification = {}));

      var DidCloseTextDocumentNotification;

      (function (DidCloseTextDocumentNotification2) {
        DidCloseTextDocumentNotification2.method = "textDocument/didClose";
        DidCloseTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidCloseTextDocumentNotification2.method);
      })(DidCloseTextDocumentNotification = exports.DidCloseTextDocumentNotification || (exports.DidCloseTextDocumentNotification = {}));

      var DidSaveTextDocumentNotification;

      (function (DidSaveTextDocumentNotification2) {
        DidSaveTextDocumentNotification2.method = "textDocument/didSave";
        DidSaveTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidSaveTextDocumentNotification2.method);
      })(DidSaveTextDocumentNotification = exports.DidSaveTextDocumentNotification || (exports.DidSaveTextDocumentNotification = {}));

      var TextDocumentSaveReason;

      (function (TextDocumentSaveReason2) {
        TextDocumentSaveReason2.Manual = 1;
        TextDocumentSaveReason2.AfterDelay = 2;
        TextDocumentSaveReason2.FocusOut = 3;
      })(TextDocumentSaveReason = exports.TextDocumentSaveReason || (exports.TextDocumentSaveReason = {}));

      var WillSaveTextDocumentNotification;

      (function (WillSaveTextDocumentNotification2) {
        WillSaveTextDocumentNotification2.method = "textDocument/willSave";
        WillSaveTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(WillSaveTextDocumentNotification2.method);
      })(WillSaveTextDocumentNotification = exports.WillSaveTextDocumentNotification || (exports.WillSaveTextDocumentNotification = {}));

      var WillSaveTextDocumentWaitUntilRequest;

      (function (WillSaveTextDocumentWaitUntilRequest2) {
        WillSaveTextDocumentWaitUntilRequest2.method = "textDocument/willSaveWaitUntil";
        WillSaveTextDocumentWaitUntilRequest2.type = new messages_1.ProtocolRequestType(WillSaveTextDocumentWaitUntilRequest2.method);
      })(WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentWaitUntilRequest || (exports.WillSaveTextDocumentWaitUntilRequest = {}));

      var DidChangeWatchedFilesNotification;

      (function (DidChangeWatchedFilesNotification2) {
        DidChangeWatchedFilesNotification2.type = new messages_1.ProtocolNotificationType("workspace/didChangeWatchedFiles");
      })(DidChangeWatchedFilesNotification = exports.DidChangeWatchedFilesNotification || (exports.DidChangeWatchedFilesNotification = {}));

      var FileChangeType2;

      (function (FileChangeType3) {
        FileChangeType3.Created = 1;
        FileChangeType3.Changed = 2;
        FileChangeType3.Deleted = 3;
      })(FileChangeType2 = exports.FileChangeType || (exports.FileChangeType = {}));

      var WatchKind;

      (function (WatchKind2) {
        WatchKind2.Create = 1;
        WatchKind2.Change = 2;
        WatchKind2.Delete = 4;
      })(WatchKind = exports.WatchKind || (exports.WatchKind = {}));

      var PublishDiagnosticsNotification;

      (function (PublishDiagnosticsNotification2) {
        PublishDiagnosticsNotification2.type = new messages_1.ProtocolNotificationType("textDocument/publishDiagnostics");
      })(PublishDiagnosticsNotification = exports.PublishDiagnosticsNotification || (exports.PublishDiagnosticsNotification = {}));

      var CompletionTriggerKind;

      (function (CompletionTriggerKind2) {
        CompletionTriggerKind2.Invoked = 1;
        CompletionTriggerKind2.TriggerCharacter = 2;
        CompletionTriggerKind2.TriggerForIncompleteCompletions = 3;
      })(CompletionTriggerKind = exports.CompletionTriggerKind || (exports.CompletionTriggerKind = {}));

      var CompletionRequest2;

      (function (CompletionRequest3) {
        CompletionRequest3.method = "textDocument/completion";
        CompletionRequest3.type = new messages_1.ProtocolRequestType(CompletionRequest3.method);
      })(CompletionRequest2 = exports.CompletionRequest || (exports.CompletionRequest = {}));

      var CompletionResolveRequest;

      (function (CompletionResolveRequest2) {
        CompletionResolveRequest2.method = "completionItem/resolve";
        CompletionResolveRequest2.type = new messages_1.ProtocolRequestType(CompletionResolveRequest2.method);
      })(CompletionResolveRequest = exports.CompletionResolveRequest || (exports.CompletionResolveRequest = {}));

      var HoverRequest;

      (function (HoverRequest2) {
        HoverRequest2.method = "textDocument/hover";
        HoverRequest2.type = new messages_1.ProtocolRequestType(HoverRequest2.method);
      })(HoverRequest = exports.HoverRequest || (exports.HoverRequest = {}));

      var SignatureHelpTriggerKind;

      (function (SignatureHelpTriggerKind2) {
        SignatureHelpTriggerKind2.Invoked = 1;
        SignatureHelpTriggerKind2.TriggerCharacter = 2;
        SignatureHelpTriggerKind2.ContentChange = 3;
      })(SignatureHelpTriggerKind = exports.SignatureHelpTriggerKind || (exports.SignatureHelpTriggerKind = {}));

      var SignatureHelpRequest;

      (function (SignatureHelpRequest2) {
        SignatureHelpRequest2.method = "textDocument/signatureHelp";
        SignatureHelpRequest2.type = new messages_1.ProtocolRequestType(SignatureHelpRequest2.method);
      })(SignatureHelpRequest = exports.SignatureHelpRequest || (exports.SignatureHelpRequest = {}));

      var DefinitionRequest2;

      (function (DefinitionRequest3) {
        DefinitionRequest3.method = "textDocument/definition";
        DefinitionRequest3.type = new messages_1.ProtocolRequestType(DefinitionRequest3.method);
      })(DefinitionRequest2 = exports.DefinitionRequest || (exports.DefinitionRequest = {}));

      var ReferencesRequest2;

      (function (ReferencesRequest3) {
        ReferencesRequest3.method = "textDocument/references";
        ReferencesRequest3.type = new messages_1.ProtocolRequestType(ReferencesRequest3.method);
      })(ReferencesRequest2 = exports.ReferencesRequest || (exports.ReferencesRequest = {}));

      var DocumentHighlightRequest2;

      (function (DocumentHighlightRequest3) {
        DocumentHighlightRequest3.method = "textDocument/documentHighlight";
        DocumentHighlightRequest3.type = new messages_1.ProtocolRequestType(DocumentHighlightRequest3.method);
      })(DocumentHighlightRequest2 = exports.DocumentHighlightRequest || (exports.DocumentHighlightRequest = {}));

      var DocumentSymbolRequest2;

      (function (DocumentSymbolRequest3) {
        DocumentSymbolRequest3.method = "textDocument/documentSymbol";
        DocumentSymbolRequest3.type = new messages_1.ProtocolRequestType(DocumentSymbolRequest3.method);
      })(DocumentSymbolRequest2 = exports.DocumentSymbolRequest || (exports.DocumentSymbolRequest = {}));

      var CodeActionRequest;

      (function (CodeActionRequest2) {
        CodeActionRequest2.method = "textDocument/codeAction";
        CodeActionRequest2.type = new messages_1.ProtocolRequestType(CodeActionRequest2.method);
      })(CodeActionRequest = exports.CodeActionRequest || (exports.CodeActionRequest = {}));

      var CodeActionResolveRequest;

      (function (CodeActionResolveRequest2) {
        CodeActionResolveRequest2.method = "codeAction/resolve";
        CodeActionResolveRequest2.type = new messages_1.ProtocolRequestType(CodeActionResolveRequest2.method);
      })(CodeActionResolveRequest = exports.CodeActionResolveRequest || (exports.CodeActionResolveRequest = {}));

      var WorkspaceSymbolRequest2;

      (function (WorkspaceSymbolRequest3) {
        WorkspaceSymbolRequest3.method = "workspace/symbol";
        WorkspaceSymbolRequest3.type = new messages_1.ProtocolRequestType(WorkspaceSymbolRequest3.method);
      })(WorkspaceSymbolRequest2 = exports.WorkspaceSymbolRequest || (exports.WorkspaceSymbolRequest = {}));

      var WorkspaceSymbolResolveRequest2;

      (function (WorkspaceSymbolResolveRequest3) {
        WorkspaceSymbolResolveRequest3.method = "workspaceSymbol/resolve";
        WorkspaceSymbolResolveRequest3.type = new messages_1.ProtocolRequestType(WorkspaceSymbolResolveRequest3.method);
      })(WorkspaceSymbolResolveRequest2 = exports.WorkspaceSymbolResolveRequest || (exports.WorkspaceSymbolResolveRequest = {}));

      var CodeLensRequest;

      (function (CodeLensRequest2) {
        CodeLensRequest2.method = "textDocument/codeLens";
        CodeLensRequest2.type = new messages_1.ProtocolRequestType(CodeLensRequest2.method);
      })(CodeLensRequest = exports.CodeLensRequest || (exports.CodeLensRequest = {}));

      var CodeLensResolveRequest;

      (function (CodeLensResolveRequest2) {
        CodeLensResolveRequest2.method = "codeLens/resolve";
        CodeLensResolveRequest2.type = new messages_1.ProtocolRequestType(CodeLensResolveRequest2.method);
      })(CodeLensResolveRequest = exports.CodeLensResolveRequest || (exports.CodeLensResolveRequest = {}));

      var CodeLensRefreshRequest;

      (function (CodeLensRefreshRequest2) {
        CodeLensRefreshRequest2.method = "workspace/codeLens/refresh";
        CodeLensRefreshRequest2.type = new messages_1.ProtocolRequestType0(CodeLensRefreshRequest2.method);
      })(CodeLensRefreshRequest = exports.CodeLensRefreshRequest || (exports.CodeLensRefreshRequest = {}));

      var DocumentLinkRequest;

      (function (DocumentLinkRequest2) {
        DocumentLinkRequest2.method = "textDocument/documentLink";
        DocumentLinkRequest2.type = new messages_1.ProtocolRequestType(DocumentLinkRequest2.method);
      })(DocumentLinkRequest = exports.DocumentLinkRequest || (exports.DocumentLinkRequest = {}));

      var DocumentLinkResolveRequest;

      (function (DocumentLinkResolveRequest2) {
        DocumentLinkResolveRequest2.method = "documentLink/resolve";
        DocumentLinkResolveRequest2.type = new messages_1.ProtocolRequestType(DocumentLinkResolveRequest2.method);
      })(DocumentLinkResolveRequest = exports.DocumentLinkResolveRequest || (exports.DocumentLinkResolveRequest = {}));

      var DocumentFormattingRequest;

      (function (DocumentFormattingRequest2) {
        DocumentFormattingRequest2.method = "textDocument/formatting";
        DocumentFormattingRequest2.type = new messages_1.ProtocolRequestType(DocumentFormattingRequest2.method);
      })(DocumentFormattingRequest = exports.DocumentFormattingRequest || (exports.DocumentFormattingRequest = {}));

      var DocumentRangeFormattingRequest;

      (function (DocumentRangeFormattingRequest2) {
        DocumentRangeFormattingRequest2.method = "textDocument/rangeFormatting";
        DocumentRangeFormattingRequest2.type = new messages_1.ProtocolRequestType(DocumentRangeFormattingRequest2.method);
      })(DocumentRangeFormattingRequest = exports.DocumentRangeFormattingRequest || (exports.DocumentRangeFormattingRequest = {}));

      var DocumentOnTypeFormattingRequest;

      (function (DocumentOnTypeFormattingRequest2) {
        DocumentOnTypeFormattingRequest2.method = "textDocument/onTypeFormatting";
        DocumentOnTypeFormattingRequest2.type = new messages_1.ProtocolRequestType(DocumentOnTypeFormattingRequest2.method);
      })(DocumentOnTypeFormattingRequest = exports.DocumentOnTypeFormattingRequest || (exports.DocumentOnTypeFormattingRequest = {}));

      var PrepareSupportDefaultBehavior;

      (function (PrepareSupportDefaultBehavior2) {
        PrepareSupportDefaultBehavior2.Identifier = 1;
      })(PrepareSupportDefaultBehavior = exports.PrepareSupportDefaultBehavior || (exports.PrepareSupportDefaultBehavior = {}));

      var RenameRequest;

      (function (RenameRequest2) {
        RenameRequest2.method = "textDocument/rename";
        RenameRequest2.type = new messages_1.ProtocolRequestType(RenameRequest2.method);
      })(RenameRequest = exports.RenameRequest || (exports.RenameRequest = {}));

      var PrepareRenameRequest;

      (function (PrepareRenameRequest2) {
        PrepareRenameRequest2.method = "textDocument/prepareRename";
        PrepareRenameRequest2.type = new messages_1.ProtocolRequestType(PrepareRenameRequest2.method);
      })(PrepareRenameRequest = exports.PrepareRenameRequest || (exports.PrepareRenameRequest = {}));

      var ExecuteCommandRequest;

      (function (ExecuteCommandRequest2) {
        ExecuteCommandRequest2.type = new messages_1.ProtocolRequestType("workspace/executeCommand");
      })(ExecuteCommandRequest = exports.ExecuteCommandRequest || (exports.ExecuteCommandRequest = {}));

      var ApplyWorkspaceEditRequest;

      (function (ApplyWorkspaceEditRequest2) {
        ApplyWorkspaceEditRequest2.type = new messages_1.ProtocolRequestType("workspace/applyEdit");
      })(ApplyWorkspaceEditRequest = exports.ApplyWorkspaceEditRequest || (exports.ApplyWorkspaceEditRequest = {}));
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/connection.js


  var require_connection2 = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/connection.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonConnectionJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createProtocolConnection = void 0;
      var vscode_jsonrpc_1 = require_main();

      function createProtocolConnection(input, output, logger, options) {
        if (vscode_jsonrpc_1.ConnectionStrategy.is(options)) {
          options = {
            connectionStrategy: options
          };
        }

        return (0, vscode_jsonrpc_1.createMessageConnection)(input, output, logger, options);
      }

      exports.createProtocolConnection = createProtocolConnection;
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/proposed.diagnostic.js


  var require_proposed_diagnostic = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/proposed.diagnostic.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonProposedDiagnosticJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.DiagnosticRefreshRequest = exports.WorkspaceDiagnosticRequest = exports.DocumentDiagnosticRequest = exports.DocumentDiagnosticReportKind = exports.DiagnosticServerCancellationData = void 0;
      var vscode_jsonrpc_1 = require_main();
      var Is = require_is2();
      var messages_1 = require_messages2();
      var DiagnosticServerCancellationData;

      (function (DiagnosticServerCancellationData2) {
        function is(value) {
          var candidate = value;
          return candidate && Is.boolean(candidate.retriggerRequest);
        }

        DiagnosticServerCancellationData2.is = is;
      })(DiagnosticServerCancellationData = exports.DiagnosticServerCancellationData || (exports.DiagnosticServerCancellationData = {}));

      var DocumentDiagnosticReportKind;

      (function (DocumentDiagnosticReportKind2) {
        DocumentDiagnosticReportKind2["full"] = "full";
        DocumentDiagnosticReportKind2["unChanged"] = "unChanged";
      })(DocumentDiagnosticReportKind = exports.DocumentDiagnosticReportKind || (exports.DocumentDiagnosticReportKind = {}));

      var DocumentDiagnosticRequest;

      (function (DocumentDiagnosticRequest2) {
        DocumentDiagnosticRequest2.method = "textDocument/diagnostic";
        DocumentDiagnosticRequest2.type = new messages_1.ProtocolRequestType(DocumentDiagnosticRequest2.method);
        DocumentDiagnosticRequest2.partialResult = new vscode_jsonrpc_1.ProgressType();
      })(DocumentDiagnosticRequest = exports.DocumentDiagnosticRequest || (exports.DocumentDiagnosticRequest = {}));

      var WorkspaceDiagnosticRequest;

      (function (WorkspaceDiagnosticRequest2) {
        WorkspaceDiagnosticRequest2.method = "workspace/diagnostic";
        WorkspaceDiagnosticRequest2.type = new messages_1.ProtocolRequestType(WorkspaceDiagnosticRequest2.method);
        WorkspaceDiagnosticRequest2.partialResult = new vscode_jsonrpc_1.ProgressType();
      })(WorkspaceDiagnosticRequest = exports.WorkspaceDiagnosticRequest || (exports.WorkspaceDiagnosticRequest = {}));

      var DiagnosticRefreshRequest;

      (function (DiagnosticRefreshRequest2) {
        DiagnosticRefreshRequest2.method = "workspace/diagnostic/refresh";
        DiagnosticRefreshRequest2.type = new messages_1.ProtocolRequestType0(DiagnosticRefreshRequest2.method);
      })(DiagnosticRefreshRequest = exports.DiagnosticRefreshRequest || (exports.DiagnosticRefreshRequest = {}));
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/proposed.typeHierarchy.js


  var require_proposed_typeHierarchy = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/proposed.typeHierarchy.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonProposedTypeHierarchyJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.TypeHierarchySubtypesRequest = exports.TypeHierarchySupertypesRequest = exports.TypeHierarchyPrepareRequest = void 0;
      var messages_1 = require_messages2();
      var TypeHierarchyPrepareRequest;

      (function (TypeHierarchyPrepareRequest2) {
        TypeHierarchyPrepareRequest2.method = "textDocument/prepareTypeHierarchy";
        TypeHierarchyPrepareRequest2.type = new messages_1.ProtocolRequestType(TypeHierarchyPrepareRequest2.method);
      })(TypeHierarchyPrepareRequest = exports.TypeHierarchyPrepareRequest || (exports.TypeHierarchyPrepareRequest = {}));

      var TypeHierarchySupertypesRequest;

      (function (TypeHierarchySupertypesRequest2) {
        TypeHierarchySupertypesRequest2.method = "typeHierarchy/supertypes";
        TypeHierarchySupertypesRequest2.type = new messages_1.ProtocolRequestType(TypeHierarchySupertypesRequest2.method);
      })(TypeHierarchySupertypesRequest = exports.TypeHierarchySupertypesRequest || (exports.TypeHierarchySupertypesRequest = {}));

      var TypeHierarchySubtypesRequest;

      (function (TypeHierarchySubtypesRequest2) {
        TypeHierarchySubtypesRequest2.method = "typeHierarchy/subtypes";
        TypeHierarchySubtypesRequest2.type = new messages_1.ProtocolRequestType(TypeHierarchySubtypesRequest2.method);
      })(TypeHierarchySubtypesRequest = exports.TypeHierarchySubtypesRequest || (exports.TypeHierarchySubtypesRequest = {}));
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/proposed.inlineValue.js


  var require_proposed_inlineValue = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/proposed.inlineValue.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonProposedInlineValueJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.InlineValuesRefreshRequest = exports.InlineValuesRequest = void 0;
      var messages_1 = require_messages2();
      var InlineValuesRequest;

      (function (InlineValuesRequest2) {
        InlineValuesRequest2.method = "textDocument/inlineValues";
        InlineValuesRequest2.type = new messages_1.ProtocolRequestType(InlineValuesRequest2.method);
      })(InlineValuesRequest = exports.InlineValuesRequest || (exports.InlineValuesRequest = {}));

      var InlineValuesRefreshRequest;

      (function (InlineValuesRefreshRequest2) {
        InlineValuesRefreshRequest2.method = "workspace/inlineValues/refresh";
        InlineValuesRefreshRequest2.type = new messages_1.ProtocolRequestType0(InlineValuesRefreshRequest2.method);
      })(InlineValuesRefreshRequest = exports.InlineValuesRefreshRequest || (exports.InlineValuesRefreshRequest = {}));
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/common/api.js


  var require_api2 = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/common/api.js": function serverNode_modulesVscodeLanguageserverProtocolLibCommonApiJs(exports) {
      "use strict";

      var __createBinding = exports && exports.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        });
      } : function (o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });

      var __exportStar = exports && exports.__exportStar || function (m, exports2) {
        for (var p in m) {
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
        }
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Proposed = exports.LSPErrorCodes = exports.createProtocolConnection = void 0;

      __exportStar(require_main(), exports);

      __exportStar(require_main2(), exports);

      __exportStar(require_messages2(), exports);

      __exportStar(require_protocol(), exports);

      var connection_1 = require_connection2();
      Object.defineProperty(exports, "createProtocolConnection", {
        enumerable: true,
        get: function get() {
          return connection_1.createProtocolConnection;
        }
      });
      var LSPErrorCodes;

      (function (LSPErrorCodes2) {
        LSPErrorCodes2.lspReservedErrorRangeStart = -32899;
        LSPErrorCodes2.RequestFailed = -32803;
        LSPErrorCodes2.ServerCancelled = -32802;
        LSPErrorCodes2.ContentModified = -32801;
        LSPErrorCodes2.RequestCancelled = -32800;
        LSPErrorCodes2.lspReservedErrorRangeEnd = -32800;
      })(LSPErrorCodes = exports.LSPErrorCodes || (exports.LSPErrorCodes = {}));

      var diag = require_proposed_diagnostic();
      var typeh = require_proposed_typeHierarchy();
      var iv = require_proposed_inlineValue();
      var Proposed;

      (function (Proposed2) {
        Proposed2.DiagnosticServerCancellationData = diag.DiagnosticServerCancellationData;
        Proposed2.DocumentDiagnosticReportKind = diag.DocumentDiagnosticReportKind;
        Proposed2.DocumentDiagnosticRequest = diag.DocumentDiagnosticRequest;
        Proposed2.WorkspaceDiagnosticRequest = diag.WorkspaceDiagnosticRequest;
        Proposed2.DiagnosticRefreshRequest = diag.DiagnosticRefreshRequest;
        Proposed2.TypeHierarchyPrepareRequest = typeh.TypeHierarchyPrepareRequest;
        Proposed2.TypeHierarchySupertypesRequest = typeh.TypeHierarchySupertypesRequest;
        Proposed2.TypeHierarchySubtypesRequest = typeh.TypeHierarchySubtypesRequest;
        Proposed2.InlineValuesRequest = iv.InlineValuesRequest;
        Proposed2.InlineValuesRefreshRequest = iv.InlineValuesRefreshRequest;
      })(Proposed = exports.Proposed || (exports.Proposed = {}));
    }
  }); // server/node_modules/vscode-languageserver-protocol/lib/browser/main.js


  var require_main3 = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/lib/browser/main.js": function serverNode_modulesVscodeLanguageserverProtocolLibBrowserMainJs(exports) {
      "use strict";

      var __createBinding = exports && exports.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        });
      } : function (o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });

      var __exportStar = exports && exports.__exportStar || function (m, exports2) {
        for (var p in m) {
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
        }
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createProtocolConnection = void 0;
      var browser_1 = require_browser();

      __exportStar(require_browser(), exports);

      __exportStar(require_api2(), exports);

      function createProtocolConnection(reader, writer, logger, options) {
        return (0, browser_1.createMessageConnection)(reader, writer, logger, options);
      }

      exports.createProtocolConnection = createProtocolConnection;
    }
  }); // server/node_modules/vscode-languageserver/lib/common/utils/is.js


  var require_is3 = __commonJS({
    "server/node_modules/vscode-languageserver/lib/common/utils/is.js": function serverNode_modulesVscodeLanguageserverLibCommonUtilsIsJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.thenable = exports.typedArray = exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;

      function boolean(value) {
        return value === true || value === false;
      }

      exports.boolean = boolean;

      function string(value) {
        return typeof value === "string" || value instanceof String;
      }

      exports.string = string;

      function number(value) {
        return typeof value === "number" || value instanceof Number;
      }

      exports.number = number;

      function error(value) {
        return value instanceof Error;
      }

      exports.error = error;

      function func(value) {
        return typeof value === "function";
      }

      exports.func = func;

      function array(value) {
        return Array.isArray(value);
      }

      exports.array = array;

      function stringArray(value) {
        return array(value) && value.every(function (elem) {
          return string(elem);
        });
      }

      exports.stringArray = stringArray;

      function typedArray(value, check) {
        return Array.isArray(value) && value.every(check);
      }

      exports.typedArray = typedArray;

      function thenable(value) {
        return value && func(value.then);
      }

      exports.thenable = thenable;
    }
  }); // server/node_modules/vscode-languageserver/lib/common/utils/uuid.js


  var require_uuid = __commonJS({
    "server/node_modules/vscode-languageserver/lib/common/utils/uuid.js": function serverNode_modulesVscodeLanguageserverLibCommonUtilsUuidJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.generateUuid = exports.parse = exports.isUUID = exports.v4 = exports.empty = void 0;

      var ValueUUID = /*#__PURE__*/function () {
        function ValueUUID(_value) {
          _classCallCheck(this, ValueUUID);

          this._value = _value;
        }

        _createClass(ValueUUID, [{
          key: "asHex",
          value: function asHex() {
            return this._value;
          }
        }, {
          key: "equals",
          value: function equals(other) {
            return this.asHex() === other.asHex();
          }
        }]);

        return ValueUUID;
      }();

      var V4UUID = /*#__PURE__*/function (_ValueUUID) {
        _inherits(V4UUID, _ValueUUID);

        var _super35 = _createSuper(V4UUID);

        function V4UUID() {
          _classCallCheck(this, V4UUID);

          return _super35.call(this, [V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), "-", V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), "-", "4", V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), "-", V4UUID._oneOf(V4UUID._timeHighBits), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), "-", V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex()].join(""));
        }

        _createClass(V4UUID, null, [{
          key: "_oneOf",
          value: function _oneOf(array) {
            return array[Math.floor(array.length * Math.random())];
          }
        }, {
          key: "_randomHex",
          value: function _randomHex() {
            return V4UUID._oneOf(V4UUID._chars);
          }
        }]);

        return V4UUID;
      }(ValueUUID);

      V4UUID._chars = ["0", "1", "2", "3", "4", "5", "6", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
      V4UUID._timeHighBits = ["8", "9", "a", "b"];
      exports.empty = new ValueUUID("00000000-0000-0000-0000-000000000000");

      function v4() {
        return new V4UUID();
      }

      exports.v4 = v4;
      var _UUIDPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;

      function isUUID(value) {
        return _UUIDPattern.test(value);
      }

      exports.isUUID = isUUID;

      function parse(value) {
        if (!isUUID(value)) {
          throw new Error("invalid uuid");
        }

        return new ValueUUID(value);
      }

      exports.parse = parse;

      function generateUuid() {
        return v4().asHex();
      }

      exports.generateUuid = generateUuid;
    }
  }); // server/node_modules/vscode-languageserver/lib/common/progress.js


  var require_progress = __commonJS({
    "server/node_modules/vscode-languageserver/lib/common/progress.js": function serverNode_modulesVscodeLanguageserverLibCommonProgressJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.attachPartialResult = exports.ProgressFeature = exports.attachWorkDone = void 0;
      var vscode_languageserver_protocol_1 = require_main3();
      var uuid_1 = require_uuid();

      var WorkDoneProgressReporterImpl = /*#__PURE__*/function () {
        function WorkDoneProgressReporterImpl(_connection, _token) {
          _classCallCheck(this, WorkDoneProgressReporterImpl);

          this._connection = _connection;
          this._token = _token;
          WorkDoneProgressReporterImpl.Instances.set(this._token, this);
        }

        _createClass(WorkDoneProgressReporterImpl, [{
          key: "begin",
          value: function begin(title, percentage, message, cancellable) {
            var param = {
              kind: "begin",
              title: title,
              percentage: percentage,
              message: message,
              cancellable: cancellable
            };

            this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, param);
          }
        }, {
          key: "report",
          value: function report(arg0, arg1) {
            var param = {
              kind: "report"
            };

            if (typeof arg0 === "number") {
              param.percentage = arg0;

              if (arg1 !== void 0) {
                param.message = arg1;
              }
            } else {
              param.message = arg0;
            }

            this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, param);
          }
        }, {
          key: "done",
          value: function done() {
            WorkDoneProgressReporterImpl.Instances.delete(this._token);

            this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, {
              kind: "end"
            });
          }
        }]);

        return WorkDoneProgressReporterImpl;
      }();

      WorkDoneProgressReporterImpl.Instances = new Map();

      var WorkDoneProgressServerReporterImpl = /*#__PURE__*/function (_WorkDoneProgressRepo) {
        _inherits(WorkDoneProgressServerReporterImpl, _WorkDoneProgressRepo);

        var _super36 = _createSuper(WorkDoneProgressServerReporterImpl);

        function WorkDoneProgressServerReporterImpl(connection2, token) {
          var _this33;

          _classCallCheck(this, WorkDoneProgressServerReporterImpl);

          _this33 = _super36.call(this, connection2, token);
          _this33._source = new vscode_languageserver_protocol_1.CancellationTokenSource();
          return _this33;
        }

        _createClass(WorkDoneProgressServerReporterImpl, [{
          key: "token",
          get: function get() {
            return this._source.token;
          }
        }, {
          key: "done",
          value: function done() {
            this._source.dispose();

            _get(_getPrototypeOf(WorkDoneProgressServerReporterImpl.prototype), "done", this).call(this);
          }
        }, {
          key: "cancel",
          value: function cancel() {
            this._source.cancel();
          }
        }]);

        return WorkDoneProgressServerReporterImpl;
      }(WorkDoneProgressReporterImpl);

      var NullProgressReporter = /*#__PURE__*/function () {
        function NullProgressReporter() {
          _classCallCheck(this, NullProgressReporter);
        }

        _createClass(NullProgressReporter, [{
          key: "begin",
          value: function begin() {}
        }, {
          key: "report",
          value: function report() {}
        }, {
          key: "done",
          value: function done() {}
        }]);

        return NullProgressReporter;
      }();

      var NullProgressServerReporter = /*#__PURE__*/function (_NullProgressReporter) {
        _inherits(NullProgressServerReporter, _NullProgressReporter);

        var _super37 = _createSuper(NullProgressServerReporter);

        function NullProgressServerReporter() {
          var _this34;

          _classCallCheck(this, NullProgressServerReporter);

          _this34 = _super37.call(this);
          _this34._source = new vscode_languageserver_protocol_1.CancellationTokenSource();
          return _this34;
        }

        _createClass(NullProgressServerReporter, [{
          key: "token",
          get: function get() {
            return this._source.token;
          }
        }, {
          key: "done",
          value: function done() {
            this._source.dispose();
          }
        }, {
          key: "cancel",
          value: function cancel() {
            this._source.cancel();
          }
        }]);

        return NullProgressServerReporter;
      }(NullProgressReporter);

      function attachWorkDone(connection2, params) {
        if (params === void 0 || params.workDoneToken === void 0) {
          return new NullProgressReporter();
        }

        var token = params.workDoneToken;
        delete params.workDoneToken;
        return new WorkDoneProgressReporterImpl(connection2, token);
      }

      exports.attachWorkDone = attachWorkDone;

      var ProgressFeature = function ProgressFeature(Base) {
        return /*#__PURE__*/function (_Base) {
          _inherits(_class, _Base);

          var _super38 = _createSuper(_class);

          function _class() {
            var _this35;

            _classCallCheck(this, _class);

            _this35 = _super38.call(this);
            _this35._progressSupported = false;
            return _this35;
          }

          _createClass(_class, [{
            key: "initialize",
            value: function initialize(capabilities) {
              var _capabilities$window;

              _get(_getPrototypeOf(_class.prototype), "initialize", this).call(this, capabilities);

              if ((capabilities === null || capabilities === void 0 ? void 0 : (_capabilities$window = capabilities.window) === null || _capabilities$window === void 0 ? void 0 : _capabilities$window.workDoneProgress) === true) {
                this._progressSupported = true;
                this.connection.onNotification(vscode_languageserver_protocol_1.WorkDoneProgressCancelNotification.type, function (params) {
                  var progress = WorkDoneProgressReporterImpl.Instances.get(params.token);

                  if (progress instanceof WorkDoneProgressServerReporterImpl || progress instanceof NullProgressServerReporter) {
                    progress.cancel();
                  }
                });
              }
            }
          }, {
            key: "attachWorkDoneProgress",
            value: function attachWorkDoneProgress(token) {
              if (token === void 0) {
                return new NullProgressReporter();
              } else {
                return new WorkDoneProgressReporterImpl(this.connection, token);
              }
            }
          }, {
            key: "createWorkDoneProgress",
            value: function createWorkDoneProgress() {
              var _this36 = this;

              if (this._progressSupported) {
                var token = (0, uuid_1.generateUuid)();
                return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkDoneProgressCreateRequest.type, {
                  token: token
                }).then(function () {
                  var result = new WorkDoneProgressServerReporterImpl(_this36.connection, token);
                  return result;
                });
              } else {
                return Promise.resolve(new NullProgressServerReporter());
              }
            }
          }]);

          return _class;
        }(Base);
      };

      exports.ProgressFeature = ProgressFeature;
      var ResultProgress;

      (function (ResultProgress2) {
        ResultProgress2.type = new vscode_languageserver_protocol_1.ProgressType();
      })(ResultProgress || (ResultProgress = {}));

      var ResultProgressReporterImpl = /*#__PURE__*/function () {
        function ResultProgressReporterImpl(_connection, _token) {
          _classCallCheck(this, ResultProgressReporterImpl);

          this._connection = _connection;
          this._token = _token;
        }

        _createClass(ResultProgressReporterImpl, [{
          key: "report",
          value: function report(data) {
            this._connection.sendProgress(ResultProgress.type, this._token, data);
          }
        }]);

        return ResultProgressReporterImpl;
      }();

      function attachPartialResult(connection2, params) {
        if (params === void 0 || params.partialResultToken === void 0) {
          return void 0;
        }

        var token = params.partialResultToken;
        delete params.partialResultToken;
        return new ResultProgressReporterImpl(connection2, token);
      }

      exports.attachPartialResult = attachPartialResult;
    }
  }); // server/node_modules/vscode-languageserver/lib/common/configuration.js


  var require_configuration = __commonJS({
    "server/node_modules/vscode-languageserver/lib/common/configuration.js": function serverNode_modulesVscodeLanguageserverLibCommonConfigurationJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ConfigurationFeature = void 0;
      var vscode_languageserver_protocol_1 = require_main3();
      var Is = require_is3();

      var ConfigurationFeature = function ConfigurationFeature(Base) {
        return /*#__PURE__*/function (_Base2) {
          _inherits(_class2, _Base2);

          var _super39 = _createSuper(_class2);

          function _class2() {
            _classCallCheck(this, _class2);

            return _super39.apply(this, arguments);
          }

          _createClass(_class2, [{
            key: "getConfiguration",
            value: function getConfiguration(arg) {
              if (!arg) {
                return this._getConfiguration({});
              } else if (Is.string(arg)) {
                return this._getConfiguration({
                  section: arg
                });
              } else {
                return this._getConfiguration(arg);
              }
            }
          }, {
            key: "_getConfiguration",
            value: function _getConfiguration(arg) {
              var params = {
                items: Array.isArray(arg) ? arg : [arg]
              };
              return this.connection.sendRequest(vscode_languageserver_protocol_1.ConfigurationRequest.type, params).then(function (result) {
                if (Array.isArray(result)) {
                  return Array.isArray(arg) ? result : result[0];
                } else {
                  return Array.isArray(arg) ? [] : null;
                }
              });
            }
          }]);

          return _class2;
        }(Base);
      };

      exports.ConfigurationFeature = ConfigurationFeature;
    }
  }); // server/node_modules/vscode-languageserver/lib/common/workspaceFolders.js


  var require_workspaceFolders = __commonJS({
    "server/node_modules/vscode-languageserver/lib/common/workspaceFolders.js": function serverNode_modulesVscodeLanguageserverLibCommonWorkspaceFoldersJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.WorkspaceFoldersFeature = void 0;
      var vscode_languageserver_protocol_1 = require_main3();

      var WorkspaceFoldersFeature = function WorkspaceFoldersFeature(Base) {
        return /*#__PURE__*/function (_Base3) {
          _inherits(_class3, _Base3);

          var _super40 = _createSuper(_class3);

          function _class3() {
            var _this37;

            _classCallCheck(this, _class3);

            _this37 = _super40.call(this);
            _this37._notificationIsAutoRegistered = false;
            return _this37;
          }

          _createClass(_class3, [{
            key: "initialize",
            value: function initialize(capabilities) {
              var _this38 = this;

              _get(_getPrototypeOf(_class3.prototype), "initialize", this).call(this, capabilities);

              var workspaceCapabilities = capabilities.workspace;

              if (workspaceCapabilities && workspaceCapabilities.workspaceFolders) {
                this._onDidChangeWorkspaceFolders = new vscode_languageserver_protocol_1.Emitter();
                this.connection.onNotification(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type, function (params) {
                  _this38._onDidChangeWorkspaceFolders.fire(params.event);
                });
              }
            }
          }, {
            key: "fillServerCapabilities",
            value: function fillServerCapabilities(capabilities) {
              var _capabilities$workspa, _capabilities$workspa2;

              _get(_getPrototypeOf(_class3.prototype), "fillServerCapabilities", this).call(this, capabilities);

              var changeNotifications = (_capabilities$workspa = capabilities.workspace) === null || _capabilities$workspa === void 0 ? void 0 : (_capabilities$workspa2 = _capabilities$workspa.workspaceFolders) === null || _capabilities$workspa2 === void 0 ? void 0 : _capabilities$workspa2.changeNotifications;
              this._notificationIsAutoRegistered = changeNotifications === true || typeof changeNotifications === "string";
            }
          }, {
            key: "getWorkspaceFolders",
            value: function getWorkspaceFolders() {
              return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkspaceFoldersRequest.type);
            }
          }, {
            key: "onDidChangeWorkspaceFolders",
            get: function get() {
              if (!this._onDidChangeWorkspaceFolders) {
                throw new Error("Client doesn't support sending workspace folder change events.");
              }

              if (!this._notificationIsAutoRegistered && !this._unregistration) {
                this._unregistration = this.connection.client.register(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type);
              }

              return this._onDidChangeWorkspaceFolders.event;
            }
          }]);

          return _class3;
        }(Base);
      };

      exports.WorkspaceFoldersFeature = WorkspaceFoldersFeature;
    }
  }); // server/node_modules/vscode-languageserver/lib/common/callHierarchy.js


  var require_callHierarchy = __commonJS({
    "server/node_modules/vscode-languageserver/lib/common/callHierarchy.js": function serverNode_modulesVscodeLanguageserverLibCommonCallHierarchyJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.CallHierarchyFeature = void 0;
      var vscode_languageserver_protocol_1 = require_main3();

      var CallHierarchyFeature = function CallHierarchyFeature(Base) {
        return /*#__PURE__*/function (_Base4) {
          _inherits(_class4, _Base4);

          var _super41 = _createSuper(_class4);

          function _class4() {
            _classCallCheck(this, _class4);

            return _super41.apply(this, arguments);
          }

          _createClass(_class4, [{
            key: "callHierarchy",
            get: function get() {
              var _this39 = this;

              return {
                onPrepare: function onPrepare(handler) {
                  _this39.connection.onRequest(vscode_languageserver_protocol_1.CallHierarchyPrepareRequest.type, function (params, cancel) {
                    return handler(params, cancel, _this39.attachWorkDoneProgress(params), void 0);
                  });
                },
                onIncomingCalls: function onIncomingCalls(handler) {
                  var type = vscode_languageserver_protocol_1.CallHierarchyIncomingCallsRequest.type;

                  _this39.connection.onRequest(type, function (params, cancel) {
                    return handler(params, cancel, _this39.attachWorkDoneProgress(params), _this39.attachPartialResultProgress(type, params));
                  });
                },
                onOutgoingCalls: function onOutgoingCalls(handler) {
                  var type = vscode_languageserver_protocol_1.CallHierarchyOutgoingCallsRequest.type;

                  _this39.connection.onRequest(type, function (params, cancel) {
                    return handler(params, cancel, _this39.attachWorkDoneProgress(params), _this39.attachPartialResultProgress(type, params));
                  });
                }
              };
            }
          }]);

          return _class4;
        }(Base);
      };

      exports.CallHierarchyFeature = CallHierarchyFeature;
    }
  }); // server/node_modules/vscode-languageserver/lib/common/semanticTokens.js


  var require_semanticTokens = __commonJS({
    "server/node_modules/vscode-languageserver/lib/common/semanticTokens.js": function serverNode_modulesVscodeLanguageserverLibCommonSemanticTokensJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SemanticTokensBuilder = exports.SemanticTokensDiff = exports.SemanticTokensFeature = void 0;
      var vscode_languageserver_protocol_1 = require_main3();

      var SemanticTokensFeature = function SemanticTokensFeature(Base) {
        return /*#__PURE__*/function (_Base5) {
          _inherits(_class5, _Base5);

          var _super42 = _createSuper(_class5);

          function _class5() {
            _classCallCheck(this, _class5);

            return _super42.apply(this, arguments);
          }

          _createClass(_class5, [{
            key: "semanticTokens",
            get: function get() {
              var _this40 = this;

              return {
                refresh: function refresh() {
                  return _this40.connection.sendRequest(vscode_languageserver_protocol_1.SemanticTokensRefreshRequest.type);
                },
                on: function on(handler) {
                  var type = vscode_languageserver_protocol_1.SemanticTokensRequest.type;

                  _this40.connection.onRequest(type, function (params, cancel) {
                    return handler(params, cancel, _this40.attachWorkDoneProgress(params), _this40.attachPartialResultProgress(type, params));
                  });
                },
                onDelta: function onDelta(handler) {
                  var type = vscode_languageserver_protocol_1.SemanticTokensDeltaRequest.type;

                  _this40.connection.onRequest(type, function (params, cancel) {
                    return handler(params, cancel, _this40.attachWorkDoneProgress(params), _this40.attachPartialResultProgress(type, params));
                  });
                },
                onRange: function onRange(handler) {
                  var type = vscode_languageserver_protocol_1.SemanticTokensRangeRequest.type;

                  _this40.connection.onRequest(type, function (params, cancel) {
                    return handler(params, cancel, _this40.attachWorkDoneProgress(params), _this40.attachPartialResultProgress(type, params));
                  });
                }
              };
            }
          }]);

          return _class5;
        }(Base);
      };

      exports.SemanticTokensFeature = SemanticTokensFeature;

      var SemanticTokensDiff = /*#__PURE__*/function () {
        function SemanticTokensDiff(originalSequence, modifiedSequence) {
          _classCallCheck(this, SemanticTokensDiff);

          this.originalSequence = originalSequence;
          this.modifiedSequence = modifiedSequence;
        }

        _createClass(SemanticTokensDiff, [{
          key: "computeDiff",
          value: function computeDiff() {
            var originalLength = this.originalSequence.length;
            var modifiedLength = this.modifiedSequence.length;
            var startIndex = 0;

            while (startIndex < modifiedLength && startIndex < originalLength && this.originalSequence[startIndex] === this.modifiedSequence[startIndex]) {
              startIndex++;
            }

            if (startIndex < modifiedLength && startIndex < originalLength) {
              var originalEndIndex = originalLength - 1;
              var modifiedEndIndex = modifiedLength - 1;

              while (originalEndIndex >= startIndex && modifiedEndIndex >= startIndex && this.originalSequence[originalEndIndex] === this.modifiedSequence[modifiedEndIndex]) {
                originalEndIndex--;
                modifiedEndIndex--;
              }

              if (originalEndIndex < startIndex || modifiedEndIndex < startIndex) {
                originalEndIndex++;
                modifiedEndIndex++;
              }

              var deleteCount = originalEndIndex - startIndex + 1;
              var newData = this.modifiedSequence.slice(startIndex, modifiedEndIndex + 1);

              if (newData.length === 1 && newData[0] === this.originalSequence[originalEndIndex]) {
                return [{
                  start: startIndex,
                  deleteCount: deleteCount - 1
                }];
              } else {
                return [{
                  start: startIndex,
                  deleteCount: deleteCount,
                  data: newData
                }];
              }
            } else if (startIndex < modifiedLength) {
              return [{
                start: startIndex,
                deleteCount: 0,
                data: this.modifiedSequence.slice(startIndex)
              }];
            } else if (startIndex < originalLength) {
              return [{
                start: startIndex,
                deleteCount: originalLength - startIndex
              }];
            } else {
              return [];
            }
          }
        }]);

        return SemanticTokensDiff;
      }();

      exports.SemanticTokensDiff = SemanticTokensDiff;

      var SemanticTokensBuilder = /*#__PURE__*/function () {
        function SemanticTokensBuilder() {
          _classCallCheck(this, SemanticTokensBuilder);

          this._prevData = void 0;
          this.initialize();
        }

        _createClass(SemanticTokensBuilder, [{
          key: "initialize",
          value: function initialize() {
            this._id = Date.now();
            this._prevLine = 0;
            this._prevChar = 0;
            this._data = [];
            this._dataLen = 0;
          }
        }, {
          key: "push",
          value: function push(line, char, length, tokenType, tokenModifiers) {
            var pushLine = line;
            var pushChar = char;

            if (this._dataLen > 0) {
              pushLine -= this._prevLine;

              if (pushLine === 0) {
                pushChar -= this._prevChar;
              }
            }

            this._data[this._dataLen++] = pushLine;
            this._data[this._dataLen++] = pushChar;
            this._data[this._dataLen++] = length;
            this._data[this._dataLen++] = tokenType;
            this._data[this._dataLen++] = tokenModifiers;
            this._prevLine = line;
            this._prevChar = char;
          }
        }, {
          key: "id",
          get: function get() {
            return this._id.toString();
          }
        }, {
          key: "previousResult",
          value: function previousResult(id) {
            if (this.id === id) {
              this._prevData = this._data;
            }

            this.initialize();
          }
        }, {
          key: "build",
          value: function build() {
            this._prevData = void 0;
            return {
              resultId: this.id,
              data: this._data
            };
          }
        }, {
          key: "canBuildEdits",
          value: function canBuildEdits() {
            return this._prevData !== void 0;
          }
        }, {
          key: "buildEdits",
          value: function buildEdits() {
            if (this._prevData !== void 0) {
              return {
                resultId: this.id,
                edits: new SemanticTokensDiff(this._prevData, this._data).computeDiff()
              };
            } else {
              return this.build();
            }
          }
        }]);

        return SemanticTokensBuilder;
      }();

      exports.SemanticTokensBuilder = SemanticTokensBuilder;
    }
  }); // server/node_modules/vscode-languageserver/lib/common/showDocument.js


  var require_showDocument = __commonJS({
    "server/node_modules/vscode-languageserver/lib/common/showDocument.js": function serverNode_modulesVscodeLanguageserverLibCommonShowDocumentJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ShowDocumentFeature = void 0;
      var vscode_languageserver_protocol_1 = require_main3();

      var ShowDocumentFeature = function ShowDocumentFeature(Base) {
        return /*#__PURE__*/function (_Base6) {
          _inherits(_class6, _Base6);

          var _super43 = _createSuper(_class6);

          function _class6() {
            _classCallCheck(this, _class6);

            return _super43.apply(this, arguments);
          }

          _createClass(_class6, [{
            key: "showDocument",
            value: function showDocument(params) {
              return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowDocumentRequest.type, params);
            }
          }]);

          return _class6;
        }(Base);
      };

      exports.ShowDocumentFeature = ShowDocumentFeature;
    }
  }); // server/node_modules/vscode-languageserver/lib/common/fileOperations.js


  var require_fileOperations = __commonJS({
    "server/node_modules/vscode-languageserver/lib/common/fileOperations.js": function serverNode_modulesVscodeLanguageserverLibCommonFileOperationsJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.FileOperationsFeature = void 0;
      var vscode_languageserver_protocol_1 = require_main3();

      var FileOperationsFeature = function FileOperationsFeature(Base) {
        return /*#__PURE__*/function (_Base7) {
          _inherits(_class7, _Base7);

          var _super44 = _createSuper(_class7);

          function _class7() {
            _classCallCheck(this, _class7);

            return _super44.apply(this, arguments);
          }

          _createClass(_class7, [{
            key: "onDidCreateFiles",
            value: function onDidCreateFiles(handler) {
              this.connection.onNotification(vscode_languageserver_protocol_1.DidCreateFilesNotification.type, function (params) {
                handler(params);
              });
            }
          }, {
            key: "onDidRenameFiles",
            value: function onDidRenameFiles(handler) {
              this.connection.onNotification(vscode_languageserver_protocol_1.DidRenameFilesNotification.type, function (params) {
                handler(params);
              });
            }
          }, {
            key: "onDidDeleteFiles",
            value: function onDidDeleteFiles(handler) {
              this.connection.onNotification(vscode_languageserver_protocol_1.DidDeleteFilesNotification.type, function (params) {
                handler(params);
              });
            }
          }, {
            key: "onWillCreateFiles",
            value: function onWillCreateFiles(handler) {
              return this.connection.onRequest(vscode_languageserver_protocol_1.WillCreateFilesRequest.type, function (params, cancel) {
                return handler(params, cancel);
              });
            }
          }, {
            key: "onWillRenameFiles",
            value: function onWillRenameFiles(handler) {
              return this.connection.onRequest(vscode_languageserver_protocol_1.WillRenameFilesRequest.type, function (params, cancel) {
                return handler(params, cancel);
              });
            }
          }, {
            key: "onWillDeleteFiles",
            value: function onWillDeleteFiles(handler) {
              return this.connection.onRequest(vscode_languageserver_protocol_1.WillDeleteFilesRequest.type, function (params, cancel) {
                return handler(params, cancel);
              });
            }
          }]);

          return _class7;
        }(Base);
      };

      exports.FileOperationsFeature = FileOperationsFeature;
    }
  }); // server/node_modules/vscode-languageserver/lib/common/linkedEditingRange.js


  var require_linkedEditingRange = __commonJS({
    "server/node_modules/vscode-languageserver/lib/common/linkedEditingRange.js": function serverNode_modulesVscodeLanguageserverLibCommonLinkedEditingRangeJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.LinkedEditingRangeFeature = void 0;
      var vscode_languageserver_protocol_1 = require_main3();

      var LinkedEditingRangeFeature = function LinkedEditingRangeFeature(Base) {
        return /*#__PURE__*/function (_Base8) {
          _inherits(_class8, _Base8);

          var _super45 = _createSuper(_class8);

          function _class8() {
            _classCallCheck(this, _class8);

            return _super45.apply(this, arguments);
          }

          _createClass(_class8, [{
            key: "onLinkedEditingRange",
            value: function onLinkedEditingRange(handler) {
              var _this41 = this;

              this.connection.onRequest(vscode_languageserver_protocol_1.LinkedEditingRangeRequest.type, function (params, cancel) {
                return handler(params, cancel, _this41.attachWorkDoneProgress(params), void 0);
              });
            }
          }]);

          return _class8;
        }(Base);
      };

      exports.LinkedEditingRangeFeature = LinkedEditingRangeFeature;
    }
  }); // server/node_modules/vscode-languageserver/lib/common/moniker.js


  var require_moniker = __commonJS({
    "server/node_modules/vscode-languageserver/lib/common/moniker.js": function serverNode_modulesVscodeLanguageserverLibCommonMonikerJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.MonikerFeature = void 0;
      var vscode_languageserver_protocol_1 = require_main3();

      var MonikerFeature = function MonikerFeature(Base) {
        return /*#__PURE__*/function (_Base9) {
          _inherits(_class9, _Base9);

          var _super46 = _createSuper(_class9);

          function _class9() {
            _classCallCheck(this, _class9);

            return _super46.apply(this, arguments);
          }

          _createClass(_class9, [{
            key: "moniker",
            get: function get() {
              var _this42 = this;

              return {
                on: function on(handler) {
                  var type = vscode_languageserver_protocol_1.MonikerRequest.type;

                  _this42.connection.onRequest(type, function (params, cancel) {
                    return handler(params, cancel, _this42.attachWorkDoneProgress(params), _this42.attachPartialResultProgress(type, params));
                  });
                }
              };
            }
          }]);

          return _class9;
        }(Base);
      };

      exports.MonikerFeature = MonikerFeature;
    }
  }); // server/node_modules/vscode-languageserver/lib/common/server.js


  var require_server = __commonJS({
    "server/node_modules/vscode-languageserver/lib/common/server.js": function serverNode_modulesVscodeLanguageserverLibCommonServerJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createConnection = exports.combineFeatures = exports.combineLanguagesFeatures = exports.combineWorkspaceFeatures = exports.combineWindowFeatures = exports.combineClientFeatures = exports.combineTracerFeatures = exports.combineTelemetryFeatures = exports.combineConsoleFeatures = exports._LanguagesImpl = exports.BulkUnregistration = exports.BulkRegistration = exports.ErrorMessageTracker = exports.TextDocuments = void 0;
      var vscode_languageserver_protocol_1 = require_main3();
      var Is = require_is3();
      var UUID = require_uuid();
      var progress_1 = require_progress();
      var configuration_1 = require_configuration();
      var workspaceFolders_1 = require_workspaceFolders();
      var callHierarchy_1 = require_callHierarchy();
      var semanticTokens_1 = require_semanticTokens();
      var showDocument_1 = require_showDocument();
      var fileOperations_1 = require_fileOperations();
      var linkedEditingRange_1 = require_linkedEditingRange();
      var moniker_1 = require_moniker();

      function null2Undefined(value) {
        if (value === null) {
          return void 0;
        }

        return value;
      }

      var TextDocuments2 = /*#__PURE__*/function () {
        function TextDocuments2(configuration) {
          _classCallCheck(this, TextDocuments2);

          this._documents = Object.create(null);
          this._configuration = configuration;
          this._onDidChangeContent = new vscode_languageserver_protocol_1.Emitter();
          this._onDidOpen = new vscode_languageserver_protocol_1.Emitter();
          this._onDidClose = new vscode_languageserver_protocol_1.Emitter();
          this._onDidSave = new vscode_languageserver_protocol_1.Emitter();
          this._onWillSave = new vscode_languageserver_protocol_1.Emitter();
        }

        _createClass(TextDocuments2, [{
          key: "onDidChangeContent",
          get: function get() {
            return this._onDidChangeContent.event;
          }
        }, {
          key: "onDidOpen",
          get: function get() {
            return this._onDidOpen.event;
          }
        }, {
          key: "onWillSave",
          get: function get() {
            return this._onWillSave.event;
          }
        }, {
          key: "onWillSaveWaitUntil",
          value: function onWillSaveWaitUntil(handler) {
            this._willSaveWaitUntil = handler;
          }
        }, {
          key: "onDidSave",
          get: function get() {
            return this._onDidSave.event;
          }
        }, {
          key: "onDidClose",
          get: function get() {
            return this._onDidClose.event;
          }
        }, {
          key: "get",
          value: function get(uri) {
            return this._documents[uri];
          }
        }, {
          key: "all",
          value: function all() {
            var _this43 = this;

            return Object.keys(this._documents).map(function (key) {
              return _this43._documents[key];
            });
          }
        }, {
          key: "keys",
          value: function keys() {
            return Object.keys(this._documents);
          }
        }, {
          key: "listen",
          value: function listen(connection2) {
            var _this44 = this;

            connection2.__textDocumentSync = vscode_languageserver_protocol_1.TextDocumentSyncKind.Full;
            connection2.onDidOpenTextDocument(function (event) {
              var td = event.textDocument;

              var document = _this44._configuration.create(td.uri, td.languageId, td.version, td.text);

              _this44._documents[td.uri] = document;
              var toFire = Object.freeze({
                document: document
              });

              _this44._onDidOpen.fire(toFire);

              _this44._onDidChangeContent.fire(toFire);
            });
            connection2.onDidChangeTextDocument(function (event) {
              var td = event.textDocument;
              var changes = event.contentChanges;

              if (changes.length === 0) {
                return;
              }

              var document = _this44._documents[td.uri];
              var version = td.version;

              if (version === null || version === void 0) {
                throw new Error("Received document change event for ".concat(td.uri, " without valid version identifier"));
              }

              document = _this44._configuration.update(document, changes, version);
              _this44._documents[td.uri] = document;

              _this44._onDidChangeContent.fire(Object.freeze({
                document: document
              }));
            });
            connection2.onDidCloseTextDocument(function (event) {
              var document = _this44._documents[event.textDocument.uri];

              if (document) {
                delete _this44._documents[event.textDocument.uri];

                _this44._onDidClose.fire(Object.freeze({
                  document: document
                }));
              }
            });
            connection2.onWillSaveTextDocument(function (event) {
              var document = _this44._documents[event.textDocument.uri];

              if (document) {
                _this44._onWillSave.fire(Object.freeze({
                  document: document,
                  reason: event.reason
                }));
              }
            });
            connection2.onWillSaveTextDocumentWaitUntil(function (event, token) {
              var document = _this44._documents[event.textDocument.uri];

              if (document && _this44._willSaveWaitUntil) {
                return _this44._willSaveWaitUntil(Object.freeze({
                  document: document,
                  reason: event.reason
                }), token);
              } else {
                return [];
              }
            });
            connection2.onDidSaveTextDocument(function (event) {
              var document = _this44._documents[event.textDocument.uri];

              if (document) {
                _this44._onDidSave.fire(Object.freeze({
                  document: document
                }));
              }
            });
          }
        }]);

        return TextDocuments2;
      }();

      exports.TextDocuments = TextDocuments2;

      var ErrorMessageTracker = /*#__PURE__*/function () {
        function ErrorMessageTracker() {
          _classCallCheck(this, ErrorMessageTracker);

          this._messages = Object.create(null);
        }

        _createClass(ErrorMessageTracker, [{
          key: "add",
          value: function add(message) {
            var count = this._messages[message];

            if (!count) {
              count = 0;
            }

            count++;
            this._messages[message] = count;
          }
        }, {
          key: "sendErrors",
          value: function sendErrors(connection2) {
            Object.keys(this._messages).forEach(function (message) {
              connection2.window.showErrorMessage(message);
            });
          }
        }]);

        return ErrorMessageTracker;
      }();

      exports.ErrorMessageTracker = ErrorMessageTracker;

      var RemoteConsoleImpl = /*#__PURE__*/function () {
        function RemoteConsoleImpl() {
          _classCallCheck(this, RemoteConsoleImpl);
        }

        _createClass(RemoteConsoleImpl, [{
          key: "rawAttach",
          value: function rawAttach(connection2) {
            this._rawConnection = connection2;
          }
        }, {
          key: "attach",
          value: function attach(connection2) {
            this._connection = connection2;
          }
        }, {
          key: "connection",
          get: function get() {
            if (!this._connection) {
              throw new Error("Remote is not attached to a connection yet.");
            }

            return this._connection;
          }
        }, {
          key: "fillServerCapabilities",
          value: function fillServerCapabilities(_capabilities) {}
        }, {
          key: "initialize",
          value: function initialize(_capabilities) {}
        }, {
          key: "error",
          value: function error(message) {
            this.send(vscode_languageserver_protocol_1.MessageType.Error, message);
          }
        }, {
          key: "warn",
          value: function warn(message) {
            this.send(vscode_languageserver_protocol_1.MessageType.Warning, message);
          }
        }, {
          key: "info",
          value: function info(message) {
            this.send(vscode_languageserver_protocol_1.MessageType.Info, message);
          }
        }, {
          key: "log",
          value: function log(message) {
            this.send(vscode_languageserver_protocol_1.MessageType.Log, message);
          }
        }, {
          key: "send",
          value: function send(type, message) {
            if (this._rawConnection) {
              this._rawConnection.sendNotification(vscode_languageserver_protocol_1.LogMessageNotification.type, {
                type: type,
                message: message
              }).catch(function () {
                (0, vscode_languageserver_protocol_1.RAL)().console.error("Sending log message failed");
              });
            }
          }
        }]);

        return RemoteConsoleImpl;
      }();

      var _RemoteWindowImpl = /*#__PURE__*/function () {
        function _RemoteWindowImpl() {
          _classCallCheck(this, _RemoteWindowImpl);
        }

        _createClass(_RemoteWindowImpl, [{
          key: "attach",
          value: function attach(connection2) {
            this._connection = connection2;
          }
        }, {
          key: "connection",
          get: function get() {
            if (!this._connection) {
              throw new Error("Remote is not attached to a connection yet.");
            }

            return this._connection;
          }
        }, {
          key: "initialize",
          value: function initialize(_capabilities) {}
        }, {
          key: "fillServerCapabilities",
          value: function fillServerCapabilities(_capabilities) {}
        }, {
          key: "showErrorMessage",
          value: function showErrorMessage(message) {
            for (var _len7 = arguments.length, actions = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
              actions[_key7 - 1] = arguments[_key7];
            }

            var params = {
              type: vscode_languageserver_protocol_1.MessageType.Error,
              message: message,
              actions: actions
            };
            return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
          }
        }, {
          key: "showWarningMessage",
          value: function showWarningMessage(message) {
            for (var _len8 = arguments.length, actions = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
              actions[_key8 - 1] = arguments[_key8];
            }

            var params = {
              type: vscode_languageserver_protocol_1.MessageType.Warning,
              message: message,
              actions: actions
            };
            return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
          }
        }, {
          key: "showInformationMessage",
          value: function showInformationMessage(message) {
            for (var _len9 = arguments.length, actions = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {
              actions[_key9 - 1] = arguments[_key9];
            }

            var params = {
              type: vscode_languageserver_protocol_1.MessageType.Info,
              message: message,
              actions: actions
            };
            return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
          }
        }]);

        return _RemoteWindowImpl;
      }();

      var RemoteWindowImpl = (0, showDocument_1.ShowDocumentFeature)((0, progress_1.ProgressFeature)(_RemoteWindowImpl));
      var BulkRegistration;

      (function (BulkRegistration2) {
        function create() {
          return new BulkRegistrationImpl();
        }

        BulkRegistration2.create = create;
      })(BulkRegistration = exports.BulkRegistration || (exports.BulkRegistration = {}));

      var BulkRegistrationImpl = /*#__PURE__*/function () {
        function BulkRegistrationImpl() {
          _classCallCheck(this, BulkRegistrationImpl);

          this._registrations = [];
          this._registered = new Set();
        }

        _createClass(BulkRegistrationImpl, [{
          key: "add",
          value: function add(type, registerOptions) {
            var method = Is.string(type) ? type : type.method;

            if (this._registered.has(method)) {
              throw new Error("".concat(method, " is already added to this registration"));
            }

            var id = UUID.generateUuid();

            this._registrations.push({
              id: id,
              method: method,
              registerOptions: registerOptions || {}
            });

            this._registered.add(method);
          }
        }, {
          key: "asRegistrationParams",
          value: function asRegistrationParams() {
            return {
              registrations: this._registrations
            };
          }
        }]);

        return BulkRegistrationImpl;
      }();

      var BulkUnregistration;

      (function (BulkUnregistration2) {
        function create() {
          return new BulkUnregistrationImpl(void 0, []);
        }

        BulkUnregistration2.create = create;
      })(BulkUnregistration = exports.BulkUnregistration || (exports.BulkUnregistration = {}));

      var BulkUnregistrationImpl = /*#__PURE__*/function () {
        function BulkUnregistrationImpl(_connection, unregistrations) {
          var _this45 = this;

          _classCallCheck(this, BulkUnregistrationImpl);

          this._connection = _connection;
          this._unregistrations = new Map();
          unregistrations.forEach(function (unregistration) {
            _this45._unregistrations.set(unregistration.method, unregistration);
          });
        }

        _createClass(BulkUnregistrationImpl, [{
          key: "isAttached",
          get: function get() {
            return !!this._connection;
          }
        }, {
          key: "attach",
          value: function attach(connection2) {
            this._connection = connection2;
          }
        }, {
          key: "add",
          value: function add(unregistration) {
            this._unregistrations.set(unregistration.method, unregistration);
          }
        }, {
          key: "dispose",
          value: function dispose() {
            var _this46 = this;

            var unregistrations = [];

            var _iterator9 = _createForOfIteratorHelper(this._unregistrations.values()),
                _step6;

            try {
              for (_iterator9.s(); !(_step6 = _iterator9.n()).done;) {
                var unregistration = _step6.value;
                unregistrations.push(unregistration);
              }
            } catch (err) {
              _iterator9.e(err);
            } finally {
              _iterator9.f();
            }

            var params = {
              unregisterations: unregistrations
            };

            this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).catch(function () {
              _this46._connection.console.info("Bulk unregistration failed.");
            });
          }
        }, {
          key: "disposeSingle",
          value: function disposeSingle(arg) {
            var _this47 = this;

            var method = Is.string(arg) ? arg : arg.method;

            var unregistration = this._unregistrations.get(method);

            if (!unregistration) {
              return false;
            }

            var params = {
              unregisterations: [unregistration]
            };

            this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(function () {
              _this47._unregistrations.delete(method);
            }, function (_error) {
              _this47._connection.console.info("Un-registering request handler for ".concat(unregistration.id, " failed."));
            });

            return true;
          }
        }]);

        return BulkUnregistrationImpl;
      }();

      var RemoteClientImpl = /*#__PURE__*/function () {
        function RemoteClientImpl() {
          _classCallCheck(this, RemoteClientImpl);
        }

        _createClass(RemoteClientImpl, [{
          key: "attach",
          value: function attach(connection2) {
            this._connection = connection2;
          }
        }, {
          key: "connection",
          get: function get() {
            if (!this._connection) {
              throw new Error("Remote is not attached to a connection yet.");
            }

            return this._connection;
          }
        }, {
          key: "initialize",
          value: function initialize(_capabilities) {}
        }, {
          key: "fillServerCapabilities",
          value: function fillServerCapabilities(_capabilities) {}
        }, {
          key: "register",
          value: function register(typeOrRegistrations, registerOptionsOrType, registerOptions) {
            if (typeOrRegistrations instanceof BulkRegistrationImpl) {
              return this.registerMany(typeOrRegistrations);
            } else if (typeOrRegistrations instanceof BulkUnregistrationImpl) {
              return this.registerSingle1(typeOrRegistrations, registerOptionsOrType, registerOptions);
            } else {
              return this.registerSingle2(typeOrRegistrations, registerOptionsOrType);
            }
          }
        }, {
          key: "registerSingle1",
          value: function registerSingle1(unregistration, type, registerOptions) {
            var _this48 = this;

            var method = Is.string(type) ? type : type.method;
            var id = UUID.generateUuid();
            var params = {
              registrations: [{
                id: id,
                method: method,
                registerOptions: registerOptions || {}
              }]
            };

            if (!unregistration.isAttached) {
              unregistration.attach(this.connection);
            }

            return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(function (_result) {
              unregistration.add({
                id: id,
                method: method
              });
              return unregistration;
            }, function (_error) {
              _this48.connection.console.info("Registering request handler for ".concat(method, " failed."));

              return Promise.reject(_error);
            });
          }
        }, {
          key: "registerSingle2",
          value: function registerSingle2(type, registerOptions) {
            var _this49 = this;

            var method = Is.string(type) ? type : type.method;
            var id = UUID.generateUuid();
            var params = {
              registrations: [{
                id: id,
                method: method,
                registerOptions: registerOptions || {}
              }]
            };
            return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(function (_result) {
              return vscode_languageserver_protocol_1.Disposable.create(function () {
                _this49.unregisterSingle(id, method).catch(function () {
                  _this49.connection.console.info("Un-registering capability with id ".concat(id, " failed."));
                });
              });
            }, function (_error) {
              _this49.connection.console.info("Registering request handler for ".concat(method, " failed."));

              return Promise.reject(_error);
            });
          }
        }, {
          key: "unregisterSingle",
          value: function unregisterSingle(id, method) {
            var _this50 = this;

            var params = {
              unregisterations: [{
                id: id,
                method: method
              }]
            };
            return this.connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).catch(function () {
              _this50.connection.console.info("Un-registering request handler for ".concat(id, " failed."));
            });
          }
        }, {
          key: "registerMany",
          value: function registerMany(registrations) {
            var _this51 = this;

            var params = registrations.asRegistrationParams();
            return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(function () {
              return new BulkUnregistrationImpl(_this51._connection, params.registrations.map(function (registration) {
                return {
                  id: registration.id,
                  method: registration.method
                };
              }));
            }, function (_error) {
              _this51.connection.console.info("Bulk registration failed.");

              return Promise.reject(_error);
            });
          }
        }]);

        return RemoteClientImpl;
      }();

      var _RemoteWorkspaceImpl = /*#__PURE__*/function () {
        function _RemoteWorkspaceImpl() {
          _classCallCheck(this, _RemoteWorkspaceImpl);
        }

        _createClass(_RemoteWorkspaceImpl, [{
          key: "attach",
          value: function attach(connection2) {
            this._connection = connection2;
          }
        }, {
          key: "connection",
          get: function get() {
            if (!this._connection) {
              throw new Error("Remote is not attached to a connection yet.");
            }

            return this._connection;
          }
        }, {
          key: "initialize",
          value: function initialize(_capabilities) {}
        }, {
          key: "fillServerCapabilities",
          value: function fillServerCapabilities(_capabilities) {}
        }, {
          key: "applyEdit",
          value: function applyEdit(paramOrEdit) {
            function isApplyWorkspaceEditParams(value) {
              return value && !!value.edit;
            }

            var params = isApplyWorkspaceEditParams(paramOrEdit) ? paramOrEdit : {
              edit: paramOrEdit
            };
            return this.connection.sendRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, params);
          }
        }]);

        return _RemoteWorkspaceImpl;
      }();

      var RemoteWorkspaceImpl = (0, fileOperations_1.FileOperationsFeature)((0, workspaceFolders_1.WorkspaceFoldersFeature)((0, configuration_1.ConfigurationFeature)(_RemoteWorkspaceImpl)));

      var TracerImpl = /*#__PURE__*/function () {
        function TracerImpl() {
          _classCallCheck(this, TracerImpl);

          this._trace = vscode_languageserver_protocol_1.Trace.Off;
        }

        _createClass(TracerImpl, [{
          key: "attach",
          value: function attach(connection2) {
            this._connection = connection2;
          }
        }, {
          key: "connection",
          get: function get() {
            if (!this._connection) {
              throw new Error("Remote is not attached to a connection yet.");
            }

            return this._connection;
          }
        }, {
          key: "initialize",
          value: function initialize(_capabilities) {}
        }, {
          key: "fillServerCapabilities",
          value: function fillServerCapabilities(_capabilities) {}
        }, {
          key: "trace",
          set: function set(value) {
            this._trace = value;
          }
        }, {
          key: "log",
          value: function log(message, verbose) {
            if (this._trace === vscode_languageserver_protocol_1.Trace.Off) {
              return;
            }

            this.connection.sendNotification(vscode_languageserver_protocol_1.LogTraceNotification.type, {
              message: message,
              verbose: this._trace === vscode_languageserver_protocol_1.Trace.Verbose ? verbose : void 0
            });
          }
        }]);

        return TracerImpl;
      }();

      var TelemetryImpl = /*#__PURE__*/function () {
        function TelemetryImpl() {
          _classCallCheck(this, TelemetryImpl);
        }

        _createClass(TelemetryImpl, [{
          key: "attach",
          value: function attach(connection2) {
            this._connection = connection2;
          }
        }, {
          key: "connection",
          get: function get() {
            if (!this._connection) {
              throw new Error("Remote is not attached to a connection yet.");
            }

            return this._connection;
          }
        }, {
          key: "initialize",
          value: function initialize(_capabilities) {}
        }, {
          key: "fillServerCapabilities",
          value: function fillServerCapabilities(_capabilities) {}
        }, {
          key: "logEvent",
          value: function logEvent(data) {
            this.connection.sendNotification(vscode_languageserver_protocol_1.TelemetryEventNotification.type, data);
          }
        }]);

        return TelemetryImpl;
      }();

      var _LanguagesImpl = /*#__PURE__*/function () {
        function _LanguagesImpl() {
          _classCallCheck(this, _LanguagesImpl);
        }

        _createClass(_LanguagesImpl, [{
          key: "attach",
          value: function attach(connection2) {
            this._connection = connection2;
          }
        }, {
          key: "connection",
          get: function get() {
            if (!this._connection) {
              throw new Error("Remote is not attached to a connection yet.");
            }

            return this._connection;
          }
        }, {
          key: "initialize",
          value: function initialize(_capabilities) {}
        }, {
          key: "fillServerCapabilities",
          value: function fillServerCapabilities(_capabilities) {}
        }, {
          key: "attachWorkDoneProgress",
          value: function attachWorkDoneProgress(params) {
            return (0, progress_1.attachWorkDone)(this.connection, params);
          }
        }, {
          key: "attachPartialResultProgress",
          value: function attachPartialResultProgress(_type, params) {
            return (0, progress_1.attachPartialResult)(this.connection, params);
          }
        }]);

        return _LanguagesImpl;
      }();

      exports._LanguagesImpl = _LanguagesImpl;
      var LanguagesImpl = (0, moniker_1.MonikerFeature)((0, linkedEditingRange_1.LinkedEditingRangeFeature)((0, semanticTokens_1.SemanticTokensFeature)((0, callHierarchy_1.CallHierarchyFeature)(_LanguagesImpl))));

      function combineConsoleFeatures(one, two) {
        return function (Base) {
          return two(one(Base));
        };
      }

      exports.combineConsoleFeatures = combineConsoleFeatures;

      function combineTelemetryFeatures(one, two) {
        return function (Base) {
          return two(one(Base));
        };
      }

      exports.combineTelemetryFeatures = combineTelemetryFeatures;

      function combineTracerFeatures(one, two) {
        return function (Base) {
          return two(one(Base));
        };
      }

      exports.combineTracerFeatures = combineTracerFeatures;

      function combineClientFeatures(one, two) {
        return function (Base) {
          return two(one(Base));
        };
      }

      exports.combineClientFeatures = combineClientFeatures;

      function combineWindowFeatures(one, two) {
        return function (Base) {
          return two(one(Base));
        };
      }

      exports.combineWindowFeatures = combineWindowFeatures;

      function combineWorkspaceFeatures(one, two) {
        return function (Base) {
          return two(one(Base));
        };
      }

      exports.combineWorkspaceFeatures = combineWorkspaceFeatures;

      function combineLanguagesFeatures(one, two) {
        return function (Base) {
          return two(one(Base));
        };
      }

      exports.combineLanguagesFeatures = combineLanguagesFeatures;

      function combineFeatures(one, two) {
        function combine(one2, two2, func) {
          if (one2 && two2) {
            return func(one2, two2);
          } else if (one2) {
            return one2;
          } else {
            return two2;
          }
        }

        var result = {
          __brand: "features",
          console: combine(one.console, two.console, combineConsoleFeatures),
          tracer: combine(one.tracer, two.tracer, combineTracerFeatures),
          telemetry: combine(one.telemetry, two.telemetry, combineTelemetryFeatures),
          client: combine(one.client, two.client, combineClientFeatures),
          window: combine(one.window, two.window, combineWindowFeatures),
          workspace: combine(one.workspace, two.workspace, combineWorkspaceFeatures)
        };
        return result;
      }

      exports.combineFeatures = combineFeatures;

      function createConnection2(connectionFactory, watchDog, factories) {
        var _arguments = arguments;
        var logger = factories && factories.console ? new (factories.console(RemoteConsoleImpl))() : new RemoteConsoleImpl();
        var connection2 = connectionFactory(logger);
        logger.rawAttach(connection2);
        var tracer = factories && factories.tracer ? new (factories.tracer(TracerImpl))() : new TracerImpl();
        var telemetry = factories && factories.telemetry ? new (factories.telemetry(TelemetryImpl))() : new TelemetryImpl();
        var client = factories && factories.client ? new (factories.client(RemoteClientImpl))() : new RemoteClientImpl();
        var remoteWindow = factories && factories.window ? new (factories.window(RemoteWindowImpl))() : new RemoteWindowImpl();
        var workspace = factories && factories.workspace ? new (factories.workspace(RemoteWorkspaceImpl))() : new RemoteWorkspaceImpl();
        var languages = factories && factories.languages ? new (factories.languages(LanguagesImpl))() : new LanguagesImpl();
        var allRemotes = [logger, tracer, telemetry, client, remoteWindow, workspace, languages];

        function asPromise(value) {
          if (value instanceof Promise) {
            return value;
          } else if (Is.thenable(value)) {
            return new Promise(function (resolve, reject) {
              value.then(function (resolved) {
                return resolve(resolved);
              }, function (error) {
                return reject(error);
              });
            });
          } else {
            return Promise.resolve(value);
          }
        }

        var shutdownHandler = void 0;
        var initializeHandler = void 0;
        var exitHandler = void 0;
        var protocolConnection = {
          listen: function listen() {
            return connection2.listen();
          },
          sendRequest: function sendRequest(type) {
            for (var _len10 = arguments.length, params = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {
              params[_key10 - 1] = arguments[_key10];
            }

            return connection2.sendRequest.apply(connection2, [Is.string(type) ? type : type.method].concat(params));
          },
          onRequest: function onRequest(type, handler) {
            return connection2.onRequest(type, handler);
          },
          sendNotification: function sendNotification(type, param) {
            var method = Is.string(type) ? type : type.method;

            if (_arguments.length === 1) {
              return connection2.sendNotification(method);
            } else {
              return connection2.sendNotification(method, param);
            }
          },
          onNotification: function onNotification(type, handler) {
            return connection2.onNotification(type, handler);
          },
          onProgress: connection2.onProgress,
          sendProgress: connection2.sendProgress,
          onInitialize: function onInitialize(handler) {
            return initializeHandler = handler;
          },
          onInitialized: function onInitialized(handler) {
            return connection2.onNotification(vscode_languageserver_protocol_1.InitializedNotification.type, handler);
          },
          onShutdown: function onShutdown(handler) {
            return shutdownHandler = handler;
          },
          onExit: function onExit(handler) {
            return exitHandler = handler;
          },

          get console() {
            return logger;
          },

          get telemetry() {
            return telemetry;
          },

          get tracer() {
            return tracer;
          },

          get client() {
            return client;
          },

          get window() {
            return remoteWindow;
          },

          get workspace() {
            return workspace;
          },

          get languages() {
            return languages;
          },

          onDidChangeConfiguration: function onDidChangeConfiguration(handler) {
            return connection2.onNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, handler);
          },
          onDidChangeWatchedFiles: function onDidChangeWatchedFiles(handler) {
            return connection2.onNotification(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type, handler);
          },
          __textDocumentSync: void 0,
          onDidOpenTextDocument: function onDidOpenTextDocument(handler) {
            return connection2.onNotification(vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, handler);
          },
          onDidChangeTextDocument: function onDidChangeTextDocument(handler) {
            return connection2.onNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, handler);
          },
          onDidCloseTextDocument: function onDidCloseTextDocument(handler) {
            return connection2.onNotification(vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type, handler);
          },
          onWillSaveTextDocument: function onWillSaveTextDocument(handler) {
            return connection2.onNotification(vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type, handler);
          },
          onWillSaveTextDocumentWaitUntil: function onWillSaveTextDocumentWaitUntil(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type, handler);
          },
          onDidSaveTextDocument: function onDidSaveTextDocument(handler) {
            return connection2.onNotification(vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type, handler);
          },
          sendDiagnostics: function sendDiagnostics(params) {
            return connection2.sendNotification(vscode_languageserver_protocol_1.PublishDiagnosticsNotification.type, params);
          },
          onHover: function onHover(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.HoverRequest.type, function (params, cancel) {
              return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), void 0);
            });
          },
          onCompletion: function onCompletion(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.CompletionRequest.type, function (params, cancel) {
              return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
            });
          },
          onCompletionResolve: function onCompletionResolve(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.CompletionResolveRequest.type, handler);
          },
          onSignatureHelp: function onSignatureHelp(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, function (params, cancel) {
              return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), void 0);
            });
          },
          onDeclaration: function onDeclaration(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.DeclarationRequest.type, function (params, cancel) {
              return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
            });
          },
          onDefinition: function onDefinition(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, function (params, cancel) {
              return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
            });
          },
          onTypeDefinition: function onTypeDefinition(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, function (params, cancel) {
              return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
            });
          },
          onImplementation: function onImplementation(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.ImplementationRequest.type, function (params, cancel) {
              return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
            });
          },
          onReferences: function onReferences(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.ReferencesRequest.type, function (params, cancel) {
              return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
            });
          },
          onDocumentHighlight: function onDocumentHighlight(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.DocumentHighlightRequest.type, function (params, cancel) {
              return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
            });
          },
          onDocumentSymbol: function onDocumentSymbol(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.DocumentSymbolRequest.type, function (params, cancel) {
              return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
            });
          },
          onWorkspaceSymbol: function onWorkspaceSymbol(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type, function (params, cancel) {
              return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
            });
          },
          onWorkspaceSymbolResolve: function onWorkspaceSymbolResolve(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.WorkspaceSymbolResolveRequest.type, handler);
          },
          onCodeAction: function onCodeAction(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, function (params, cancel) {
              return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
            });
          },
          onCodeActionResolve: function onCodeActionResolve(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.CodeActionResolveRequest.type, function (params, cancel) {
              return handler(params, cancel);
            });
          },
          onCodeLens: function onCodeLens(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.CodeLensRequest.type, function (params, cancel) {
              return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
            });
          },
          onCodeLensResolve: function onCodeLensResolve(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.CodeLensResolveRequest.type, function (params, cancel) {
              return handler(params, cancel);
            });
          },
          onDocumentFormatting: function onDocumentFormatting(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, function (params, cancel) {
              return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), void 0);
            });
          },
          onDocumentRangeFormatting: function onDocumentRangeFormatting(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, function (params, cancel) {
              return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), void 0);
            });
          },
          onDocumentOnTypeFormatting: function onDocumentOnTypeFormatting(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, function (params, cancel) {
              return handler(params, cancel);
            });
          },
          onRenameRequest: function onRenameRequest(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.RenameRequest.type, function (params, cancel) {
              return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), void 0);
            });
          },
          onPrepareRename: function onPrepareRename(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.PrepareRenameRequest.type, function (params, cancel) {
              return handler(params, cancel);
            });
          },
          onDocumentLinks: function onDocumentLinks(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, function (params, cancel) {
              return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
            });
          },
          onDocumentLinkResolve: function onDocumentLinkResolve(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, function (params, cancel) {
              return handler(params, cancel);
            });
          },
          onDocumentColor: function onDocumentColor(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, function (params, cancel) {
              return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
            });
          },
          onColorPresentation: function onColorPresentation(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, function (params, cancel) {
              return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
            });
          },
          onFoldingRanges: function onFoldingRanges(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, function (params, cancel) {
              return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
            });
          },
          onSelectionRanges: function onSelectionRanges(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.SelectionRangeRequest.type, function (params, cancel) {
              return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
            });
          },
          onExecuteCommand: function onExecuteCommand(handler) {
            return connection2.onRequest(vscode_languageserver_protocol_1.ExecuteCommandRequest.type, function (params, cancel) {
              return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), void 0);
            });
          },
          dispose: function dispose() {
            return connection2.dispose();
          }
        };

        for (var _i3 = 0, _allRemotes = allRemotes; _i3 < _allRemotes.length; _i3++) {
          var remote = _allRemotes[_i3];
          remote.attach(protocolConnection);
        }

        connection2.onRequest(vscode_languageserver_protocol_1.InitializeRequest.type, function (params) {
          watchDog.initialize(params);

          if (Is.string(params.trace)) {
            tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.trace);
          }

          var _iterator10 = _createForOfIteratorHelper(allRemotes),
              _step7;

          try {
            for (_iterator10.s(); !(_step7 = _iterator10.n()).done;) {
              var _remote3 = _step7.value;

              _remote3.initialize(params.capabilities);
            }
          } catch (err) {
            _iterator10.e(err);
          } finally {
            _iterator10.f();
          }

          if (initializeHandler) {
            var result = initializeHandler(params, new vscode_languageserver_protocol_1.CancellationTokenSource().token, (0, progress_1.attachWorkDone)(connection2, params), void 0);
            return asPromise(result).then(function (value) {
              if (value instanceof vscode_languageserver_protocol_1.ResponseError) {
                return value;
              }

              var result2 = value;

              if (!result2) {
                result2 = {
                  capabilities: {}
                };
              }

              var capabilities = result2.capabilities;

              if (!capabilities) {
                capabilities = {};
                result2.capabilities = capabilities;
              }

              if (capabilities.textDocumentSync === void 0 || capabilities.textDocumentSync === null) {
                capabilities.textDocumentSync = Is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
              } else if (!Is.number(capabilities.textDocumentSync) && !Is.number(capabilities.textDocumentSync.change)) {
                capabilities.textDocumentSync.change = Is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
              }

              var _iterator11 = _createForOfIteratorHelper(allRemotes),
                  _step8;

              try {
                for (_iterator11.s(); !(_step8 = _iterator11.n()).done;) {
                  var _remote = _step8.value;

                  _remote.fillServerCapabilities(capabilities);
                }
              } catch (err) {
                _iterator11.e(err);
              } finally {
                _iterator11.f();
              }

              return result2;
            });
          } else {
            var _result2 = {
              capabilities: {
                textDocumentSync: vscode_languageserver_protocol_1.TextDocumentSyncKind.None
              }
            };

            var _iterator12 = _createForOfIteratorHelper(allRemotes),
                _step9;

            try {
              for (_iterator12.s(); !(_step9 = _iterator12.n()).done;) {
                var _remote2 = _step9.value;

                _remote2.fillServerCapabilities(_result2.capabilities);
              }
            } catch (err) {
              _iterator12.e(err);
            } finally {
              _iterator12.f();
            }

            return _result2;
          }
        });
        connection2.onRequest(vscode_languageserver_protocol_1.ShutdownRequest.type, function () {
          watchDog.shutdownReceived = true;

          if (shutdownHandler) {
            return shutdownHandler(new vscode_languageserver_protocol_1.CancellationTokenSource().token);
          } else {
            return void 0;
          }
        });
        connection2.onNotification(vscode_languageserver_protocol_1.ExitNotification.type, function () {
          try {
            if (exitHandler) {
              exitHandler();
            }
          } finally {
            if (watchDog.shutdownReceived) {
              watchDog.exit(0);
            } else {
              watchDog.exit(1);
            }
          }
        });
        connection2.onNotification(vscode_languageserver_protocol_1.SetTraceNotification.type, function (params) {
          tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.value);
        });
        return protocolConnection;
      }

      exports.createConnection = createConnection2;
    }
  }); // server/node_modules/vscode-languageserver/lib/common/proposed.diagnostic.js


  var require_proposed_diagnostic2 = __commonJS({
    "server/node_modules/vscode-languageserver/lib/common/proposed.diagnostic.js": function serverNode_modulesVscodeLanguageserverLibCommonProposedDiagnosticJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.DiagnosticFeature = void 0;
      var vscode_languageserver_protocol_1 = require_main3();

      var DiagnosticFeature = function DiagnosticFeature(Base) {
        return /*#__PURE__*/function (_Base10) {
          _inherits(_class10, _Base10);

          var _super47 = _createSuper(_class10);

          function _class10() {
            _classCallCheck(this, _class10);

            return _super47.apply(this, arguments);
          }

          _createClass(_class10, [{
            key: "diagnostics",
            get: function get() {
              var _this52 = this;

              return {
                refresh: function refresh() {
                  return _this52.connection.sendRequest(vscode_languageserver_protocol_1.Proposed.DiagnosticRefreshRequest.type);
                },
                on: function on(handler) {
                  _this52.connection.onRequest(vscode_languageserver_protocol_1.Proposed.DocumentDiagnosticRequest.type, function (params, cancel) {
                    return handler(params, cancel, _this52.attachWorkDoneProgress(params), _this52.attachPartialResultProgress(vscode_languageserver_protocol_1.Proposed.DocumentDiagnosticRequest.partialResult, params));
                  });
                },
                onWorkspace: function onWorkspace(handler) {
                  _this52.connection.onRequest(vscode_languageserver_protocol_1.Proposed.WorkspaceDiagnosticRequest.type, function (params, cancel) {
                    return handler(params, cancel, _this52.attachWorkDoneProgress(params), _this52.attachPartialResultProgress(vscode_languageserver_protocol_1.Proposed.WorkspaceDiagnosticRequest.partialResult, params));
                  });
                }
              };
            }
          }]);

          return _class10;
        }(Base);
      };

      exports.DiagnosticFeature = DiagnosticFeature;
    }
  }); // server/node_modules/vscode-languageserver/lib/common/proposed.typeHierarchy.js


  var require_proposed_typeHierarchy2 = __commonJS({
    "server/node_modules/vscode-languageserver/lib/common/proposed.typeHierarchy.js": function serverNode_modulesVscodeLanguageserverLibCommonProposedTypeHierarchyJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.TypeHierarchyFeature = void 0;
      var vscode_languageserver_protocol_1 = require_main3();

      var TypeHierarchyFeature = function TypeHierarchyFeature(Base) {
        return /*#__PURE__*/function (_Base11) {
          _inherits(_class11, _Base11);

          var _super48 = _createSuper(_class11);

          function _class11() {
            _classCallCheck(this, _class11);

            return _super48.apply(this, arguments);
          }

          _createClass(_class11, [{
            key: "typeHierarchy",
            get: function get() {
              var _this53 = this;

              return {
                onPrepare: function onPrepare(handler) {
                  _this53.connection.onRequest(vscode_languageserver_protocol_1.Proposed.TypeHierarchyPrepareRequest.type, function (params, cancel) {
                    return handler(params, cancel, _this53.attachWorkDoneProgress(params), void 0);
                  });
                },
                onSupertypes: function onSupertypes(handler) {
                  var type = vscode_languageserver_protocol_1.Proposed.TypeHierarchySupertypesRequest.type;

                  _this53.connection.onRequest(type, function (params, cancel) {
                    return handler(params, cancel, _this53.attachWorkDoneProgress(params), _this53.attachPartialResultProgress(type, params));
                  });
                },
                onSubtypes: function onSubtypes(handler) {
                  var type = vscode_languageserver_protocol_1.Proposed.TypeHierarchySubtypesRequest.type;

                  _this53.connection.onRequest(type, function (params, cancel) {
                    return handler(params, cancel, _this53.attachWorkDoneProgress(params), _this53.attachPartialResultProgress(type, params));
                  });
                }
              };
            }
          }]);

          return _class11;
        }(Base);
      };

      exports.TypeHierarchyFeature = TypeHierarchyFeature;
    }
  }); // server/node_modules/vscode-languageserver/lib/common/proposed.inlineValues.js


  var require_proposed_inlineValues = __commonJS({
    "server/node_modules/vscode-languageserver/lib/common/proposed.inlineValues.js": function serverNode_modulesVscodeLanguageserverLibCommonProposedInlineValuesJs(exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.InlineValuesFeature = void 0;
      var vscode_languageserver_protocol_1 = require_main3();

      var InlineValuesFeature = function InlineValuesFeature(Base) {
        return /*#__PURE__*/function (_Base12) {
          _inherits(_class12, _Base12);

          var _super49 = _createSuper(_class12);

          function _class12() {
            _classCallCheck(this, _class12);

            return _super49.apply(this, arguments);
          }

          _createClass(_class12, [{
            key: "inlineValues",
            get: function get() {
              var _this54 = this;

              return {
                on: function on(handler) {
                  _this54.connection.onRequest(vscode_languageserver_protocol_1.Proposed.InlineValuesRequest.type, function (params, cancel) {
                    return handler(params, cancel, _this54.attachWorkDoneProgress(params));
                  });
                }
              };
            }
          }]);

          return _class12;
        }(Base);
      };

      exports.InlineValuesFeature = InlineValuesFeature;
    }
  }); // server/node_modules/vscode-languageserver/lib/common/api.js


  var require_api3 = __commonJS({
    "server/node_modules/vscode-languageserver/lib/common/api.js": function serverNode_modulesVscodeLanguageserverLibCommonApiJs(exports) {
      "use strict";

      var __createBinding = exports && exports.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        });
      } : function (o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });

      var __exportStar = exports && exports.__exportStar || function (m, exports2) {
        for (var p in m) {
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
        }
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ProposedFeatures = exports.SemanticTokensBuilder = void 0;
      var server_1 = require_server();
      var semanticTokens_1 = require_semanticTokens();
      Object.defineProperty(exports, "SemanticTokensBuilder", {
        enumerable: true,
        get: function get() {
          return semanticTokens_1.SemanticTokensBuilder;
        }
      });

      __exportStar(require_main3(), exports);

      __exportStar(require_server(), exports);

      var proposed_diagnostic_1 = require_proposed_diagnostic2();
      var proposed_typeHierarchy_1 = require_proposed_typeHierarchy2();
      var proposed_inlineValues_1 = require_proposed_inlineValues();
      var ProposedFeatures;

      (function (ProposedFeatures2) {
        ProposedFeatures2.all = {
          __brand: "features",
          languages: (0, server_1.combineLanguagesFeatures)(proposed_inlineValues_1.InlineValuesFeature, (0, server_1.combineLanguagesFeatures)(proposed_typeHierarchy_1.TypeHierarchyFeature, proposed_diagnostic_1.DiagnosticFeature))
        };
      })(ProposedFeatures = exports.ProposedFeatures || (exports.ProposedFeatures = {}));
    }
  }); // server/node_modules/vscode-languageserver-protocol/browser.js


  var require_browser2 = __commonJS({
    "server/node_modules/vscode-languageserver-protocol/browser.js": function serverNode_modulesVscodeLanguageserverProtocolBrowserJs(exports, module) {
      "use strict";

      module.exports = require_main3();
    }
  }); // server/node_modules/vscode-languageserver/lib/browser/main.js


  var require_main4 = __commonJS({
    "server/node_modules/vscode-languageserver/lib/browser/main.js": function serverNode_modulesVscodeLanguageserverLibBrowserMainJs(exports) {
      "use strict";

      var __createBinding = exports && exports.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        });
      } : function (o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });

      var __exportStar = exports && exports.__exportStar || function (m, exports2) {
        for (var p in m) {
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
        }
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createConnection = void 0;
      var api_1 = require_api3();

      __exportStar(require_browser2(), exports);

      __exportStar(require_api3(), exports);

      var _shutdownReceived = false;
      var watchDog = {
        initialize: function initialize(_params) {},

        get shutdownReceived() {
          return _shutdownReceived;
        },

        set shutdownReceived(value) {
          _shutdownReceived = value;
        },

        exit: function exit(_code) {}
      };

      function createConnection2(arg1, arg2, arg3, arg4) {
        var factories;
        var reader;
        var writer;
        var options;

        if (arg1 !== void 0 && arg1.__brand === "features") {
          factories = arg1;
          arg1 = arg2;
          arg2 = arg3;
          arg3 = arg4;
        }

        if (api_1.ConnectionStrategy.is(arg1) || api_1.ConnectionOptions.is(arg1)) {
          options = arg1;
        } else {
          reader = arg1;
          writer = arg2;
          options = arg3;
        }

        var connectionFactory = function connectionFactory(logger) {
          return (0, api_1.createProtocolConnection)(reader, writer, logger, options);
        };

        return (0, api_1.createConnection)(connectionFactory, watchDog, factories);
      }

      exports.createConnection = createConnection2;
    }
  }); // server/node_modules/vscode-languageserver/browser.js


  var require_browser3 = __commonJS({
    "server/node_modules/vscode-languageserver/browser.js": function serverNode_modulesVscodeLanguageserverBrowserJs(exports, module) {
      "use strict";

      module.exports = require_main4();
    }
  }); // server/node_modules/web-tree-sitter/tree-sitter.js


  var require_tree_sitter = __commonJS({
    "server/node_modules/web-tree-sitter/tree-sitter.js": function serverNode_modulesWebTreeSitterTreeSitterJs(exports, module) {
      var Module = Module !== void 0 ? Module : {};

      var TreeSitter = function () {
        var e,
            t = (typeof window === "undefined" ? "undefined" : _typeof(window)) == "object" ? {
          currentScript: window.document.currentScript
        } : null;

        var Parser4 = /*#__PURE__*/function () {
          function Parser4() {
            _classCallCheck(this, Parser4);

            this.initialize();
          }

          _createClass(Parser4, [{
            key: "initialize",
            value: function initialize() {
              throw new Error("cannot construct a Parser before calling `init()`");
            }
          }], [{
            key: "init",
            value: function init(r) {
              var _arguments2 = arguments;
              return e || (Module = Object.assign({}, Module, r), e = new Promise(function (e2) {
                var r2,
                    n = {};

                for (r2 in Module) {
                  Module.hasOwnProperty(r2) && (n[r2] = Module[r2]);
                }

                var s,
                    o,
                    _ = [],
                    a = "./this.program",
                    u = function u(e3, t2) {
                  throw t2;
                },
                    i = false,
                    l = false;

                i = (typeof window === "undefined" ? "undefined" : _typeof(window)) == "object", l = typeof importScripts == "function", s = (typeof process === "undefined" ? "undefined" : _typeof(process)) == "object" && _typeof(process.versions) == "object" && typeof process.versions.node == "string", o = !i && !s && !l;
                var d,
                    c,
                    m,
                    f,
                    p,
                    h = "";
                s ? (h = l ? __require("path").dirname(h) + "/" : __dirname + "/", d = function d(e3, t2) {
                  return f || (f = __require("fs")), p || (p = __require("path")), e3 = p.normalize(e3), f.readFileSync(e3, t2 ? null : "utf8");
                }, m = function m(e3) {
                  var t2 = d(e3, true);
                  return t2.buffer || (t2 = new Uint8Array(t2)), k(t2.buffer), t2;
                }, process.argv.length > 1 && (a = process.argv[1].replace(/\\/g, "/")), _ = process.argv.slice(2), typeof module != "undefined" && (module.exports = Module), u = function u(e3) {
                  process.exit(e3);
                }, Module.inspect = function () {
                  return "[Emscripten Module object]";
                }) : o ? (typeof read != "undefined" && (d = function d(e3) {
                  return read(e3);
                }), m = function m(e3) {
                  var t2;
                  return typeof readbuffer == "function" ? new Uint8Array(readbuffer(e3)) : (k(_typeof(t2 = read(e3, "binary")) == "object"), t2);
                }, typeof scriptArgs != "undefined" ? _ = scriptArgs : _arguments2 !== void 0 && (_ = _arguments2), typeof quit == "function" && (u = function u(e3) {
                  quit(e3);
                }), typeof print != "undefined" && (typeof console == "undefined" && (console = {}), console.log = print, console.warn = console.error = typeof printErr != "undefined" ? printErr : print)) : (i || l) && (l ? h = self.location.href : t !== void 0 && t.currentScript && (h = t.currentScript.src), h = h.indexOf("blob:") !== 0 ? h.substr(0, h.lastIndexOf("/") + 1) : "", d = function d(e3) {
                  var t2 = new XMLHttpRequest();
                  return t2.open("GET", e3, false), t2.send(null), t2.responseText;
                }, l && (m = function m(e3) {
                  var t2 = new XMLHttpRequest();
                  return t2.open("GET", e3, false), t2.responseType = "arraybuffer", t2.send(null), new Uint8Array(t2.response);
                }), c = function c(e3, t2, r3) {
                  var n2 = new XMLHttpRequest();
                  n2.open("GET", e3, true), n2.responseType = "arraybuffer", n2.onload = function () {
                    n2.status == 200 || n2.status == 0 && n2.response ? t2(n2.response) : r3();
                  }, n2.onerror = r3, n2.send(null);
                });
                Module.print || console.log.bind(console);
                var g = Module.printErr || console.warn.bind(console);

                for (r2 in n) {
                  n.hasOwnProperty(r2) && (Module[r2] = n[r2]);
                }

                n = null, Module.arguments && (_ = Module.arguments), Module.thisProgram && (a = Module.thisProgram), Module.quit && (u = Module.quit);
                var w = 16;
                var y,
                    M = [];

                function b(e3, t2) {
                  if (!y) {
                    y = new WeakMap();

                    for (var r3 = 0; r3 < K.length; r3++) {
                      var n2 = K.get(r3);
                      n2 && y.set(n2, r3);
                    }
                  }

                  if (y.has(e3)) return y.get(e3);

                  var s2 = function () {
                    if (M.length) return M.pop();

                    try {
                      K.grow(1);
                    } catch (e4) {
                      if (!(e4 instanceof RangeError)) throw e4;
                      throw "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";
                    }

                    return K.length - 1;
                  }();

                  try {
                    K.set(s2, e3);
                  } catch (r4) {
                    if (!(r4 instanceof TypeError)) throw r4;

                    var o2 = function (e4, t3) {
                      if (typeof WebAssembly.Function == "function") {
                        for (var r5 = {
                          i: "i32",
                          j: "i64",
                          f: "f32",
                          d: "f64"
                        }, n3 = {
                          parameters: [],
                          results: t3[0] == "v" ? [] : [r5[t3[0]]]
                        }, s3 = 1; s3 < t3.length; ++s3) {
                          n3.parameters.push(r5[t3[s3]]);
                        }

                        return new WebAssembly.Function(n3, e4);
                      }

                      var o3 = [1, 0, 1, 96],
                          _2 = t3.slice(0, 1),
                          a2 = t3.slice(1),
                          u2 = {
                        i: 127,
                        j: 126,
                        f: 125,
                        d: 124
                      };

                      for (o3.push(a2.length), s3 = 0; s3 < a2.length; ++s3) {
                        o3.push(u2[a2[s3]]);
                      }

                      _2 == "v" ? o3.push(0) : o3 = o3.concat([1, u2[_2]]), o3[1] = o3.length - 2;
                      var i2 = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0].concat(o3, [2, 7, 1, 1, 101, 1, 102, 0, 0, 7, 5, 1, 1, 102, 0, 0])),
                          l2 = new WebAssembly.Module(i2);
                      return new WebAssembly.Instance(l2, {
                        e: {
                          f: e4
                        }
                      }).exports.f;
                    }(e3, t2);

                    K.set(s2, o2);
                  }

                  return y.set(e3, s2), s2;
                }

                var v,
                    E = function E(e3) {
                  e3;
                },
                    I = Module.dynamicLibraries || [];

                Module.wasmBinary && (v = Module.wasmBinary);
                var A,
                    S = Module.noExitRuntime || true;

                function x(e3, t2, r3, n2) {
                  switch ((r3 = r3 || "i8").charAt(r3.length - 1) === "*" && (r3 = "i32"), r3) {
                    case "i1":
                    case "i8":
                      R[e3 >> 0] = t2;
                      break;

                    case "i16":
                      L[e3 >> 1] = t2;
                      break;

                    case "i32":
                      W[e3 >> 2] = t2;
                      break;

                    case "i64":
                      ue = [t2 >>> 0, (ae = t2, +Math.abs(ae) >= 1 ? ae > 0 ? (0 | Math.min(+Math.floor(ae / 4294967296), 4294967295)) >>> 0 : ~~+Math.ceil((ae - +(~~ae >>> 0)) / 4294967296) >>> 0 : 0)], W[e3 >> 2] = ue[0], W[e3 + 4 >> 2] = ue[1];
                      break;

                    case "float":
                      O[e3 >> 2] = t2;
                      break;

                    case "double":
                      Z[e3 >> 3] = t2;
                      break;

                    default:
                      oe("invalid type for setValue: " + r3);
                  }
                }

                function N(e3, t2, r3) {
                  switch ((t2 = t2 || "i8").charAt(t2.length - 1) === "*" && (t2 = "i32"), t2) {
                    case "i1":
                    case "i8":
                      return R[e3 >> 0];

                    case "i16":
                      return L[e3 >> 1];

                    case "i32":
                    case "i64":
                      return W[e3 >> 2];

                    case "float":
                      return O[e3 >> 2];

                    case "double":
                      return Z[e3 >> 3];

                    default:
                      oe("invalid type for getValue: " + t2);
                  }

                  return null;
                }

                (typeof WebAssembly === "undefined" ? "undefined" : _typeof(WebAssembly)) != "object" && oe("no native wasm support detected");
                var P = false;

                function k(e3, t2) {
                  e3 || oe("Assertion failed: " + t2);
                }

                var C = 1;
                var q,
                    R,
                    T,
                    L,
                    W,
                    O,
                    Z,
                    F = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : void 0;

                function $(e3, t2, r3) {
                  for (var n2 = t2 + r3, s2 = t2; e3[s2] && !(s2 >= n2);) {
                    ++s2;
                  }

                  if (s2 - t2 > 16 && e3.subarray && F) return F.decode(e3.subarray(t2, s2));

                  for (var o2 = ""; t2 < s2;) {
                    var _2 = e3[t2++];

                    if (128 & _2) {
                      var a2 = 63 & e3[t2++];

                      if ((224 & _2) != 192) {
                        var u2 = 63 & e3[t2++];
                        if ((_2 = (240 & _2) == 224 ? (15 & _2) << 12 | a2 << 6 | u2 : (7 & _2) << 18 | a2 << 12 | u2 << 6 | 63 & e3[t2++]) < 65536) o2 += String.fromCharCode(_2);else {
                          var i2 = _2 - 65536;
                          o2 += String.fromCharCode(55296 | i2 >> 10, 56320 | 1023 & i2);
                        }
                      } else o2 += String.fromCharCode((31 & _2) << 6 | a2);
                    } else o2 += String.fromCharCode(_2);
                  }

                  return o2;
                }

                function j(e3, t2) {
                  return e3 ? $(T, e3, t2) : "";
                }

                function U(e3, t2, r3, n2) {
                  if (!(n2 > 0)) return 0;

                  for (var s2 = r3, o2 = r3 + n2 - 1, _2 = 0; _2 < e3.length; ++_2) {
                    var a2 = e3.charCodeAt(_2);
                    if (a2 >= 55296 && a2 <= 57343) a2 = 65536 + ((1023 & a2) << 10) | 1023 & e3.charCodeAt(++_2);

                    if (a2 <= 127) {
                      if (r3 >= o2) break;
                      t2[r3++] = a2;
                    } else if (a2 <= 2047) {
                      if (r3 + 1 >= o2) break;
                      t2[r3++] = 192 | a2 >> 6, t2[r3++] = 128 | 63 & a2;
                    } else if (a2 <= 65535) {
                      if (r3 + 2 >= o2) break;
                      t2[r3++] = 224 | a2 >> 12, t2[r3++] = 128 | a2 >> 6 & 63, t2[r3++] = 128 | 63 & a2;
                    } else {
                      if (r3 + 3 >= o2) break;
                      t2[r3++] = 240 | a2 >> 18, t2[r3++] = 128 | a2 >> 12 & 63, t2[r3++] = 128 | a2 >> 6 & 63, t2[r3++] = 128 | 63 & a2;
                    }
                  }

                  return t2[r3] = 0, r3 - s2;
                }

                function D(e3, t2, r3) {
                  return U(e3, T, t2, r3);
                }

                function z(e3) {
                  for (var t2 = 0, r3 = 0; r3 < e3.length; ++r3) {
                    var n2 = e3.charCodeAt(r3);
                    n2 >= 55296 && n2 <= 57343 && (n2 = 65536 + ((1023 & n2) << 10) | 1023 & e3.charCodeAt(++r3)), n2 <= 127 ? ++t2 : t2 += n2 <= 2047 ? 2 : n2 <= 65535 ? 3 : 4;
                  }

                  return t2;
                }

                function G(e3) {
                  var t2 = z(e3) + 1,
                      r3 = ze(t2);
                  return U(e3, R, r3, t2), r3;
                }

                function H(e3) {
                  q = e3, Module.HEAP8 = R = new Int8Array(e3), Module.HEAP16 = L = new Int16Array(e3), Module.HEAP32 = W = new Int32Array(e3), Module.HEAPU8 = T = new Uint8Array(e3), Module.HEAPU16 = new Uint16Array(e3), Module.HEAPU32 = new Uint32Array(e3), Module.HEAPF32 = O = new Float32Array(e3), Module.HEAPF64 = Z = new Float64Array(e3);
                }

                var B = Module.INITIAL_MEMORY || 33554432;
                (A = Module.wasmMemory ? Module.wasmMemory : new WebAssembly.Memory({
                  initial: B / 65536,
                  maximum: 32768
                })) && (q = A.buffer), B = q.byteLength, H(q);
                var K = new WebAssembly.Table({
                  initial: 17,
                  element: "anyfunc"
                }),
                    V = [],
                    X = [],
                    Q = [],
                    J = [],
                    Y = false;
                var ee = 0,
                    te = null,
                    re = null;

                function ne(e3) {
                  ee++, Module.monitorRunDependencies && Module.monitorRunDependencies(ee);
                }

                function se(e3) {
                  if (ee--, Module.monitorRunDependencies && Module.monitorRunDependencies(ee), ee == 0 && (te !== null && (clearInterval(te), te = null), re)) {
                    var t2 = re;
                    re = null, t2();
                  }
                }

                function oe(e3) {
                  throw Module.onAbort && Module.onAbort(e3), g(e3 += ""), P = true, 1, e3 = "abort(" + e3 + "). Build with -s ASSERTIONS=1 for more info.", new WebAssembly.RuntimeError(e3);
                }

                Module.preloadedImages = {}, Module.preloadedAudios = {}, Module.preloadedWasm = {};

                var _e,
                    ae,
                    ue,
                    ie = "data:application/octet-stream;base64,";

                function le(e3) {
                  return e3.startsWith(ie);
                }

                function de(e3) {
                  return e3.startsWith("file://");
                }

                function ce(e3) {
                  try {
                    if (e3 == _e && v) return new Uint8Array(v);
                    if (m) return m(e3);
                    throw "both async and sync fetching of the wasm failed";
                  } catch (e4) {
                    oe(e4);
                  }
                }

                le(_e = "tree-sitter.wasm") || (_e = function (e3) {
                  return Module.locateFile ? Module.locateFile(e3, h) : h + e3;
                }(_e));
                var me = {},
                    fe = {
                  get: function get(e3, t2) {
                    return me[t2] || (me[t2] = new WebAssembly.Global({
                      value: "i32",
                      mutable: true
                    })), me[t2];
                  }
                };

                function pe(e3) {
                  for (; e3.length > 0;) {
                    var t2 = e3.shift();

                    if (typeof t2 != "function") {
                      var r3 = t2.func;
                      typeof r3 == "number" ? t2.arg === void 0 ? K.get(r3)() : K.get(r3)(t2.arg) : r3(t2.arg === void 0 ? null : t2.arg);
                    } else t2(Module);
                  }
                }

                function he(e3) {
                  var t2 = 0;

                  function r3() {
                    for (var r4 = 0, n3 = 1;;) {
                      var s3 = e3[t2++];
                      if (r4 += (127 & s3) * n3, n3 *= 128, !(128 & s3)) break;
                    }

                    return r4;
                  }

                  if (e3 instanceof WebAssembly.Module) {
                    var n2 = WebAssembly.Module.customSections(e3, "dylink");
                    k(n2.length != 0, "need dylink section"), e3 = new Int8Array(n2[0]);
                  } else {
                    k(new Uint32Array(new Uint8Array(e3.subarray(0, 24)).buffer)[0] == 1836278016, "need to see wasm magic number"), k(e3[8] === 0, "need the dylink section to be first"), t2 = 9, r3(), k(e3[t2] === 6), k(e3[++t2] === "d".charCodeAt(0)), k(e3[++t2] === "y".charCodeAt(0)), k(e3[++t2] === "l".charCodeAt(0)), k(e3[++t2] === "i".charCodeAt(0)), k(e3[++t2] === "n".charCodeAt(0)), k(e3[++t2] === "k".charCodeAt(0)), t2++;
                  }

                  var s2 = {};
                  s2.memorySize = r3(), s2.memoryAlign = r3(), s2.tableSize = r3(), s2.tableAlign = r3();
                  var o2 = r3();
                  s2.neededDynlibs = [];

                  for (var _2 = 0; _2 < o2; ++_2) {
                    var a2 = r3(),
                        u2 = e3.subarray(t2, t2 + a2);
                    t2 += a2;
                    var i2 = $(u2, 0);
                    s2.neededDynlibs.push(i2);
                  }

                  return s2;
                }

                var ge = 0;

                function we() {
                  return S || ge > 0;
                }

                function ye(e3) {
                  return e3.indexOf("dynCall_") == 0 || ["stackAlloc", "stackSave", "stackRestore"].includes(e3) ? e3 : "_" + e3;
                }

                function Me(e3, t2) {
                  for (var r3 in e3) {
                    if (e3.hasOwnProperty(r3)) {
                      Fe.hasOwnProperty(r3) || (Fe[r3] = e3[r3]);
                      var n2 = ye(r3);
                      Module.hasOwnProperty(n2) || (Module[n2] = e3[r3]);
                    }
                  }
                }

                var be = {
                  nextHandle: 1,
                  loadedLibs: {},
                  loadedLibNames: {}
                };

                function ve(e3, t2, r3) {
                  return e3.includes("j") ? function (e4, t3, r4) {
                    var n2 = Module["dynCall_" + e4];
                    return r4 && r4.length ? n2.apply(null, [t3].concat(r4)) : n2.call(null, t3);
                  }(e3, t2, r3) : K.get(t2).apply(null, r3);
                }

                var Ee = 5250880;

                function Ie(e3) {
                  return ["__cpp_exception", "__wasm_apply_data_relocs", "__dso_handle", "__set_stack_limits"].includes(e3);
                }

                function Ae(e3, t2) {
                  var r3 = {};

                  for (var n2 in e3) {
                    var s2 = e3[n2];
                    _typeof(s2) == "object" && (s2 = s2.value), typeof s2 == "number" && (s2 += t2), r3[n2] = s2;
                  }

                  return function (e4) {
                    for (var t3 in e4) {
                      if (!Ie(t3)) {
                        var r4 = false,
                            n3 = e4[t3];
                        t3.startsWith("orig$") && (t3 = t3.split("$")[1], r4 = true), me[t3] || (me[t3] = new WebAssembly.Global({
                          value: "i32",
                          mutable: true
                        })), (r4 || me[t3].value == 0) && (typeof n3 == "function" ? me[t3].value = b(n3) : typeof n3 == "number" ? me[t3].value = n3 : g("unhandled export type for `" + t3 + "`: " + _typeof(n3)));
                      }
                    }
                  }(r3), r3;
                }

                function Se(e3, t2) {
                  var r3, n2;
                  return t2 && (r3 = Fe["orig$" + e3]), r3 || (r3 = Fe[e3]), r3 || (r3 = Module[ye(e3)]), !r3 && e3.startsWith("invoke_") && (n2 = e3.split("_")[1], r3 = function r3() {
                    var e4 = Ue();

                    try {
                      return ve(n2, arguments[0], Array.prototype.slice.call(arguments, 1));
                    } catch (t3) {
                      if (De(e4), t3 !== t3 + 0 && t3 !== "longjmp") throw t3;
                      Ge(1, 0);
                    }
                  }), r3;
                }

                function xe(e3, t2) {
                  var r3 = he(e3);

                  function n2() {
                    var n3 = Math.pow(2, r3.memoryAlign);
                    n3 = Math.max(n3, w);

                    var s2,
                        o2,
                        _2,
                        a2 = (s2 = function (e4) {
                      if (Y) return $e(e4);
                      var t3 = Ee,
                          r4 = t3 + e4 + 15 & -16;
                      return Ee = r4, me.__heap_base.value = r4, t3;
                    }(r3.memorySize + n3), (o2 = n3) || (o2 = w), Math.ceil(s2 / o2) * o2),
                        u2 = K.length;

                    K.grow(r3.tableSize);

                    for (var i2 = a2; i2 < a2 + r3.memorySize; i2++) {
                      R[i2] = 0;
                    }

                    for (i2 = u2; i2 < u2 + r3.tableSize; i2++) {
                      K.set(i2, null);
                    }

                    var l2 = new Proxy({}, {
                      get: function get(e4, t3) {
                        switch (t3) {
                          case "__memory_base":
                            return a2;

                          case "__table_base":
                            return u2;
                        }

                        if (t3 in Fe) return Fe[t3];
                        var r4;
                        t3 in e4 || (e4[t3] = function () {
                          return r4 || (r4 = function (e5) {
                            var t4 = Se(e5, false);
                            return t4 || (t4 = _2[e5]), t4;
                          }(t3)), r4.apply(null, arguments);
                        });
                        return e4[t3];
                      }
                    }),
                        d2 = {
                      "GOT.mem": new Proxy({}, fe),
                      "GOT.func": new Proxy({}, fe),
                      env: l2,
                      wasi_snapshot_preview1: l2
                    };

                    function c2(e4) {
                      for (var n4 = 0; n4 < r3.tableSize; n4++) {
                        var s3 = K.get(u2 + n4);
                        s3 && y.set(s3, u2 + n4);
                      }

                      _2 = Ae(e4.exports, a2), t2.allowUndefined || Pe();
                      var o3 = _2.__wasm_call_ctors;
                      return o3 || (o3 = _2.__post_instantiate), o3 && (Y ? o3() : X.push(o3)), _2;
                    }

                    if (t2.loadAsync) {
                      if (e3 instanceof WebAssembly.Module) {
                        var m2 = new WebAssembly.Instance(e3, d2);
                        return Promise.resolve(c2(m2));
                      }

                      return WebAssembly.instantiate(e3, d2).then(function (e4) {
                        return c2(e4.instance);
                      });
                    }

                    var f2 = e3 instanceof WebAssembly.Module ? e3 : new WebAssembly.Module(e3);
                    return c2(m2 = new WebAssembly.Instance(f2, d2));
                  }

                  return t2.loadAsync ? r3.neededDynlibs.reduce(function (e4, r4) {
                    return e4.then(function () {
                      return Ne(r4, t2);
                    });
                  }, Promise.resolve()).then(function () {
                    return n2();
                  }) : (r3.neededDynlibs.forEach(function (e4) {
                    Ne(e4, t2);
                  }), n2());
                }

                function Ne(e3, t2) {
                  e3 != "__main__" || be.loadedLibNames[e3] || (be.loadedLibs[-1] = {
                    refcount: 1 / 0,
                    name: "__main__",
                    module: Module.asm,
                    global: true
                  }, be.loadedLibNames.__main__ = -1), t2 = t2 || {
                    global: true,
                    nodelete: true
                  };
                  var r3,
                      n2 = be.loadedLibNames[e3];
                  if (n2) return r3 = be.loadedLibs[n2], t2.global && !r3.global && (r3.global = true, r3.module !== "loading" && Me(r3.module)), t2.nodelete && r3.refcount !== 1 / 0 && (r3.refcount = 1 / 0), r3.refcount++, t2.loadAsync ? Promise.resolve(n2) : n2;

                  function s2(e4) {
                    if (t2.fs) {
                      var r4 = t2.fs.readFile(e4, {
                        encoding: "binary"
                      });
                      return r4 instanceof Uint8Array || (r4 = new Uint8Array(r4)), t2.loadAsync ? Promise.resolve(r4) : r4;
                    }

                    return t2.loadAsync ? (n3 = e4, fetch(n3, {
                      credentials: "same-origin"
                    }).then(function (e5) {
                      if (!e5.ok) throw "failed to load binary file at '" + n3 + "'";
                      return e5.arrayBuffer();
                    }).then(function (e5) {
                      return new Uint8Array(e5);
                    })) : m(e4);
                    var n3;
                  }

                  function o2() {
                    if (Module.preloadedWasm !== void 0 && Module.preloadedWasm[e3] !== void 0) {
                      var r4 = Module.preloadedWasm[e3];
                      return t2.loadAsync ? Promise.resolve(r4) : r4;
                    }

                    return t2.loadAsync ? s2(e3).then(function (e4) {
                      return xe(e4, t2);
                    }) : xe(s2(e3), t2);
                  }

                  function _2(e4) {
                    r3.global && Me(e4), r3.module = e4;
                  }

                  return n2 = be.nextHandle++, r3 = {
                    refcount: t2.nodelete ? 1 / 0 : 1,
                    name: e3,
                    module: "loading",
                    global: t2.global
                  }, be.loadedLibNames[e3] = n2, be.loadedLibs[n2] = r3, t2.loadAsync ? o2().then(function (e4) {
                    return _2(e4), n2;
                  }) : (_2(o2()), n2);
                }

                function Pe() {
                  for (var e3 in me) {
                    if (me[e3].value == 0) {
                      var t2 = Se(e3, true);
                      typeof t2 == "function" ? me[e3].value = b(t2, t2.sig) : typeof t2 == "number" ? me[e3].value = t2 : k(false, "bad export type for `" + e3 + "`: " + _typeof(t2));
                    }
                  }
                }

                Module.___heap_base = Ee;
                var ke,
                    Ce = new WebAssembly.Global({
                  value: "i32",
                  mutable: true
                }, 5250880);

                function qe() {
                  oe();
                }

                Module._abort = qe, qe.sig = "v", ke = s ? function () {
                  var e3 = process.hrtime();
                  return 1e3 * e3[0] + e3[1] / 1e6;
                } : typeof dateNow != "undefined" ? dateNow : function () {
                  return performance.now();
                };
                var Re = true;

                function Te(e3, t2) {
                  var r3, n2;
                  if (e3 === 0) r3 = Date.now();else {
                    if (e3 !== 1 && e3 !== 4 || !Re) return n2 = 28, W[je() >> 2] = n2, -1;
                    r3 = ke();
                  }
                  return W[t2 >> 2] = r3 / 1e3 | 0, W[t2 + 4 >> 2] = r3 % 1e3 * 1e3 * 1e3 | 0, 0;
                }

                function Le(e3) {
                  try {
                    return A.grow(e3 - q.byteLength + 65535 >>> 16), H(A.buffer), 1;
                  } catch (e4) {}
                }

                function We(e3) {
                  Ve(e3);
                }

                function Oe(e3) {
                  E(e3);
                }

                Te.sig = "iii", We.sig = "vi", Oe.sig = "vi";

                var Ze,
                    Fe = {
                  __heap_base: Ee,
                  __indirect_function_table: K,
                  __memory_base: 1024,
                  __stack_pointer: Ce,
                  __table_base: 1,
                  abort: qe,
                  clock_gettime: Te,
                  emscripten_memcpy_big: function emscripten_memcpy_big(e3, t2, r3) {
                    T.copyWithin(e3, t2, t2 + r3);
                  },
                  emscripten_resize_heap: function emscripten_resize_heap(e3) {
                    var t2,
                        r3,
                        n2 = T.length;
                    if ((e3 >>>= 0) > 2147483648) return false;

                    for (var s2 = 1; s2 <= 4; s2 *= 2) {
                      var o2 = n2 * (1 + 0.2 / s2);
                      if (o2 = Math.min(o2, e3 + 100663296), Le(Math.min(2147483648, ((t2 = Math.max(e3, o2)) % (r3 = 65536) > 0 && (t2 += r3 - t2 % r3), t2)))) return true;
                    }

                    return false;
                  },
                  exit: We,
                  memory: A,
                  setTempRet0: Oe,
                  tree_sitter_log_callback: function tree_sitter_log_callback(e3, t2) {
                    if (ct) {
                      var r3 = j(t2);
                      ct(r3, e3 !== 0);
                    }
                  },
                  tree_sitter_parse_callback: function tree_sitter_parse_callback(e3, t2, r3, n2, s2) {
                    var o2 = dt(t2, {
                      row: r3,
                      column: n2
                    });
                    typeof o2 == "string" ? (x(s2, o2.length, "i32"), function (e4, t3, r4) {
                      if (r4 === void 0 && (r4 = 2147483647), r4 < 2) return 0;

                      for (var n3 = (r4 -= 2) < 2 * e4.length ? r4 / 2 : e4.length, s3 = 0; s3 < n3; ++s3) {
                        var o3 = e4.charCodeAt(s3);
                        L[t3 >> 1] = o3, t3 += 2;
                      }

                      L[t3 >> 1] = 0;
                    }(o2, e3, 10240)) : x(s2, 0, "i32");
                  }
                },
                    $e = (function () {
                  var e3 = {
                    env: Fe,
                    wasi_snapshot_preview1: Fe,
                    "GOT.mem": new Proxy(Fe, fe),
                    "GOT.func": new Proxy(Fe, fe)
                  };

                  function t2(e4, t3) {
                    var r4 = e4.exports;
                    r4 = Ae(r4, 1024), Module.asm = r4;
                    var n3,
                        s2 = he(t3);
                    s2.neededDynlibs && (I = s2.neededDynlibs.concat(I)), Me(r4), n3 = Module.asm.__wasm_call_ctors, X.unshift(n3), se();
                  }

                  function r3(e4) {
                    t2(e4.instance, e4.module);
                  }

                  function n2(t3) {
                    return function () {
                      if (!v && (i || l)) {
                        if (typeof fetch == "function" && !de(_e)) return fetch(_e, {
                          credentials: "same-origin"
                        }).then(function (e4) {
                          if (!e4.ok) throw "failed to load wasm binary file at '" + _e + "'";
                          return e4.arrayBuffer();
                        }).catch(function () {
                          return ce(_e);
                        });
                        if (c) return new Promise(function (e4, t4) {
                          c(_e, function (t5) {
                            e4(new Uint8Array(t5));
                          }, t4);
                        });
                      }

                      return Promise.resolve().then(function () {
                        return ce(_e);
                      });
                    }().then(function (t4) {
                      return WebAssembly.instantiate(t4, e3);
                    }).then(t3, function (e4) {
                      g("failed to asynchronously prepare wasm: " + e4), oe(e4);
                    });
                  }

                  if (ne(), Module.instantiateWasm) try {
                    return Module.instantiateWasm(e3, t2);
                  } catch (e4) {
                    return g("Module.instantiateWasm callback failed with error: " + e4), false;
                  }
                  v || typeof WebAssembly.instantiateStreaming != "function" || le(_e) || de(_e) || typeof fetch != "function" ? n2(r3) : fetch(_e, {
                    credentials: "same-origin"
                  }).then(function (t3) {
                    return WebAssembly.instantiateStreaming(t3, e3).then(r3, function (e4) {
                      return g("wasm streaming compile failed: " + e4), g("falling back to ArrayBuffer instantiation"), n2(r3);
                    });
                  });
                }(), Module.___wasm_call_ctors = function () {
                  return (Module.___wasm_call_ctors = Module.asm.__wasm_call_ctors).apply(null, arguments);
                }, Module._malloc = function () {
                  return ($e = Module._malloc = Module.asm.malloc).apply(null, arguments);
                }),
                    je = (Module._calloc = function () {
                  return (Module._calloc = Module.asm.calloc).apply(null, arguments);
                }, Module._realloc = function () {
                  return (Module._realloc = Module.asm.realloc).apply(null, arguments);
                }, Module._free = function () {
                  return (Module._free = Module.asm.free).apply(null, arguments);
                }, Module._ts_language_symbol_count = function () {
                  return (Module._ts_language_symbol_count = Module.asm.ts_language_symbol_count).apply(null, arguments);
                }, Module._ts_language_version = function () {
                  return (Module._ts_language_version = Module.asm.ts_language_version).apply(null, arguments);
                }, Module._ts_language_field_count = function () {
                  return (Module._ts_language_field_count = Module.asm.ts_language_field_count).apply(null, arguments);
                }, Module._ts_language_symbol_name = function () {
                  return (Module._ts_language_symbol_name = Module.asm.ts_language_symbol_name).apply(null, arguments);
                }, Module._ts_language_symbol_for_name = function () {
                  return (Module._ts_language_symbol_for_name = Module.asm.ts_language_symbol_for_name).apply(null, arguments);
                }, Module._ts_language_symbol_type = function () {
                  return (Module._ts_language_symbol_type = Module.asm.ts_language_symbol_type).apply(null, arguments);
                }, Module._ts_language_field_name_for_id = function () {
                  return (Module._ts_language_field_name_for_id = Module.asm.ts_language_field_name_for_id).apply(null, arguments);
                }, Module._memcpy = function () {
                  return (Module._memcpy = Module.asm.memcpy).apply(null, arguments);
                }, Module._ts_parser_delete = function () {
                  return (Module._ts_parser_delete = Module.asm.ts_parser_delete).apply(null, arguments);
                }, Module._ts_parser_reset = function () {
                  return (Module._ts_parser_reset = Module.asm.ts_parser_reset).apply(null, arguments);
                }, Module._ts_parser_set_language = function () {
                  return (Module._ts_parser_set_language = Module.asm.ts_parser_set_language).apply(null, arguments);
                }, Module._ts_parser_timeout_micros = function () {
                  return (Module._ts_parser_timeout_micros = Module.asm.ts_parser_timeout_micros).apply(null, arguments);
                }, Module._ts_parser_set_timeout_micros = function () {
                  return (Module._ts_parser_set_timeout_micros = Module.asm.ts_parser_set_timeout_micros).apply(null, arguments);
                }, Module._memmove = function () {
                  return (Module._memmove = Module.asm.memmove).apply(null, arguments);
                }, Module._memcmp = function () {
                  return (Module._memcmp = Module.asm.memcmp).apply(null, arguments);
                }, Module._ts_query_new = function () {
                  return (Module._ts_query_new = Module.asm.ts_query_new).apply(null, arguments);
                }, Module._ts_query_delete = function () {
                  return (Module._ts_query_delete = Module.asm.ts_query_delete).apply(null, arguments);
                }, Module._iswspace = function () {
                  return (Module._iswspace = Module.asm.iswspace).apply(null, arguments);
                }, Module._iswalnum = function () {
                  return (Module._iswalnum = Module.asm.iswalnum).apply(null, arguments);
                }, Module._ts_query_pattern_count = function () {
                  return (Module._ts_query_pattern_count = Module.asm.ts_query_pattern_count).apply(null, arguments);
                }, Module._ts_query_capture_count = function () {
                  return (Module._ts_query_capture_count = Module.asm.ts_query_capture_count).apply(null, arguments);
                }, Module._ts_query_string_count = function () {
                  return (Module._ts_query_string_count = Module.asm.ts_query_string_count).apply(null, arguments);
                }, Module._ts_query_capture_name_for_id = function () {
                  return (Module._ts_query_capture_name_for_id = Module.asm.ts_query_capture_name_for_id).apply(null, arguments);
                }, Module._ts_query_string_value_for_id = function () {
                  return (Module._ts_query_string_value_for_id = Module.asm.ts_query_string_value_for_id).apply(null, arguments);
                }, Module._ts_query_predicates_for_pattern = function () {
                  return (Module._ts_query_predicates_for_pattern = Module.asm.ts_query_predicates_for_pattern).apply(null, arguments);
                }, Module._ts_tree_copy = function () {
                  return (Module._ts_tree_copy = Module.asm.ts_tree_copy).apply(null, arguments);
                }, Module._ts_tree_delete = function () {
                  return (Module._ts_tree_delete = Module.asm.ts_tree_delete).apply(null, arguments);
                }, Module._ts_init = function () {
                  return (Module._ts_init = Module.asm.ts_init).apply(null, arguments);
                }, Module._ts_parser_new_wasm = function () {
                  return (Module._ts_parser_new_wasm = Module.asm.ts_parser_new_wasm).apply(null, arguments);
                }, Module._ts_parser_enable_logger_wasm = function () {
                  return (Module._ts_parser_enable_logger_wasm = Module.asm.ts_parser_enable_logger_wasm).apply(null, arguments);
                }, Module._ts_parser_parse_wasm = function () {
                  return (Module._ts_parser_parse_wasm = Module.asm.ts_parser_parse_wasm).apply(null, arguments);
                }, Module._ts_language_type_is_named_wasm = function () {
                  return (Module._ts_language_type_is_named_wasm = Module.asm.ts_language_type_is_named_wasm).apply(null, arguments);
                }, Module._ts_language_type_is_visible_wasm = function () {
                  return (Module._ts_language_type_is_visible_wasm = Module.asm.ts_language_type_is_visible_wasm).apply(null, arguments);
                }, Module._ts_tree_root_node_wasm = function () {
                  return (Module._ts_tree_root_node_wasm = Module.asm.ts_tree_root_node_wasm).apply(null, arguments);
                }, Module._ts_tree_edit_wasm = function () {
                  return (Module._ts_tree_edit_wasm = Module.asm.ts_tree_edit_wasm).apply(null, arguments);
                }, Module._ts_tree_get_changed_ranges_wasm = function () {
                  return (Module._ts_tree_get_changed_ranges_wasm = Module.asm.ts_tree_get_changed_ranges_wasm).apply(null, arguments);
                }, Module._ts_tree_cursor_new_wasm = function () {
                  return (Module._ts_tree_cursor_new_wasm = Module.asm.ts_tree_cursor_new_wasm).apply(null, arguments);
                }, Module._ts_tree_cursor_delete_wasm = function () {
                  return (Module._ts_tree_cursor_delete_wasm = Module.asm.ts_tree_cursor_delete_wasm).apply(null, arguments);
                }, Module._ts_tree_cursor_reset_wasm = function () {
                  return (Module._ts_tree_cursor_reset_wasm = Module.asm.ts_tree_cursor_reset_wasm).apply(null, arguments);
                }, Module._ts_tree_cursor_goto_first_child_wasm = function () {
                  return (Module._ts_tree_cursor_goto_first_child_wasm = Module.asm.ts_tree_cursor_goto_first_child_wasm).apply(null, arguments);
                }, Module._ts_tree_cursor_goto_next_sibling_wasm = function () {
                  return (Module._ts_tree_cursor_goto_next_sibling_wasm = Module.asm.ts_tree_cursor_goto_next_sibling_wasm).apply(null, arguments);
                }, Module._ts_tree_cursor_goto_parent_wasm = function () {
                  return (Module._ts_tree_cursor_goto_parent_wasm = Module.asm.ts_tree_cursor_goto_parent_wasm).apply(null, arguments);
                }, Module._ts_tree_cursor_current_node_type_id_wasm = function () {
                  return (Module._ts_tree_cursor_current_node_type_id_wasm = Module.asm.ts_tree_cursor_current_node_type_id_wasm).apply(null, arguments);
                }, Module._ts_tree_cursor_current_node_is_named_wasm = function () {
                  return (Module._ts_tree_cursor_current_node_is_named_wasm = Module.asm.ts_tree_cursor_current_node_is_named_wasm).apply(null, arguments);
                }, Module._ts_tree_cursor_current_node_is_missing_wasm = function () {
                  return (Module._ts_tree_cursor_current_node_is_missing_wasm = Module.asm.ts_tree_cursor_current_node_is_missing_wasm).apply(null, arguments);
                }, Module._ts_tree_cursor_current_node_id_wasm = function () {
                  return (Module._ts_tree_cursor_current_node_id_wasm = Module.asm.ts_tree_cursor_current_node_id_wasm).apply(null, arguments);
                }, Module._ts_tree_cursor_start_position_wasm = function () {
                  return (Module._ts_tree_cursor_start_position_wasm = Module.asm.ts_tree_cursor_start_position_wasm).apply(null, arguments);
                }, Module._ts_tree_cursor_end_position_wasm = function () {
                  return (Module._ts_tree_cursor_end_position_wasm = Module.asm.ts_tree_cursor_end_position_wasm).apply(null, arguments);
                }, Module._ts_tree_cursor_start_index_wasm = function () {
                  return (Module._ts_tree_cursor_start_index_wasm = Module.asm.ts_tree_cursor_start_index_wasm).apply(null, arguments);
                }, Module._ts_tree_cursor_end_index_wasm = function () {
                  return (Module._ts_tree_cursor_end_index_wasm = Module.asm.ts_tree_cursor_end_index_wasm).apply(null, arguments);
                }, Module._ts_tree_cursor_current_field_id_wasm = function () {
                  return (Module._ts_tree_cursor_current_field_id_wasm = Module.asm.ts_tree_cursor_current_field_id_wasm).apply(null, arguments);
                }, Module._ts_tree_cursor_current_node_wasm = function () {
                  return (Module._ts_tree_cursor_current_node_wasm = Module.asm.ts_tree_cursor_current_node_wasm).apply(null, arguments);
                }, Module._ts_node_symbol_wasm = function () {
                  return (Module._ts_node_symbol_wasm = Module.asm.ts_node_symbol_wasm).apply(null, arguments);
                }, Module._ts_node_child_count_wasm = function () {
                  return (Module._ts_node_child_count_wasm = Module.asm.ts_node_child_count_wasm).apply(null, arguments);
                }, Module._ts_node_named_child_count_wasm = function () {
                  return (Module._ts_node_named_child_count_wasm = Module.asm.ts_node_named_child_count_wasm).apply(null, arguments);
                }, Module._ts_node_child_wasm = function () {
                  return (Module._ts_node_child_wasm = Module.asm.ts_node_child_wasm).apply(null, arguments);
                }, Module._ts_node_named_child_wasm = function () {
                  return (Module._ts_node_named_child_wasm = Module.asm.ts_node_named_child_wasm).apply(null, arguments);
                }, Module._ts_node_child_by_field_id_wasm = function () {
                  return (Module._ts_node_child_by_field_id_wasm = Module.asm.ts_node_child_by_field_id_wasm).apply(null, arguments);
                }, Module._ts_node_next_sibling_wasm = function () {
                  return (Module._ts_node_next_sibling_wasm = Module.asm.ts_node_next_sibling_wasm).apply(null, arguments);
                }, Module._ts_node_prev_sibling_wasm = function () {
                  return (Module._ts_node_prev_sibling_wasm = Module.asm.ts_node_prev_sibling_wasm).apply(null, arguments);
                }, Module._ts_node_next_named_sibling_wasm = function () {
                  return (Module._ts_node_next_named_sibling_wasm = Module.asm.ts_node_next_named_sibling_wasm).apply(null, arguments);
                }, Module._ts_node_prev_named_sibling_wasm = function () {
                  return (Module._ts_node_prev_named_sibling_wasm = Module.asm.ts_node_prev_named_sibling_wasm).apply(null, arguments);
                }, Module._ts_node_parent_wasm = function () {
                  return (Module._ts_node_parent_wasm = Module.asm.ts_node_parent_wasm).apply(null, arguments);
                }, Module._ts_node_descendant_for_index_wasm = function () {
                  return (Module._ts_node_descendant_for_index_wasm = Module.asm.ts_node_descendant_for_index_wasm).apply(null, arguments);
                }, Module._ts_node_named_descendant_for_index_wasm = function () {
                  return (Module._ts_node_named_descendant_for_index_wasm = Module.asm.ts_node_named_descendant_for_index_wasm).apply(null, arguments);
                }, Module._ts_node_descendant_for_position_wasm = function () {
                  return (Module._ts_node_descendant_for_position_wasm = Module.asm.ts_node_descendant_for_position_wasm).apply(null, arguments);
                }, Module._ts_node_named_descendant_for_position_wasm = function () {
                  return (Module._ts_node_named_descendant_for_position_wasm = Module.asm.ts_node_named_descendant_for_position_wasm).apply(null, arguments);
                }, Module._ts_node_start_point_wasm = function () {
                  return (Module._ts_node_start_point_wasm = Module.asm.ts_node_start_point_wasm).apply(null, arguments);
                }, Module._ts_node_end_point_wasm = function () {
                  return (Module._ts_node_end_point_wasm = Module.asm.ts_node_end_point_wasm).apply(null, arguments);
                }, Module._ts_node_start_index_wasm = function () {
                  return (Module._ts_node_start_index_wasm = Module.asm.ts_node_start_index_wasm).apply(null, arguments);
                }, Module._ts_node_end_index_wasm = function () {
                  return (Module._ts_node_end_index_wasm = Module.asm.ts_node_end_index_wasm).apply(null, arguments);
                }, Module._ts_node_to_string_wasm = function () {
                  return (Module._ts_node_to_string_wasm = Module.asm.ts_node_to_string_wasm).apply(null, arguments);
                }, Module._ts_node_children_wasm = function () {
                  return (Module._ts_node_children_wasm = Module.asm.ts_node_children_wasm).apply(null, arguments);
                }, Module._ts_node_named_children_wasm = function () {
                  return (Module._ts_node_named_children_wasm = Module.asm.ts_node_named_children_wasm).apply(null, arguments);
                }, Module._ts_node_descendants_of_type_wasm = function () {
                  return (Module._ts_node_descendants_of_type_wasm = Module.asm.ts_node_descendants_of_type_wasm).apply(null, arguments);
                }, Module._ts_node_is_named_wasm = function () {
                  return (Module._ts_node_is_named_wasm = Module.asm.ts_node_is_named_wasm).apply(null, arguments);
                }, Module._ts_node_has_changes_wasm = function () {
                  return (Module._ts_node_has_changes_wasm = Module.asm.ts_node_has_changes_wasm).apply(null, arguments);
                }, Module._ts_node_has_error_wasm = function () {
                  return (Module._ts_node_has_error_wasm = Module.asm.ts_node_has_error_wasm).apply(null, arguments);
                }, Module._ts_node_is_missing_wasm = function () {
                  return (Module._ts_node_is_missing_wasm = Module.asm.ts_node_is_missing_wasm).apply(null, arguments);
                }, Module._ts_query_matches_wasm = function () {
                  return (Module._ts_query_matches_wasm = Module.asm.ts_query_matches_wasm).apply(null, arguments);
                }, Module._ts_query_captures_wasm = function () {
                  return (Module._ts_query_captures_wasm = Module.asm.ts_query_captures_wasm).apply(null, arguments);
                }, Module._iswdigit = function () {
                  return (Module._iswdigit = Module.asm.iswdigit).apply(null, arguments);
                }, Module._iswalpha = function () {
                  return (Module._iswalpha = Module.asm.iswalpha).apply(null, arguments);
                }, Module._iswlower = function () {
                  return (Module._iswlower = Module.asm.iswlower).apply(null, arguments);
                }, Module._towupper = function () {
                  return (Module._towupper = Module.asm.towupper).apply(null, arguments);
                }, Module.___errno_location = function () {
                  return (je = Module.___errno_location = Module.asm.__errno_location).apply(null, arguments);
                }),
                    Ue = (Module._memchr = function () {
                  return (Module._memchr = Module.asm.memchr).apply(null, arguments);
                }, Module._strlen = function () {
                  return (Module._strlen = Module.asm.strlen).apply(null, arguments);
                }, Module.stackSave = function () {
                  return (Ue = Module.stackSave = Module.asm.stackSave).apply(null, arguments);
                }),
                    De = Module.stackRestore = function () {
                  return (De = Module.stackRestore = Module.asm.stackRestore).apply(null, arguments);
                },
                    ze = Module.stackAlloc = function () {
                  return (ze = Module.stackAlloc = Module.asm.stackAlloc).apply(null, arguments);
                },
                    Ge = Module._setThrew = function () {
                  return (Ge = Module._setThrew = Module.asm.setThrew).apply(null, arguments);
                };

                Module.__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev = function () {
                  return (Module.__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev = Module.asm._ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev).apply(null, arguments);
                }, Module.__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm = function () {
                  return (Module.__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm = Module.asm._ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm).apply(null, arguments);
                }, Module.__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm = function () {
                  return (Module.__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm = Module.asm._ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm).apply(null, arguments);
                }, Module.__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm = function () {
                  return (Module.__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm = Module.asm._ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm).apply(null, arguments);
                }, Module.__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4copyEPcmm = function () {
                  return (Module.__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4copyEPcmm = Module.asm._ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4copyEPcmm).apply(null, arguments);
                }, Module.__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc = function () {
                  return (Module.__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc = Module.asm._ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc).apply(null, arguments);
                }, Module.__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev = function () {
                  return (Module.__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev = Module.asm._ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev).apply(null, arguments);
                }, Module.__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw = function () {
                  return (Module.__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw = Module.asm._ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw).apply(null, arguments);
                }, Module.__Znwm = function () {
                  return (Module.__Znwm = Module.asm._Znwm).apply(null, arguments);
                }, Module.__ZdlPv = function () {
                  return (Module.__ZdlPv = Module.asm._ZdlPv).apply(null, arguments);
                }, Module.__ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv = function () {
                  return (Module.__ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv = Module.asm._ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv).apply(null, arguments);
                }, Module._orig$ts_parser_timeout_micros = function () {
                  return (Module._orig$ts_parser_timeout_micros = Module.asm.orig$ts_parser_timeout_micros).apply(null, arguments);
                }, Module._orig$ts_parser_set_timeout_micros = function () {
                  return (Module._orig$ts_parser_set_timeout_micros = Module.asm.orig$ts_parser_set_timeout_micros).apply(null, arguments);
                };

                function He(e3) {
                  this.name = "ExitStatus", this.message = "Program terminated with exit(" + e3 + ")", this.status = e3;
                }

                Module.allocate = function (e3, t2) {
                  var r3;
                  return r3 = t2 == C ? ze(e3.length) : $e(e3.length), e3.subarray || e3.slice ? T.set(e3, r3) : T.set(new Uint8Array(e3), r3), r3;
                };

                re = function e3() {
                  Ze || Ke(), Ze || (re = e3);
                };

                var Be = false;

                function Ke(e3) {
                  function t2() {
                    Ze || (Ze = true, Module.calledRun = true, P || (Y = true, pe(X), pe(Q), Module.onRuntimeInitialized && Module.onRuntimeInitialized(), Xe && function (e4) {
                      var t3 = Module._main;

                      if (t3) {
                        var r3 = (e4 = e4 || []).length + 1,
                            n2 = ze(4 * (r3 + 1));
                        W[n2 >> 2] = G(a);

                        for (var s2 = 1; s2 < r3; s2++) {
                          W[(n2 >> 2) + s2] = G(e4[s2 - 1]);
                        }

                        W[(n2 >> 2) + r3] = 0;

                        try {
                          Ve(t3(r3, n2), true);
                        } catch (e5) {
                          if (e5 instanceof He) return;
                          if (e5 == "unwind") return;
                          var o2 = e5;
                          e5 && _typeof(e5) == "object" && e5.stack && (o2 = [e5, e5.stack]), g("exception thrown: " + o2), u(1, e5);
                        } finally {
                          true;
                        }
                      }
                    }(e3), function () {
                      if (Module.postRun) for (typeof Module.postRun == "function" && (Module.postRun = [Module.postRun]); Module.postRun.length;) {
                        e4 = Module.postRun.shift(), J.unshift(e4);
                      }
                      var e4;
                      pe(J);
                    }()));
                  }

                  e3 = e3 || _, ee > 0 || !Be && (function () {
                    if (I.length) {
                      if (!m) return ne(), void I.reduce(function (e4, t3) {
                        return e4.then(function () {
                          return Ne(t3, {
                            loadAsync: true,
                            global: true,
                            nodelete: true,
                            allowUndefined: true
                          });
                        });
                      }, Promise.resolve()).then(function () {
                        se(), Pe();
                      });
                      I.forEach(function (e4) {
                        Ne(e4, {
                          global: true,
                          nodelete: true,
                          allowUndefined: true
                        });
                      }), Pe();
                    } else Pe();
                  }(), Be = true, ee > 0) || (!function () {
                    if (Module.preRun) for (typeof Module.preRun == "function" && (Module.preRun = [Module.preRun]); Module.preRun.length;) {
                      e4 = Module.preRun.shift(), V.unshift(e4);
                    }
                    var e4;
                    pe(V);
                  }(), ee > 0 || (Module.setStatus ? (Module.setStatus("Running..."), setTimeout(function () {
                    setTimeout(function () {
                      Module.setStatus("");
                    }, 1), t2();
                  }, 1)) : t2()));
                }

                function Ve(e3, t2) {
                  e3, t2 && we() && e3 === 0 || (we() || (true, Module.onExit && Module.onExit(e3), P = true), u(e3, new He(e3)));
                }

                if (Module.run = Ke, Module.preInit) for (typeof Module.preInit == "function" && (Module.preInit = [Module.preInit]); Module.preInit.length > 0;) {
                  Module.preInit.pop()();
                }
                var Xe = true;
                Module.noInitialRun && (Xe = false), Ke();
                var Qe = Module,
                    Je = {},
                    Ye = 4,
                    et = 5 * Ye,
                    tt = 2 * Ye,
                    rt = 2 * Ye + 2 * tt,
                    nt = {
                  row: 0,
                  column: 0
                },
                    st = /[\w-.]*/g,
                    ot = 1,
                    _t = 2,
                    at = /^_?tree_sitter_\w+/;
                var ut, it, lt, dt, ct;

                var ParserImpl = /*#__PURE__*/function () {
                  function ParserImpl() {
                    _classCallCheck(this, ParserImpl);
                  }

                  _createClass(ParserImpl, [{
                    key: "initialize",
                    value: function initialize() {
                      Qe._ts_parser_new_wasm(), this[0] = N(lt, "i32"), this[1] = N(lt + Ye, "i32");
                    }
                  }, {
                    key: "delete",
                    value: function _delete() {
                      Qe._ts_parser_delete(this[0]), Qe._free(this[1]), this[0] = 0, this[1] = 0;
                    }
                  }, {
                    key: "setLanguage",
                    value: function setLanguage(e3) {
                      var t2;

                      if (e3) {
                        if (e3.constructor !== Language) throw new Error("Argument must be a Language");
                        {
                          t2 = e3[0];

                          var r3 = Qe._ts_language_version(t2);

                          if (r3 < it || ut < r3) throw new Error("Incompatible language version ".concat(r3, ". Compatibility range ").concat(it, " through ").concat(ut, "."));
                        }
                      } else t2 = 0, e3 = null;

                      return this.language = e3, Qe._ts_parser_set_language(this[0], t2), this;
                    }
                  }, {
                    key: "getLanguage",
                    value: function getLanguage() {
                      return this.language;
                    }
                  }, {
                    key: "parse",
                    value: function parse(e3, t2, r3) {
                      if (typeof e3 == "string") dt = function dt(t3, r4, n3) {
                        return e3.slice(t3, n3);
                      };else {
                        if (typeof e3 != "function") throw new Error("Argument must be a string or a function");
                        dt = e3;
                      }
                      this.logCallback ? (ct = this.logCallback, Qe._ts_parser_enable_logger_wasm(this[0], 1)) : (ct = null, Qe._ts_parser_enable_logger_wasm(this[0], 0));
                      var n2 = 0,
                          s2 = 0;

                      if (r3 && r3.includedRanges) {
                        n2 = r3.includedRanges.length;

                        var e4 = s2 = Qe._calloc(n2, rt);

                        for (var t3 = 0; t3 < n2; t3++) {
                          Et(e4, r3.includedRanges[t3]), e4 += rt;
                        }
                      }

                      var o2 = Qe._ts_parser_parse_wasm(this[0], this[1], t2 ? t2[0] : 0, s2, n2);

                      if (!o2) throw dt = null, ct = null, new Error("Parsing failed");

                      var _2 = new Tree(Je, o2, this.language, dt);

                      return dt = null, ct = null, _2;
                    }
                  }, {
                    key: "reset",
                    value: function reset() {
                      Qe._ts_parser_reset(this[0]);
                    }
                  }, {
                    key: "setTimeoutMicros",
                    value: function setTimeoutMicros(e3) {
                      Qe._ts_parser_set_timeout_micros(this[0], e3);
                    }
                  }, {
                    key: "getTimeoutMicros",
                    value: function getTimeoutMicros() {
                      return Qe._ts_parser_timeout_micros(this[0]);
                    }
                  }, {
                    key: "setLogger",
                    value: function setLogger(e3) {
                      if (e3) {
                        if (typeof e3 != "function") throw new Error("Logger callback must be a function");
                      } else e3 = null;

                      return this.logCallback = e3, this;
                    }
                  }, {
                    key: "getLogger",
                    value: function getLogger() {
                      return this.logCallback;
                    }
                  }], [{
                    key: "init",
                    value: function init() {
                      lt = Qe._ts_init(), ut = N(lt, "i32"), it = N(lt + Ye, "i32");
                    }
                  }]);

                  return ParserImpl;
                }();

                var Tree = /*#__PURE__*/function () {
                  function Tree(e3, t2, r3, n2) {
                    _classCallCheck(this, Tree);

                    pt(e3), this[0] = t2, this.language = r3, this.textCallback = n2;
                  }

                  _createClass(Tree, [{
                    key: "copy",
                    value: function copy() {
                      var e3 = Qe._ts_tree_copy(this[0]);

                      return new Tree(Je, e3, this.language, this.textCallback);
                    }
                  }, {
                    key: "delete",
                    value: function _delete() {
                      Qe._ts_tree_delete(this[0]), this[0] = 0;
                    }
                  }, {
                    key: "edit",
                    value: function edit(e3) {
                      !function (e4) {
                        var t2 = lt;
                        bt(t2, e4.startPosition), bt(t2 += tt, e4.oldEndPosition), bt(t2 += tt, e4.newEndPosition), x(t2 += tt, e4.startIndex, "i32"), x(t2 += Ye, e4.oldEndIndex, "i32"), x(t2 += Ye, e4.newEndIndex, "i32"), t2 += Ye;
                      }(e3), Qe._ts_tree_edit_wasm(this[0]);
                    }
                  }, {
                    key: "rootNode",
                    get: function get() {
                      return Qe._ts_tree_root_node_wasm(this[0]), wt(this);
                    }
                  }, {
                    key: "getLanguage",
                    value: function getLanguage() {
                      return this.language;
                    }
                  }, {
                    key: "walk",
                    value: function walk() {
                      return this.rootNode.walk();
                    }
                  }, {
                    key: "getChangedRanges",
                    value: function getChangedRanges(e3) {
                      if (e3.constructor !== Tree) throw new TypeError("Argument must be a Tree");

                      Qe._ts_tree_get_changed_ranges_wasm(this[0], e3[0]);

                      var t2 = N(lt, "i32"),
                          r3 = N(lt + Ye, "i32"),
                          n2 = new Array(t2);

                      if (t2 > 0) {
                        var e4 = r3;

                        for (var r4 = 0; r4 < t2; r4++) {
                          n2[r4] = It(e4), e4 += rt;
                        }

                        Qe._free(r3);
                      }

                      return n2;
                    }
                  }]);

                  return Tree;
                }();

                var Node2 = /*#__PURE__*/function () {
                  function Node2(e3, t2) {
                    _classCallCheck(this, Node2);

                    pt(e3), this.tree = t2;
                  }

                  _createClass(Node2, [{
                    key: "typeId",
                    get: function get() {
                      return gt(this), Qe._ts_node_symbol_wasm(this.tree[0]);
                    }
                  }, {
                    key: "type",
                    get: function get() {
                      return this.tree.language.types[this.typeId] || "ERROR";
                    }
                  }, {
                    key: "endPosition",
                    get: function get() {
                      return gt(this), Qe._ts_node_end_point_wasm(this.tree[0]), vt(lt);
                    }
                  }, {
                    key: "endIndex",
                    get: function get() {
                      return gt(this), Qe._ts_node_end_index_wasm(this.tree[0]);
                    }
                  }, {
                    key: "text",
                    get: function get() {
                      return mt(this.tree, this.startIndex, this.endIndex);
                    }
                  }, {
                    key: "isNamed",
                    value: function isNamed() {
                      return gt(this), Qe._ts_node_is_named_wasm(this.tree[0]) === 1;
                    }
                  }, {
                    key: "hasError",
                    value: function hasError() {
                      return gt(this), Qe._ts_node_has_error_wasm(this.tree[0]) === 1;
                    }
                  }, {
                    key: "hasChanges",
                    value: function hasChanges() {
                      return gt(this), Qe._ts_node_has_changes_wasm(this.tree[0]) === 1;
                    }
                  }, {
                    key: "isMissing",
                    value: function isMissing() {
                      return gt(this), Qe._ts_node_is_missing_wasm(this.tree[0]) === 1;
                    }
                  }, {
                    key: "equals",
                    value: function equals(e3) {
                      return this.id === e3.id;
                    }
                  }, {
                    key: "child",
                    value: function child(e3) {
                      return gt(this), Qe._ts_node_child_wasm(this.tree[0], e3), wt(this.tree);
                    }
                  }, {
                    key: "namedChild",
                    value: function namedChild(e3) {
                      return gt(this), Qe._ts_node_named_child_wasm(this.tree[0], e3), wt(this.tree);
                    }
                  }, {
                    key: "childForFieldId",
                    value: function childForFieldId(e3) {
                      return gt(this), Qe._ts_node_child_by_field_id_wasm(this.tree[0], e3), wt(this.tree);
                    }
                  }, {
                    key: "childForFieldName",
                    value: function childForFieldName(e3) {
                      var t2 = this.tree.language.fields.indexOf(e3);
                      if (t2 !== -1) return this.childForFieldId(t2);
                    }
                  }, {
                    key: "childCount",
                    get: function get() {
                      return gt(this), Qe._ts_node_child_count_wasm(this.tree[0]);
                    }
                  }, {
                    key: "namedChildCount",
                    get: function get() {
                      return gt(this), Qe._ts_node_named_child_count_wasm(this.tree[0]);
                    }
                  }, {
                    key: "firstChild",
                    get: function get() {
                      return this.child(0);
                    }
                  }, {
                    key: "firstNamedChild",
                    get: function get() {
                      return this.namedChild(0);
                    }
                  }, {
                    key: "lastChild",
                    get: function get() {
                      return this.child(this.childCount - 1);
                    }
                  }, {
                    key: "lastNamedChild",
                    get: function get() {
                      return this.namedChild(this.namedChildCount - 1);
                    }
                  }, {
                    key: "children",
                    get: function get() {
                      if (!this._children) {
                        gt(this), Qe._ts_node_children_wasm(this.tree[0]);
                        var e3 = N(lt, "i32"),
                            t2 = N(lt + Ye, "i32");

                        if (this._children = new Array(e3), e3 > 0) {
                          var r3 = t2;

                          for (var t3 = 0; t3 < e3; t3++) {
                            this._children[t3] = wt(this.tree, r3), r3 += et;
                          }

                          Qe._free(t2);
                        }
                      }

                      return this._children;
                    }
                  }, {
                    key: "namedChildren",
                    get: function get() {
                      if (!this._namedChildren) {
                        gt(this), Qe._ts_node_named_children_wasm(this.tree[0]);
                        var e3 = N(lt, "i32"),
                            t2 = N(lt + Ye, "i32");

                        if (this._namedChildren = new Array(e3), e3 > 0) {
                          var r3 = t2;

                          for (var t3 = 0; t3 < e3; t3++) {
                            this._namedChildren[t3] = wt(this.tree, r3), r3 += et;
                          }

                          Qe._free(t2);
                        }
                      }

                      return this._namedChildren;
                    }
                  }, {
                    key: "descendantsOfType",
                    value: function descendantsOfType(e3, t2, r3) {
                      Array.isArray(e3) || (e3 = [e3]), t2 || (t2 = nt), r3 || (r3 = nt);
                      var n2 = [],
                          s2 = this.tree.language.types;

                      for (var t3 = 0, r4 = s2.length; t3 < r4; t3++) {
                        e3.includes(s2[t3]) && n2.push(t3);
                      }

                      var o2 = Qe._malloc(Ye * n2.length);

                      for (var e4 = 0, _t2 = n2.length; e4 < _t2; e4++) {
                        x(o2 + e4 * Ye, n2[e4], "i32");
                      }

                      gt(this), Qe._ts_node_descendants_of_type_wasm(this.tree[0], o2, n2.length, t2.row, t2.column, r3.row, r3.column);

                      var _2 = N(lt, "i32"),
                          a2 = N(lt + Ye, "i32"),
                          u2 = new Array(_2);

                      if (_2 > 0) {
                        var _e2 = a2;

                        for (var _t3 = 0; _t3 < _2; _t3++) {
                          u2[_t3] = wt(this.tree, _e2), _e2 += et;
                        }
                      }

                      return Qe._free(a2), Qe._free(o2), u2;
                    }
                  }, {
                    key: "nextSibling",
                    get: function get() {
                      return gt(this), Qe._ts_node_next_sibling_wasm(this.tree[0]), wt(this.tree);
                    }
                  }, {
                    key: "previousSibling",
                    get: function get() {
                      return gt(this), Qe._ts_node_prev_sibling_wasm(this.tree[0]), wt(this.tree);
                    }
                  }, {
                    key: "nextNamedSibling",
                    get: function get() {
                      return gt(this), Qe._ts_node_next_named_sibling_wasm(this.tree[0]), wt(this.tree);
                    }
                  }, {
                    key: "previousNamedSibling",
                    get: function get() {
                      return gt(this), Qe._ts_node_prev_named_sibling_wasm(this.tree[0]), wt(this.tree);
                    }
                  }, {
                    key: "parent",
                    get: function get() {
                      return gt(this), Qe._ts_node_parent_wasm(this.tree[0]), wt(this.tree);
                    }
                  }, {
                    key: "descendantForIndex",
                    value: function descendantForIndex(e3) {
                      var t2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : e3;
                      if (typeof e3 != "number" || typeof t2 != "number") throw new Error("Arguments must be numbers");
                      gt(this);
                      var r3 = lt + et;
                      return x(r3, e3, "i32"), x(r3 + Ye, t2, "i32"), Qe._ts_node_descendant_for_index_wasm(this.tree[0]), wt(this.tree);
                    }
                  }, {
                    key: "namedDescendantForIndex",
                    value: function namedDescendantForIndex(e3) {
                      var t2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : e3;
                      if (typeof e3 != "number" || typeof t2 != "number") throw new Error("Arguments must be numbers");
                      gt(this);
                      var r3 = lt + et;
                      return x(r3, e3, "i32"), x(r3 + Ye, t2, "i32"), Qe._ts_node_named_descendant_for_index_wasm(this.tree[0]), wt(this.tree);
                    }
                  }, {
                    key: "descendantForPosition",
                    value: function descendantForPosition(e3) {
                      var t2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : e3;
                      if (!ht(e3) || !ht(t2)) throw new Error("Arguments must be {row, column} objects");
                      gt(this);
                      var r3 = lt + et;
                      return bt(r3, e3), bt(r3 + tt, t2), Qe._ts_node_descendant_for_position_wasm(this.tree[0]), wt(this.tree);
                    }
                  }, {
                    key: "namedDescendantForPosition",
                    value: function namedDescendantForPosition(e3) {
                      var t2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : e3;
                      if (!ht(e3) || !ht(t2)) throw new Error("Arguments must be {row, column} objects");
                      gt(this);
                      var r3 = lt + et;
                      return bt(r3, e3), bt(r3 + tt, t2), Qe._ts_node_named_descendant_for_position_wasm(this.tree[0]), wt(this.tree);
                    }
                  }, {
                    key: "walk",
                    value: function walk() {
                      return gt(this), Qe._ts_tree_cursor_new_wasm(this.tree[0]), new TreeCursor(Je, this.tree);
                    }
                  }, {
                    key: "toString",
                    value: function toString() {
                      gt(this);

                      var e3 = Qe._ts_node_to_string_wasm(this.tree[0]),
                          t2 = function (e4) {
                        for (var t3 = "";;) {
                          var r3 = T[e4++ >> 0];
                          if (!r3) return t3;
                          t3 += String.fromCharCode(r3);
                        }
                      }(e3);

                      return Qe._free(e3), t2;
                    }
                  }]);

                  return Node2;
                }();

                var TreeCursor = /*#__PURE__*/function () {
                  function TreeCursor(e3, t2) {
                    _classCallCheck(this, TreeCursor);

                    pt(e3), this.tree = t2, Mt(this);
                  }

                  _createClass(TreeCursor, [{
                    key: "delete",
                    value: function _delete() {
                      yt(this), Qe._ts_tree_cursor_delete_wasm(this.tree[0]), this[0] = this[1] = this[2] = 0;
                    }
                  }, {
                    key: "reset",
                    value: function reset(e3) {
                      gt(e3), yt(this, lt + et), Qe._ts_tree_cursor_reset_wasm(this.tree[0]), Mt(this);
                    }
                  }, {
                    key: "nodeType",
                    get: function get() {
                      return this.tree.language.types[this.nodeTypeId] || "ERROR";
                    }
                  }, {
                    key: "nodeTypeId",
                    get: function get() {
                      return yt(this), Qe._ts_tree_cursor_current_node_type_id_wasm(this.tree[0]);
                    }
                  }, {
                    key: "nodeId",
                    get: function get() {
                      return yt(this), Qe._ts_tree_cursor_current_node_id_wasm(this.tree[0]);
                    }
                  }, {
                    key: "nodeIsNamed",
                    get: function get() {
                      return yt(this), Qe._ts_tree_cursor_current_node_is_named_wasm(this.tree[0]) === 1;
                    }
                  }, {
                    key: "nodeIsMissing",
                    get: function get() {
                      return yt(this), Qe._ts_tree_cursor_current_node_is_missing_wasm(this.tree[0]) === 1;
                    }
                  }, {
                    key: "nodeText",
                    get: function get() {
                      yt(this);

                      var e3 = Qe._ts_tree_cursor_start_index_wasm(this.tree[0]),
                          t2 = Qe._ts_tree_cursor_end_index_wasm(this.tree[0]);

                      return mt(this.tree, e3, t2);
                    }
                  }, {
                    key: "startPosition",
                    get: function get() {
                      return yt(this), Qe._ts_tree_cursor_start_position_wasm(this.tree[0]), vt(lt);
                    }
                  }, {
                    key: "endPosition",
                    get: function get() {
                      return yt(this), Qe._ts_tree_cursor_end_position_wasm(this.tree[0]), vt(lt);
                    }
                  }, {
                    key: "startIndex",
                    get: function get() {
                      return yt(this), Qe._ts_tree_cursor_start_index_wasm(this.tree[0]);
                    }
                  }, {
                    key: "endIndex",
                    get: function get() {
                      return yt(this), Qe._ts_tree_cursor_end_index_wasm(this.tree[0]);
                    }
                  }, {
                    key: "currentNode",
                    value: function currentNode() {
                      return yt(this), Qe._ts_tree_cursor_current_node_wasm(this.tree[0]), wt(this.tree);
                    }
                  }, {
                    key: "currentFieldId",
                    value: function currentFieldId() {
                      return yt(this), Qe._ts_tree_cursor_current_field_id_wasm(this.tree[0]);
                    }
                  }, {
                    key: "currentFieldName",
                    value: function currentFieldName() {
                      return this.tree.language.fields[this.currentFieldId()];
                    }
                  }, {
                    key: "gotoFirstChild",
                    value: function gotoFirstChild() {
                      yt(this);

                      var e3 = Qe._ts_tree_cursor_goto_first_child_wasm(this.tree[0]);

                      return Mt(this), e3 === 1;
                    }
                  }, {
                    key: "gotoNextSibling",
                    value: function gotoNextSibling() {
                      yt(this);

                      var e3 = Qe._ts_tree_cursor_goto_next_sibling_wasm(this.tree[0]);

                      return Mt(this), e3 === 1;
                    }
                  }, {
                    key: "gotoParent",
                    value: function gotoParent() {
                      yt(this);

                      var e3 = Qe._ts_tree_cursor_goto_parent_wasm(this.tree[0]);

                      return Mt(this), e3 === 1;
                    }
                  }]);

                  return TreeCursor;
                }();

                var Language = /*#__PURE__*/function () {
                  function Language(e3, t2) {
                    _classCallCheck(this, Language);

                    pt(e3), this[0] = t2, this.types = new Array(Qe._ts_language_symbol_count(this[0]));

                    for (var e4 = 0, t3 = this.types.length; e4 < t3; e4++) {
                      Qe._ts_language_symbol_type(this[0], e4) < 2 && (this.types[e4] = j(Qe._ts_language_symbol_name(this[0], e4)));
                    }

                    this.fields = new Array(Qe._ts_language_field_count(this[0]) + 1);

                    for (var _e3 = 0, _t4 = this.fields.length; _e3 < _t4; _e3++) {
                      var t4 = Qe._ts_language_field_name_for_id(this[0], _e3);

                      this.fields[_e3] = t4 !== 0 ? j(t4) : null;
                    }
                  }

                  _createClass(Language, [{
                    key: "version",
                    get: function get() {
                      return Qe._ts_language_version(this[0]);
                    }
                  }, {
                    key: "fieldCount",
                    get: function get() {
                      return this.fields.length - 1;
                    }
                  }, {
                    key: "fieldIdForName",
                    value: function fieldIdForName(e3) {
                      var t2 = this.fields.indexOf(e3);
                      return t2 !== -1 ? t2 : null;
                    }
                  }, {
                    key: "fieldNameForId",
                    value: function fieldNameForId(e3) {
                      return this.fields[e3] || null;
                    }
                  }, {
                    key: "idForNodeType",
                    value: function idForNodeType(e3, t2) {
                      var r3 = z(e3),
                          n2 = Qe._malloc(r3 + 1);

                      D(e3, n2, r3 + 1);

                      var s2 = Qe._ts_language_symbol_for_name(this[0], n2, r3, t2);

                      return Qe._free(n2), s2 || null;
                    }
                  }, {
                    key: "nodeTypeCount",
                    get: function get() {
                      return Qe._ts_language_symbol_count(this[0]);
                    }
                  }, {
                    key: "nodeTypeForId",
                    value: function nodeTypeForId(e3) {
                      var t2 = Qe._ts_language_symbol_name(this[0], e3);

                      return t2 ? j(t2) : null;
                    }
                  }, {
                    key: "nodeTypeIsNamed",
                    value: function nodeTypeIsNamed(e3) {
                      return !!Qe._ts_language_type_is_named_wasm(this[0], e3);
                    }
                  }, {
                    key: "nodeTypeIsVisible",
                    value: function nodeTypeIsVisible(e3) {
                      return !!Qe._ts_language_type_is_visible_wasm(this[0], e3);
                    }
                  }, {
                    key: "query",
                    value: function query(e3) {
                      var t2 = z(e3),
                          r3 = Qe._malloc(t2 + 1);

                      D(e3, r3, t2 + 1);

                      var n2 = Qe._ts_query_new(this[0], r3, t2, lt, lt + Ye);

                      if (!n2) {
                        var t3 = N(lt + Ye, "i32"),
                            n3 = j(r3, N(lt, "i32")).length,
                            s3 = e3.substr(n3, 100).split("\n")[0];
                        var o3,
                            _3 = s3.match(st)[0];

                        switch (t3) {
                          case 2:
                            o3 = new RangeError("Bad node name '".concat(_3, "'"));
                            break;

                          case 3:
                            o3 = new RangeError("Bad field name '".concat(_3, "'"));
                            break;

                          case 4:
                            o3 = new RangeError("Bad capture name @".concat(_3));
                            break;

                          case 5:
                            o3 = new TypeError("Bad pattern structure at offset ".concat(n3, ": '").concat(s3, "'...")), _3 = "";
                            break;

                          default:
                            o3 = new SyntaxError("Bad syntax at offset ".concat(n3, ": '").concat(s3, "'...")), _3 = "";
                        }

                        throw o3.index = n3, o3.length = _3.length, Qe._free(r3), o3;
                      }

                      var s2 = Qe._ts_query_string_count(n2),
                          o2 = Qe._ts_query_capture_count(n2),
                          _2 = Qe._ts_query_pattern_count(n2),
                          a2 = new Array(o2),
                          u2 = new Array(s2);

                      for (var e4 = 0; e4 < o2; e4++) {
                        var _t5 = Qe._ts_query_capture_name_for_id(n2, e4, lt),
                            r4 = N(lt, "i32");

                        a2[e4] = j(_t5, r4);
                      }

                      for (var _e4 = 0; _e4 < s2; _e4++) {
                        var _t6 = Qe._ts_query_string_value_for_id(n2, _e4, lt),
                            _r = N(lt, "i32");

                        u2[_e4] = j(_t6, _r);
                      }

                      var i2 = new Array(_2),
                          l2 = new Array(_2),
                          d2 = new Array(_2),
                          c2 = new Array(_2),
                          m2 = new Array(_2);

                      for (var _e5 = 0; _e5 < _2; _e5++) {
                        var _t7 = Qe._ts_query_predicates_for_pattern(n2, _e5, lt),
                            _r2 = N(lt, "i32");

                        c2[_e5] = [], m2[_e5] = [];
                        var _s2 = [];
                        var _o = _t7;

                        for (var t4 = 0; t4 < _r2; t4++) {
                          var t5 = N(_o, "i32"),
                              r5 = N(_o += Ye, "i32");
                          if (_o += Ye, t5 === ot) _s2.push({
                            type: "capture",
                            name: a2[r5]
                          });else if (t5 === _t) _s2.push({
                            type: "string",
                            value: u2[r5]
                          });else if (_s2.length > 0) {
                            (function () {
                              if (_s2[0].type !== "string") throw new Error("Predicates must begin with a literal value");
                              var t6 = _s2[0].value;
                              var r6 = true;

                              switch (t6) {
                                case "not-eq?":
                                  r6 = false;

                                case "eq?":
                                  if (_s2.length !== 3) throw new Error("Wrong number of arguments to `#eq?` predicate. Expected 2, got ".concat(_s2.length - 1));
                                  if (_s2[1].type !== "capture") throw new Error("First argument of `#eq?` predicate must be a capture. Got \"".concat(_s2[1].value, "\""));

                                  if (_s2[2].type === "capture") {
                                    var t7 = _s2[1].name,
                                        n4 = _s2[2].name;

                                    m2[_e5].push(function (e5) {
                                      var s4, o5;

                                      var _iterator13 = _createForOfIteratorHelper(e5),
                                          _step10;

                                      try {
                                        for (_iterator13.s(); !(_step10 = _iterator13.n()).done;) {
                                          var r7 = _step10.value;
                                          r7.name === t7 && (s4 = r7.node), r7.name === n4 && (o5 = r7.node);
                                        }
                                      } catch (err) {
                                        _iterator13.e(err);
                                      } finally {
                                        _iterator13.f();
                                      }

                                      return s4 === void 0 || o5 === void 0 || s4.text === o5.text === r6;
                                    });
                                  } else {
                                    var _t8 = _s2[1].name,
                                        _n3 = _s2[2].value;

                                    m2[_e5].push(function (e5) {
                                      var _iterator14 = _createForOfIteratorHelper(e5),
                                          _step11;

                                      try {
                                        for (_iterator14.s(); !(_step11 = _iterator14.n()).done;) {
                                          var s4 = _step11.value;
                                          if (s4.name === _t8) return s4.node.text === _n3 === r6;
                                        }
                                      } catch (err) {
                                        _iterator14.e(err);
                                      } finally {
                                        _iterator14.f();
                                      }

                                      return true;
                                    });
                                  }

                                  break;

                                case "not-match?":
                                  r6 = false;

                                case "match?":
                                  if (_s2.length !== 3) throw new Error("Wrong number of arguments to `#match?` predicate. Expected 2, got ".concat(_s2.length - 1, "."));
                                  if (_s2[1].type !== "capture") throw new Error("First argument of `#match?` predicate must be a capture. Got \"".concat(_s2[1].value, "\"."));
                                  if (_s2[2].type !== "string") throw new Error("Second argument of `#match?` predicate must be a string. Got @".concat(_s2[2].value, "."));
                                  var _n2 = _s2[1].name,
                                      o4 = new RegExp(_s2[2].value);

                                  m2[_e5].push(function (e5) {
                                    var _iterator15 = _createForOfIteratorHelper(e5),
                                        _step12;

                                    try {
                                      for (_iterator15.s(); !(_step12 = _iterator15.n()).done;) {
                                        var _t9 = _step12.value;
                                        if (_t9.name === _n2) return o4.test(_t9.node.text) === r6;
                                      }
                                    } catch (err) {
                                      _iterator15.e(err);
                                    } finally {
                                      _iterator15.f();
                                    }

                                    return true;
                                  });

                                  break;

                                case "set!":
                                  if (_s2.length < 2 || _s2.length > 3) throw new Error("Wrong number of arguments to `#set!` predicate. Expected 1 or 2. Got ".concat(_s2.length - 1, "."));
                                  if (_s2.some(function (e5) {
                                    return e5.type !== "string";
                                  })) throw new Error('Arguments to `#set!` predicate must be a strings.".');
                                  i2[_e5] || (i2[_e5] = {}), i2[_e5][_s2[1].value] = _s2[2] ? _s2[2].value : null;
                                  break;

                                case "is?":
                                case "is-not?":
                                  if (_s2.length < 2 || _s2.length > 3) throw new Error("Wrong number of arguments to `#".concat(t6, "` predicate. Expected 1 or 2. Got ").concat(_s2.length - 1, "."));
                                  if (_s2.some(function (e5) {
                                    return e5.type !== "string";
                                  })) throw new Error("Arguments to `#".concat(t6, "` predicate must be a strings.\"."));

                                  var _4 = t6 === "is?" ? l2 : d2;

                                  _4[_e5] || (_4[_e5] = {}), _4[_e5][_s2[1].value] = _s2[2] ? _s2[2].value : null;
                                  break;

                                default:
                                  c2[_e5].push({
                                    operator: t6,
                                    operands: _s2.slice(1)
                                  });

                              }

                              _s2.length = 0;
                            })();
                          }
                        }

                        Object.freeze(i2[_e5]), Object.freeze(l2[_e5]), Object.freeze(d2[_e5]);
                      }

                      return Qe._free(r3), new Query(Je, n2, a2, m2, c2, Object.freeze(i2), Object.freeze(l2), Object.freeze(d2));
                    }
                  }], [{
                    key: "load",
                    value: function load(e3) {
                      var t2;
                      if (e3 instanceof Uint8Array) t2 = Promise.resolve(e3);else {
                        var r4 = e3;

                        if (typeof process != "undefined" && process.versions && process.versions.node) {
                          var e4 = __require("fs");

                          t2 = Promise.resolve(e4.readFileSync(r4));
                        } else t2 = fetch(r4).then(function (e4) {
                          return e4.arrayBuffer().then(function (t3) {
                            if (e4.ok) return new Uint8Array(t3);
                            {
                              var r5 = new TextDecoder("utf-8").decode(t3);
                              throw new Error("Language.load failed with status ".concat(e4.status, ".\n\n").concat(r5));
                            }
                          });
                        });
                      }
                      var r3 = typeof loadSideModule == "function" ? loadSideModule : xe;
                      return t2.then(function (e4) {
                        return r3(e4, {
                          loadAsync: true
                        });
                      }).then(function (e4) {
                        var t3 = Object.keys(e4),
                            r4 = t3.find(function (e5) {
                          return at.test(e5) && !e5.includes("external_scanner_");
                        });
                        r4 || console.log("Couldn't find language function in WASM file. Symbols:\n".concat(JSON.stringify(t3, null, 2)));
                        var n2 = e4[r4]();
                        return new Language(Je, n2);
                      });
                    }
                  }]);

                  return Language;
                }();

                var Query = /*#__PURE__*/function () {
                  function Query(e3, t2, r3, n2, s2, o2, _2, a2) {
                    _classCallCheck(this, Query);

                    pt(e3), this[0] = t2, this.captureNames = r3, this.textPredicates = n2, this.predicates = s2, this.setProperties = o2, this.assertedProperties = _2, this.refutedProperties = a2, this.exceededMatchLimit = false;
                  }

                  _createClass(Query, [{
                    key: "delete",
                    value: function _delete() {
                      Qe._ts_query_delete(this[0]), this[0] = 0;
                    }
                  }, {
                    key: "matches",
                    value: function matches(e3, t2, r3, n2) {
                      var _this55 = this;

                      t2 || (t2 = nt), r3 || (r3 = nt), n2 || (n2 = {});
                      var s2 = n2.matchLimit;
                      if (s2 === void 0) s2 = 0;else if (typeof s2 != "number") throw new Error("Arguments must be numbers");
                      gt(e3), Qe._ts_query_matches_wasm(this[0], e3.tree[0], t2.row, t2.column, r3.row, r3.column, s2);

                      var o2 = N(lt, "i32"),
                          _2 = N(lt + Ye, "i32"),
                          a2 = N(lt + 2 * Ye, "i32"),
                          u2 = new Array(o2);

                      this.exceededMatchLimit = !!a2;
                      var i2 = 0,
                          l2 = _2;

                      var _loop2 = function _loop2(t3) {
                        var r4 = N(l2, "i32"),
                            n3 = N(l2 += Ye, "i32");
                        l2 += Ye;
                        var s3 = new Array(n3);

                        if (l2 = ft(_this55, e3.tree, l2, s3), _this55.textPredicates[r4].every(function (e4) {
                          return e4(s3);
                        })) {
                          u2[i2++] = {
                            pattern: r4,
                            captures: s3
                          };
                          var e4 = _this55.setProperties[r4];
                          e4 && (u2[t3].setProperties = e4);
                          var n4 = _this55.assertedProperties[r4];
                          n4 && (u2[t3].assertedProperties = n4);
                          var o3 = _this55.refutedProperties[r4];
                          o3 && (u2[t3].refutedProperties = o3);
                        }
                      };

                      for (var t3 = 0; t3 < o2; t3++) {
                        _loop2(t3);
                      }

                      return u2.length = i2, Qe._free(_2), u2;
                    }
                  }, {
                    key: "captures",
                    value: function captures(e3, t2, r3, n2) {
                      t2 || (t2 = nt), r3 || (r3 = nt), n2 || (n2 = {});
                      var s2 = n2.matchLimit;
                      if (s2 === void 0) s2 = 0;else if (typeof s2 != "number") throw new Error("Arguments must be numbers");
                      gt(e3), Qe._ts_query_captures_wasm(this[0], e3.tree[0], t2.row, t2.column, r3.row, r3.column, s2);

                      var o2 = N(lt, "i32"),
                          _2 = N(lt + Ye, "i32"),
                          a2 = N(lt + 2 * Ye, "i32"),
                          u2 = [];

                      this.exceededMatchLimit = !!a2;
                      var i2 = [];
                      var l2 = _2;

                      for (var t3 = 0; t3 < o2; t3++) {
                        var t4 = N(l2, "i32"),
                            r4 = N(l2 += Ye, "i32"),
                            n3 = N(l2 += Ye, "i32");

                        if (l2 += Ye, i2.length = r4, l2 = ft(this, e3.tree, l2, i2), this.textPredicates[t4].every(function (e4) {
                          return e4(i2);
                        })) {
                          var e4 = i2[n3],
                              r5 = this.setProperties[t4];
                          r5 && (e4.setProperties = r5);
                          var s3 = this.assertedProperties[t4];
                          s3 && (e4.assertedProperties = s3);
                          var o3 = this.refutedProperties[t4];
                          o3 && (e4.refutedProperties = o3), u2.push(e4);
                        }
                      }

                      return Qe._free(_2), u2;
                    }
                  }, {
                    key: "predicatesForPattern",
                    value: function predicatesForPattern(e3) {
                      return this.predicates[e3];
                    }
                  }, {
                    key: "didExceedMatchLimit",
                    value: function didExceedMatchLimit() {
                      return this.exceededMatchLimit;
                    }
                  }]);

                  return Query;
                }();

                function mt(e3, t2, r3) {
                  var n2 = r3 - t2;
                  var s2 = e3.textCallback(t2, null, r3);

                  for (t2 += s2.length; t2 < r3;) {
                    var n3 = e3.textCallback(t2, null, r3);
                    if (!(n3 && n3.length > 0)) break;
                    t2 += n3.length, s2 += n3;
                  }

                  return t2 > r3 && (s2 = s2.slice(0, n2)), s2;
                }

                function ft(e3, t2, r3, n2) {
                  for (var s2 = 0, o2 = n2.length; s2 < o2; s2++) {
                    var o3 = N(r3, "i32"),
                        _2 = wt(t2, r3 += Ye);

                    r3 += et, n2[s2] = {
                      name: e3.captureNames[o3],
                      node: _2
                    };
                  }

                  return r3;
                }

                function pt(e3) {
                  if (e3 !== Je) throw new Error("Illegal constructor");
                }

                function ht(e3) {
                  return e3 && typeof e3.row == "number" && typeof e3.column == "number";
                }

                function gt(e3) {
                  var t2 = lt;
                  x(t2, e3.id, "i32"), x(t2 += Ye, e3.startIndex, "i32"), x(t2 += Ye, e3.startPosition.row, "i32"), x(t2 += Ye, e3.startPosition.column, "i32"), x(t2 += Ye, e3[0], "i32");
                }

                function wt(e3) {
                  var t2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : lt;
                  var r3 = N(t2, "i32");
                  if (r3 === 0) return null;

                  var n2 = N(t2 += Ye, "i32"),
                      s2 = N(t2 += Ye, "i32"),
                      o2 = N(t2 += Ye, "i32"),
                      _2 = N(t2 += Ye, "i32"),
                      a2 = new Node2(Je, e3);

                  return a2.id = r3, a2.startIndex = n2, a2.startPosition = {
                    row: s2,
                    column: o2
                  }, a2[0] = _2, a2;
                }

                function yt(e3) {
                  var t2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : lt;
                  x(t2 + 0 * Ye, e3[0], "i32"), x(t2 + 1 * Ye, e3[1], "i32"), x(t2 + 2 * Ye, e3[2], "i32");
                }

                function Mt(e3) {
                  e3[0] = N(lt + 0 * Ye, "i32"), e3[1] = N(lt + 1 * Ye, "i32"), e3[2] = N(lt + 2 * Ye, "i32");
                }

                function bt(e3, t2) {
                  x(e3, t2.row, "i32"), x(e3 + Ye, t2.column, "i32");
                }

                function vt(e3) {
                  return {
                    row: N(e3, "i32"),
                    column: N(e3 + Ye, "i32")
                  };
                }

                function Et(e3, t2) {
                  bt(e3, t2.startPosition), bt(e3 += tt, t2.endPosition), x(e3 += tt, t2.startIndex, "i32"), x(e3 += Ye, t2.endIndex, "i32"), e3 += Ye;
                }

                function It(e3) {
                  var t2 = {};
                  return t2.startPosition = vt(e3), e3 += tt, t2.endPosition = vt(e3), e3 += tt, t2.startIndex = N(e3, "i32"), e3 += Ye, t2.endIndex = N(e3, "i32"), t2;
                }

                var _iterator16 = _createForOfIteratorHelper(Object.getOwnPropertyNames(ParserImpl.prototype)),
                    _step13;

                try {
                  for (_iterator16.s(); !(_step13 = _iterator16.n()).done;) {
                    var e3 = _step13.value;
                    Object.defineProperty(Parser4.prototype, e3, {
                      value: ParserImpl.prototype[e3],
                      enumerable: false,
                      writable: false
                    });
                  }
                } catch (err) {
                  _iterator16.e(err);
                } finally {
                  _iterator16.f();
                }

                Parser4.Language = Language, Module.onRuntimeInitialized = function () {
                  ParserImpl.init(), e2();
                };
              }));
            }
          }]);

          return Parser4;
        }();

        return Parser4;
      }();

      _typeof(exports) == "object" && (module.exports = TreeSitter);
    }
  }); // server/src/browser/main.ts


  var import_browser = __toModule(require_browser3()); // server/src/common/features/symbolIndex.ts


  var lsp5 = __toModule(require_main4()); // server/src/common/common.ts


  var lsp = __toModule(require_main4());

  var symbolMapping = new ( /*#__PURE__*/function () {
    function _class13() {
      _classCallCheck(this, _class13);

      this._symbolKindMapping = new Map([["file", lsp.SymbolKind.File], ["module", lsp.SymbolKind.Module], ["namespace", lsp.SymbolKind.Namespace], ["package", lsp.SymbolKind.Package], ["class", lsp.SymbolKind.Class], ["method", lsp.SymbolKind.Method], ["property", lsp.SymbolKind.Property], ["field", lsp.SymbolKind.Field], ["constructor", lsp.SymbolKind.Constructor], ["enum", lsp.SymbolKind.Enum], ["interface", lsp.SymbolKind.Interface], ["function", lsp.SymbolKind.Function], ["variable", lsp.SymbolKind.Variable], ["constant", lsp.SymbolKind.Constant], ["string", lsp.SymbolKind.String], ["number", lsp.SymbolKind.Number], ["boolean", lsp.SymbolKind.Boolean], ["array", lsp.SymbolKind.Array], ["object", lsp.SymbolKind.Object], ["key", lsp.SymbolKind.Key], ["null", lsp.SymbolKind.Null], ["enumMember", lsp.SymbolKind.EnumMember], ["struct", lsp.SymbolKind.Struct], ["event", lsp.SymbolKind.Event], ["operator", lsp.SymbolKind.Operator], ["typeParameter", lsp.SymbolKind.TypeParameter]]);
    }

    _createClass(_class13, [{
      key: "getSymbolKind",
      value: function getSymbolKind(symbolKind, strict) {
        var res = this._symbolKindMapping.get(symbolKind);

        if (!res && strict) {
          return void 0;
        }

        return res !== null && res !== void 0 ? res : lsp.SymbolKind.Variable;
      }
    }]);

    return _class13;
  }())();

  function asLspRange(node) {
    return lsp.Range.create(node.startPosition.row, node.startPosition.column, node.endPosition.row, node.endPosition.column);
  }

  function identifierAtPosition(identQuery, node, position) {
    var candidate = nodeAtPosition(node, position, false);
    var capture = identQuery.captures(candidate);

    if (capture.length === 1) {
      return candidate;
    }

    candidate = nodeAtPosition(node, position, true);
    capture = identQuery.captures(candidate);

    if (capture.length === 1) {
      return candidate;
    }

    return void 0;
  }

  function nodeAtPosition(node, position) {
    var leftBias = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var _iterator17 = _createForOfIteratorHelper(node.children),
        _step14;

    try {
      for (_iterator17.s(); !(_step14 = _iterator17.n()).done;) {
        var child = _step14.value;
        var range = asLspRange(child);

        if (isBeforeOrEqual(range.start, position)) {
          if (isBefore(position, range.end)) {
            return nodeAtPosition(child, position, leftBias);
          }

          if (leftBias && isBeforeOrEqual(position, range.end)) {
            return nodeAtPosition(child, position, leftBias);
          }
        }
      }
    } catch (err) {
      _iterator17.e(err);
    } finally {
      _iterator17.f();
    }

    return node;
  }

  function isBeforeOrEqual(a, b) {
    if (a.line < b.line) {
      return true;
    }

    if (b.line < a.line) {
      return false;
    }

    return a.character <= b.character;
  }

  function isBefore(a, b) {
    if (a.line < b.line) {
      return true;
    }

    if (b.line < a.line) {
      return false;
    }

    return a.character < b.character;
  }

  function compareRangeByStart(a, b) {
    if (isBefore(a.start, b.start)) {
      return -1;
    } else if (isBefore(b.start, a.start)) {
      return 1;
    }

    if (isBefore(a.end, b.end)) {
      return -1;
    } else if (isBefore(b.end, a.end)) {
      return 1;
    }

    return 0;
  }

  function containsPosition(range, position) {
    return isBeforeOrEqual(range.start, position) && isBeforeOrEqual(position, range.end);
  }

  function containsRange(range, other) {
    return containsPosition(range, other.start) && containsPosition(range, other.end);
  }

  var StopWatch = /*#__PURE__*/function () {
    function StopWatch() {
      _classCallCheck(this, StopWatch);

      this.t1 = performance.now();
    }

    _createClass(StopWatch, [{
      key: "reset",
      value: function reset() {
        this.t1 = performance.now();
      }
    }, {
      key: "elapsed",
      value: function elapsed() {
        return (performance.now() - this.t1).toFixed(2);
      }
    }]);

    return StopWatch;
  }();

  function isInteresting(uri) {
    return !/^(git|github|vsls|review):/i.test(uri);
  }

  function parallel(_x9, _x10, _x11) {
    return _parallel.apply(this, arguments);
  } // server/src/common/util/trie.ts


  function _parallel() {
    _parallel = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee35(tasks, degree, token) {
      var result, pos, partTasks, partResult;
      return regeneratorRuntime.wrap(function _callee35$(_context40) {
        while (1) {
          switch (_context40.prev = _context40.next) {
            case 0:
              result = [];
              pos = 0;

            case 2:
              if (!true) {
                _context40.next = 15;
                break;
              }

              if (!token.isCancellationRequested) {
                _context40.next = 5;
                break;
              }

              throw new Error("cancelled");

            case 5:
              partTasks = tasks.slice(pos, pos + degree);

              if (!(partTasks.length === 0)) {
                _context40.next = 8;
                break;
              }

              return _context40.abrupt("break", 15);

            case 8:
              _context40.next = 10;
              return Promise.all(partTasks.map(function (task) {
                return task(token);
              }));

            case 10:
              partResult = _context40.sent;
              pos += degree;
              result.push.apply(result, _toConsumableArray(partResult));
              _context40.next = 2;
              break;

            case 15:
              return _context40.abrupt("return", result);

            case 16:
            case "end":
              return _context40.stop();
          }
        }
      }, _callee35);
    }));
    return _parallel.apply(this, arguments);
  }

  var Entry = /*#__PURE__*/_createClass(function Entry(key, value) {
    _classCallCheck(this, Entry);

    this.key = key;
    this.value = value;
  });

  var Trie = /*#__PURE__*/function (_Symbol$iterator) {
    function Trie(ch, element) {
      _classCallCheck(this, Trie);

      this.ch = ch;
      this.element = element;
      this._size = 0;
      this._depth = 0;
      this._children = new Map();
    }

    _createClass(Trie, [{
      key: "size",
      get: function get() {
        return this._size;
      }
    }, {
      key: "depth",
      get: function get() {
        return this._depth;
      }
    }, {
      key: "set",
      value: function set(str, element) {
        var chars = Array.from(str);
        var node = this;

        for (var pos = 0; pos < chars.length; pos++) {
          node._depth = Math.max(chars.length - pos, node._depth);
          var ch = chars[pos];

          var child = node._children.get(ch);

          if (!child) {
            child = new Trie(ch, void 0);

            node._children.set(ch, child);
          }

          node = child;
        }

        if (!node.element) {
          this._size += 1;
          node.element = new Entry(str, element);
        } else {
          node.element.value = element;
        }
      }
    }, {
      key: "get",
      value: function get(str) {
        var _node$element;

        var chars = Array.from(str);
        var node = this;

        for (var pos = 0; pos < chars.length; pos++) {
          var ch = chars[pos];

          var child = node._children.get(ch);

          if (!child) {
            return void 0;
          }

          node = child;
        }

        return (_node$element = node.element) === null || _node$element === void 0 ? void 0 : _node$element.value;
      }
    }, {
      key: "delete",
      value: function _delete(str) {
        var chars = Array.from(str);
        var node = this;
        var path = [];

        for (var pos = 0; pos < chars.length; pos++) {
          var ch = chars[pos];

          var child = node._children.get(ch);

          if (!child) {
            return false;
          }

          path.push([ch, node]);
          node = child;
        }

        if (!node.element) {
          return false;
        }

        node.element = void 0;
        this._size -= 1;

        while (path.length > 0) {
          var _path$pop = path.pop(),
              _path$pop2 = _slicedToArray(_path$pop, 2),
              nodeCh = _path$pop2[0],
              parent = _path$pop2[1];

          if (node._children.size === 0 && !node.element) {
            parent._children.delete(nodeCh);
          }

          node = parent;

          if (node._children.size === 0) {
            node._depth = 0;
          } else {
            var newDepth = 0;

            var _iterator18 = _createForOfIteratorHelper(node._children.values()),
                _step15;

            try {
              for (_iterator18.s(); !(_step15 = _iterator18.n()).done;) {
                var _child = _step15.value;
                newDepth = Math.max(newDepth, _child.depth);
              }
            } catch (err) {
              _iterator18.e(err);
            } finally {
              _iterator18.f();
            }

            node._depth = 1 + newDepth;
          }
        }

        return true;
      }
    }, {
      key: "query",
      value: /*#__PURE__*/regeneratorRuntime.mark(function query(str) {
        var bucket, cache, _query, _iterator20, _step17, item;

        return regeneratorRuntime.wrap(function query$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                bucket = new Set();
                cache = new Map();

                _query = function _query(node, str2, pos, skipped, lastCh) {
                  if (bucket.has(node)) {
                    return;
                  }

                  if (skipped > 12) {
                    return;
                  }

                  var map = cache.get(node);

                  if (map !== null && map !== void 0 && map.get(pos)) {
                    return;
                  }

                  if (map) {
                    map.set(pos, true);
                  } else {
                    cache.set(node, new Map([[pos, true]]));
                  }

                  if (pos >= str2.length) {
                    bucket.add(node);
                    return;
                  }

                  if (str2.length - pos > node._depth) {
                    return;
                  }

                  var _iterator19 = _createForOfIteratorHelper(node._children),
                      _step16;

                  try {
                    for (_iterator19.s(); !(_step16 = _iterator19.n()).done;) {
                      var _step16$value = _slicedToArray(_step16.value, 2),
                          ch = _step16$value[0],
                          child = _step16$value[1];

                      if (ch.toLowerCase() === str2[pos].toLowerCase()) {
                        _query(child, str2, pos + 1, skipped, ch);
                      }

                      _query(child, str2, pos, skipped + 1, ch);
                    }
                  } catch (err) {
                    _iterator19.e(err);
                  } finally {
                    _iterator19.f();
                  }
                };

                _query(this, str, 0, 0, this.ch);

                _iterator20 = _createForOfIteratorHelper(bucket);
                _context4.prev = 5;

                _iterator20.s();

              case 7:
                if ((_step17 = _iterator20.n()).done) {
                  _context4.next = 12;
                  break;
                }

                item = _step17.value;
                return _context4.delegateYield(item, "t0", 10);

              case 10:
                _context4.next = 7;
                break;

              case 12:
                _context4.next = 17;
                break;

              case 14:
                _context4.prev = 14;
                _context4.t1 = _context4["catch"](5);

                _iterator20.e(_context4.t1);

              case 17:
                _context4.prev = 17;

                _iterator20.f();

                return _context4.finish(17);

              case 20:
              case "end":
                return _context4.stop();
            }
          }
        }, query, this, [[5, 14, 17, 20]]);
      })
    }, {
      key: _Symbol$iterator,
      value: /*#__PURE__*/regeneratorRuntime.mark(function value() {
        var stack, node, _iterator21, _step18, child;

        return regeneratorRuntime.wrap(function value$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                stack = [this];

              case 1:
                if (!(stack.length > 0)) {
                  _context5.next = 10;
                  break;
                }

                node = stack.shift();

                if (!node.element) {
                  _context5.next = 6;
                  break;
                }

                _context5.next = 6;
                return [node.element.key, node.element.value];

              case 6:
                _iterator21 = _createForOfIteratorHelper(node._children.values());

                try {
                  for (_iterator21.s(); !(_step18 = _iterator21.n()).done;) {
                    child = _step18.value;
                    stack.push(child);
                  }
                } catch (err) {
                  _iterator21.e(err);
                } finally {
                  _iterator21.f();
                }

                _context5.next = 1;
                break;

              case 10:
              case "end":
                return _context5.stop();
            }
          }
        }, value, this);
      })
    }], [{
      key: "create",
      value: function create() {
        return new Trie("", void 0);
      }
    }]);

    return Trie;
  }(Symbol.iterator); // server/src/common/features/documentSymbols.ts


  var lsp2 = __toModule(require_main4()); // server/src/common/languages.ts


  var import_web_tree_sitter = __toModule(require_tree_sitter());

  var _queryModules = new Map([]);

  var Languages = /*#__PURE__*/function () {
    function Languages() {
      _classCallCheck(this, Languages);
    }

    _createClass(Languages, null, [{
      key: "init",
      value: function () {
        var _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(langConfiguration) {
          var _iterator22, _step19, _step19$value, entry, config, lang;

          return regeneratorRuntime.wrap(function _callee4$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  this._langConfiguration = langConfiguration;
                  _iterator22 = _createForOfIteratorHelper(langConfiguration);
                  _context6.prev = 2;

                  _iterator22.s();

                case 4:
                  if ((_step19 = _iterator22.n()).done) {
                    _context6.next = 14;
                    break;
                  }

                  _step19$value = _slicedToArray(_step19.value, 2), entry = _step19$value[0], config = _step19$value[1];
                  _context6.next = 8;
                  return import_web_tree_sitter.default.Language.load(entry.wasmUri);

                case 8:
                  lang = _context6.sent;

                  this._languageInstances.set(entry.languageId, lang);

                  this._configurations.set(entry.languageId, config);

                  if (entry.queries) {
                    _queryModules.set(entry.languageId, entry.queries);
                  }

                case 12:
                  _context6.next = 4;
                  break;

                case 14:
                  _context6.next = 19;
                  break;

                case 16:
                  _context6.prev = 16;
                  _context6.t0 = _context6["catch"](2);

                  _iterator22.e(_context6.t0);

                case 19:
                  _context6.prev = 19;

                  _iterator22.f();

                  return _context6.finish(19);

                case 22:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee4, this, [[2, 16, 19, 22]]);
        }));

        function init(_x12) {
          return _init.apply(this, arguments);
        }

        return init;
      }()
    }, {
      key: "getLanguage",
      value: function getLanguage(languageId) {
        var result = this._languageInstances.get(languageId);

        if (!result) {
          console.warn("UNKNOWN languages: '".concat(languageId, "'"));
          return void 0;
        }

        return result;
      }
    }, {
      key: "allAsSelector",
      value: function allAsSelector() {
        return _toConsumableArray(this._languageInstances.keys());
      }
    }, {
      key: "getQuery",
      value: function getQuery(languageId, type) {
        var _module$type;

        var strict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        var module = _queryModules.get(languageId);

        if (!module) {
          return this.getLanguage(languageId).query("");
        }

        var source = (_module$type = module[type]) !== null && _module$type !== void 0 ? _module$type : "";
        var key = "".concat(languageId, "/").concat(type);

        var query = this._queryInstances.get(key);

        if (!query) {
          try {
            query = this.getLanguage(languageId).query(source);
          } catch (e) {
            query = this.getLanguage(languageId).query("");
            console.error(languageId, e);

            if (strict) {
              throw e;
            }
          }

          this._queryInstances.set(key, query);
        }

        return query;
      }
    }, {
      key: "getSupportedLanguages",
      value: function getSupportedLanguages(feature, types) {
        var result = [];

        var _iterator23 = _createForOfIteratorHelper(this._languageInstances.keys()),
            _step20;

        try {
          for (_iterator23.s(); !(_step20 = _iterator23.n()).done;) {
            var languageId = _step20.value;

            var module = _queryModules.get(languageId);

            if (!module) {
              console.warn("".concat(languageId, " NOT supported by queries"));
              continue;
            }

            var _iterator24 = _createForOfIteratorHelper(types),
                _step21;

            try {
              for (_iterator24.s(); !(_step21 = _iterator24.n()).done;) {
                var _this$_configurations;

                var type = _step21.value;

                if (module[type] && (_this$_configurations = this._configurations.get(languageId)) !== null && _this$_configurations !== void 0 && _this$_configurations[feature]) {
                  result.push(languageId);
                  break;
                }
              }
            } catch (err) {
              _iterator24.e(err);
            } finally {
              _iterator24.f();
            }
          }
        } catch (err) {
          _iterator23.e(err);
        } finally {
          _iterator23.f();
        }

        return result;
      }
    }, {
      key: "getLanguageIdByUri",
      value: function getLanguageIdByUri(uri) {
        var end = uri.lastIndexOf("?");

        if (end < 0) {
          end = uri.lastIndexOf("#");
        }

        if (end > 0) {
          uri = uri.substring(0, end);
        }

        var start = uri.lastIndexOf(".");
        var suffix = uri.substring(start + 1);

        var _iterator25 = _createForOfIteratorHelper(this._langConfiguration),
            _step22;

        try {
          for (_iterator25.s(); !(_step22 = _iterator25.n()).done;) {
            var _step22$value = _slicedToArray(_step22.value, 1),
                info = _step22$value[0];

            var _iterator26 = _createForOfIteratorHelper(info.suffixes),
                _step23;

            try {
              for (_iterator26.s(); !(_step23 = _iterator26.n()).done;) {
                var candidate = _step23.value;

                if (candidate === suffix) {
                  return info.languageId;
                }
              }
            } catch (err) {
              _iterator26.e(err);
            } finally {
              _iterator26.f();
            }
          }
        } catch (err) {
          _iterator25.e(err);
        } finally {
          _iterator25.f();
        }

        return "unknown/".concat(uri);
      }
    }]);

    return Languages;
  }();

  Languages._languageInstances = new Map();
  Languages._queryInstances = new Map();
  Languages._configurations = new Map(); // server/src/common/features/documentSymbols.ts

  var DocumentSymbols = /*#__PURE__*/function () {
    function DocumentSymbols(_documents, _trees) {
      _classCallCheck(this, DocumentSymbols);

      this._documents = _documents;
      this._trees = _trees;
    }

    _createClass(DocumentSymbols, [{
      key: "register",
      value: function register(connection2) {
        connection2.client.register(lsp2.DocumentSymbolRequest.type, {
          documentSelector: Languages.getSupportedLanguages("outline", ["outline"])
        });
        connection2.onRequest(lsp2.DocumentSymbolRequest.type, this.provideDocumentSymbols.bind(this));
      }
    }, {
      key: "provideDocumentSymbols",
      value: function () {
        var _provideDocumentSymbols = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(params) {
          var document;
          return regeneratorRuntime.wrap(function _callee5$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _context7.next = 2;
                  return this._documents.retrieve(params.textDocument.uri);

                case 2:
                  document = _context7.sent;
                  return _context7.abrupt("return", getDocumentSymbols(document, this._trees, false));

                case 4:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee5, this);
        }));

        function provideDocumentSymbols(_x13) {
          return _provideDocumentSymbols.apply(this, arguments);
        }

        return provideDocumentSymbols;
      }()
    }]);

    return DocumentSymbols;
  }();

  function getDocumentSymbols(document, trees, flat) {
    var Node2 = /*#__PURE__*/_createClass(function Node2(capture) {
      _classCallCheck(this, Node2);

      this.capture = capture;
      this.children = [];
      this.range = asLspRange(capture.node);
    });

    var tree = trees.getParseTree(document);

    if (!tree) {
      return [];
    }

    var query = Languages.getQuery(document.languageId, "outline");
    var captures = query.captures(tree.rootNode);
    var roots = [];
    var stack = [];

    var _iterator27 = _createForOfIteratorHelper(captures),
        _step24;

    try {
      for (_iterator27.s(); !(_step24 = _iterator27.n()).done;) {
        var capture = _step24.value;

        var _node2 = new Node2(capture);

        var parent = stack.pop();

        while (true) {
          if (!parent) {
            roots.push(_node2);
            stack.push(_node2);
            break;
          }

          if (containsRange(parent.range, _node2.range)) {
            parent.children.push(_node2);
            stack.push(parent);
            stack.push(_node2);
            break;
          }

          parent = stack.pop();
        }
      }
    } catch (err) {
      _iterator27.e(err);
    } finally {
      _iterator27.f();
    }

    function build(node, bucket) {
      var children = [];
      var nameNode;

      var _iterator28 = _createForOfIteratorHelper(node.children),
          _step25;

      try {
        for (_iterator28.s(); !(_step25 = _iterator28.n()).done;) {
          var child = _step25.value;

          if (!nameNode && child.capture.name.endsWith(".name") && child.capture.name.startsWith(node.capture.name)) {
            nameNode = child;
          } else {
            build(child, children);
          }
        }
      } catch (err) {
        _iterator28.e(err);
      } finally {
        _iterator28.f();
      }

      if (!nameNode) {
        nameNode = node;
      }

      var symbol = lsp2.DocumentSymbol.create(nameNode.capture.node.text, "", symbolMapping.getSymbolKind(node.capture.name), node.range, nameNode.range);
      symbol.children = children;
      bucket.push(symbol);
    }

    var result = [];

    for (var _i4 = 0, _roots = roots; _i4 < _roots.length; _i4++) {
      var node = _roots[_i4];
      build(node, result);
    }

    if (!flat) {
      return result;
    }

    var flatResult = [];

    (function flatten(all) {
      var _iterator29 = _createForOfIteratorHelper(all),
          _step26;

      try {
        for (_iterator29.s(); !(_step26 = _iterator29.n()).done;) {
          var item = _step26.value;
          flatResult.push(item);

          if (item.children) {
            flatten(item.children);
          }
        }
      } catch (err) {
        _iterator29.e(err);
      } finally {
        _iterator29.f();
      }
    })(result);

    return flatResult;
  } // server/src/common/features/references.ts


  var lsp4 = __toModule(require_main4()); // server/src/common/features/locals.ts


  var lsp3 = __toModule(require_main4());

  var Locals = /*#__PURE__*/function () {
    function Locals(document, root) {
      _classCallCheck(this, Locals);

      this.document = document;
      this.root = root;
    }

    _createClass(Locals, [{
      key: "debugPrint",
      value: function debugPrint() {
        console.log(this.root.toString());
      }
    }], [{
      key: "create",
      value: function create(document, trees) {
        var root = new Scope(lsp3.Range.create(0, 0, document.lineCount, 0), true);
        var tree = trees.getParseTree(document);

        if (!tree) {
          return new Locals(document, root);
        }

        var all = [];
        var query = Languages.getQuery(document.languageId, "locals");
        var captures = query.captures(tree.rootNode).sort(this._compareCaptures);
        var scopeCaptures = captures.filter(function (capture) {
          return capture.name.startsWith("scope");
        });

        for (var i = 0; i < scopeCaptures.length; i++) {
          var capture = scopeCaptures[i];
          var range = asLspRange(capture.node);
          all.push(new Scope(range, capture.name.endsWith(".exports")));
        }

        this._fillInDefinitionsAndUsages(all, captures);

        this._constructTree(root, all);

        var info = new Locals(document, root);
        return info;
      }
    }, {
      key: "_fillInDefinitionsAndUsages",
      value: function _fillInDefinitionsAndUsages(bucket, captures) {
        var _iterator30 = _createForOfIteratorHelper(captures),
            _step27;

        try {
          for (_iterator30.s(); !(_step27 = _iterator30.n()).done;) {
            var capture = _step27.value;

            if (capture.name.startsWith("local")) {
              bucket.push(new Definition(capture.node.text, asLspRange(capture.node), capture.name.endsWith(".escape")));
            } else if (capture.name.startsWith("usage")) {
              bucket.push(new Usage(capture.node.text, asLspRange(capture.node), capture.name.endsWith(".void")));
            }
          }
        } catch (err) {
          _iterator30.e(err);
        } finally {
          _iterator30.f();
        }
      }
    }, {
      key: "_constructTree",
      value: function _constructTree(root, nodes) {
        var stack = [];

        var _iterator31 = _createForOfIteratorHelper(nodes.sort(this._compareByRange)),
            _step28;

        try {
          for (_iterator31.s(); !(_step28 = _iterator31.n()).done;) {
            var thing = _step28.value;

            while (true) {
              var _stack$pop;

              var parent = (_stack$pop = stack.pop()) !== null && _stack$pop !== void 0 ? _stack$pop : root;

              if (containsRange(parent.range, thing.range)) {
                if (thing instanceof Definition && thing.escapeToParent) {
                  var _stack;

                  ((_stack = stack[stack.length - 1]) !== null && _stack !== void 0 ? _stack : root).appendChild(thing);
                } else {
                  parent.appendChild(thing);
                }

                stack.push(parent);
                stack.push(thing);
                break;
              }

              if (parent === root) {
                break;
              }
            }
          }
        } catch (err) {
          _iterator31.e(err);
        } finally {
          _iterator31.f();
        }

        stack.length = 0;
        stack.push(root);

        while (stack.length > 0) {
          var n = stack.pop();

          if (n instanceof Usage && n.isHelper) {
            n.remove();
          } else {
            stack.push.apply(stack, _toConsumableArray(n.children()));
          }
        }
      }
    }, {
      key: "_compareCaptures",
      value: function _compareCaptures(a, b) {
        return a.node.startIndex - b.node.startIndex;
      }
    }, {
      key: "_compareByRange",
      value: function _compareByRange(a, b) {
        return compareRangeByStart(a.range, b.range);
      }
    }]);

    return Locals;
  }();

  var NodeType;

  (function (NodeType2) {
    NodeType2[NodeType2["Scope"] = 0] = "Scope";
    NodeType2[NodeType2["Definition"] = 1] = "Definition";
    NodeType2[NodeType2["Usage"] = 2] = "Usage";
  })(NodeType || (NodeType = {}));

  var Node = /*#__PURE__*/function () {
    function Node(range, type) {
      _classCallCheck(this, Node);

      this.range = range;
      this.type = type;
      this._children = [];
    }

    _createClass(Node, [{
      key: "children",
      value: function children() {
        return this._children;
      }
    }, {
      key: "remove",
      value: function remove() {
        if (!this._parent) {
          return false;
        }

        var idx = this._parent._children.indexOf(this);

        if (idx < 0) {
          return false;
        }

        this._parent._children.splice(idx, 1);

        return true;
      }
    }, {
      key: "appendChild",
      value: function appendChild(node) {
        this._children.push(node);

        node._parent = this;
      }
    }, {
      key: "toString",
      value: function toString() {
        return "".concat(this.type, "@").concat(this.range.start.line, ",").concat(this.range.start.character, "-").concat(this.range.end.line, ",").concat(this.range.end.character);
      }
    }]);

    return Node;
  }();

  var Usage = /*#__PURE__*/function (_Node) {
    _inherits(Usage, _Node);

    var _super50 = _createSuper(Usage);

    function Usage(name, range, isHelper) {
      var _this56;

      _classCallCheck(this, Usage);

      _this56 = _super50.call(this, range, 2);
      _this56.name = name;
      _this56.range = range;
      _this56.isHelper = isHelper;
      return _this56;
    }

    _createClass(Usage, [{
      key: "appendChild",
      value: function appendChild(_node) {}
    }, {
      key: "toString",
      value: function toString() {
        return "use:".concat(this.name);
      }
    }, {
      key: "scope",
      get: function get() {
        return this._parent;
      }
    }]);

    return Usage;
  }(Node);

  var Definition = /*#__PURE__*/function (_Node2) {
    _inherits(Definition, _Node2);

    var _super51 = _createSuper(Definition);

    function Definition(name, range, escapeToParent) {
      var _this57;

      _classCallCheck(this, Definition);

      _this57 = _super51.call(this, range, 1);
      _this57.name = name;
      _this57.range = range;
      _this57.escapeToParent = escapeToParent;
      return _this57;
    }

    _createClass(Definition, [{
      key: "appendChild",
      value: function appendChild(_node) {}
    }, {
      key: "toString",
      value: function toString() {
        return "def:".concat(this.name);
      }
    }, {
      key: "scope",
      get: function get() {
        return this._parent;
      }
    }]);

    return Definition;
  }(Node);

  var Scope = /*#__PURE__*/function (_Node3) {
    _inherits(Scope, _Node3);

    var _super52 = _createSuper(Scope);

    function Scope(range, likelyExports) {
      var _this58;

      _classCallCheck(this, Scope);

      _this58 = _super52.call(this, range, 0);
      _this58.likelyExports = likelyExports;
      return _this58;
    }

    _createClass(Scope, [{
      key: "definitions",
      value: /*#__PURE__*/regeneratorRuntime.mark(function definitions() {
        var _iterator32, _step29, item;

        return regeneratorRuntime.wrap(function definitions$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _iterator32 = _createForOfIteratorHelper(this._children);
                _context8.prev = 1;

                _iterator32.s();

              case 3:
                if ((_step29 = _iterator32.n()).done) {
                  _context8.next = 10;
                  break;
                }

                item = _step29.value;

                if (!(item instanceof Definition)) {
                  _context8.next = 8;
                  break;
                }

                _context8.next = 8;
                return item;

              case 8:
                _context8.next = 3;
                break;

              case 10:
                _context8.next = 15;
                break;

              case 12:
                _context8.prev = 12;
                _context8.t0 = _context8["catch"](1);

                _iterator32.e(_context8.t0);

              case 15:
                _context8.prev = 15;

                _iterator32.f();

                return _context8.finish(15);

              case 18:
              case "end":
                return _context8.stop();
            }
          }
        }, definitions, this, [[1, 12, 15, 18]]);
      })
    }, {
      key: "usages",
      value: /*#__PURE__*/regeneratorRuntime.mark(function usages() {
        var _iterator33, _step30, item;

        return regeneratorRuntime.wrap(function usages$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _iterator33 = _createForOfIteratorHelper(this._children);
                _context9.prev = 1;

                _iterator33.s();

              case 3:
                if ((_step30 = _iterator33.n()).done) {
                  _context9.next = 10;
                  break;
                }

                item = _step30.value;

                if (!(item instanceof Usage)) {
                  _context9.next = 8;
                  break;
                }

                _context9.next = 8;
                return item;

              case 8:
                _context9.next = 3;
                break;

              case 10:
                _context9.next = 15;
                break;

              case 12:
                _context9.prev = 12;
                _context9.t0 = _context9["catch"](1);

                _iterator33.e(_context9.t0);

              case 15:
                _context9.prev = 15;

                _iterator33.f();

                return _context9.finish(15);

              case 18:
              case "end":
                return _context9.stop();
            }
          }
        }, usages, this, [[1, 12, 15, 18]]);
      })
    }, {
      key: "scopes",
      value: /*#__PURE__*/regeneratorRuntime.mark(function scopes() {
        var _iterator34, _step31, item;

        return regeneratorRuntime.wrap(function scopes$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _iterator34 = _createForOfIteratorHelper(this._children);
                _context10.prev = 1;

                _iterator34.s();

              case 3:
                if ((_step31 = _iterator34.n()).done) {
                  _context10.next = 10;
                  break;
                }

                item = _step31.value;

                if (!(item instanceof Scope)) {
                  _context10.next = 8;
                  break;
                }

                _context10.next = 8;
                return item;

              case 8:
                _context10.next = 3;
                break;

              case 10:
                _context10.next = 15;
                break;

              case 12:
                _context10.prev = 12;
                _context10.t0 = _context10["catch"](1);

                _iterator34.e(_context10.t0);

              case 15:
                _context10.prev = 15;

                _iterator34.f();

                return _context10.finish(15);

              case 18:
              case "end":
                return _context10.stop();
            }
          }
        }, scopes, this, [[1, 12, 15, 18]]);
      })
    }, {
      key: "_findScope",
      value: function _findScope(position) {
        var _iterator35 = _createForOfIteratorHelper(this.scopes()),
            _step32;

        try {
          for (_iterator35.s(); !(_step32 = _iterator35.n()).done;) {
            var scope = _step32.value;

            if (containsPosition(scope.range, position)) {
              return scope._findScope(position);
            }
          }
        } catch (err) {
          _iterator35.e(err);
        } finally {
          _iterator35.f();
        }

        return this;
      }
    }, {
      key: "findDefinitionOrUsage",
      value: function findDefinitionOrUsage(position) {
        var scope = this._findScope(position);

        while (true) {
          var _iterator36 = _createForOfIteratorHelper(scope._children),
              _step33;

          try {
            for (_iterator36.s(); !(_step33 = _iterator36.n()).done;) {
              var child = _step33.value;

              if ((child instanceof Definition || child instanceof Usage) && containsPosition(child.range, position)) {
                return child;
              }
            }
          } catch (err) {
            _iterator36.e(err);
          } finally {
            _iterator36.f();
          }

          if (scope._parent instanceof Scope) {
            scope = scope._parent;
          } else {
            break;
          }
        }
      }
    }, {
      key: "findDefinitions",
      value: function findDefinitions(text) {
        var result = [];

        var _iterator37 = _createForOfIteratorHelper(this.definitions()),
            _step34;

        try {
          for (_iterator37.s(); !(_step34 = _iterator37.n()).done;) {
            var child = _step34.value;

            if (child.name === text) {
              result.push(child);
            }
          }
        } catch (err) {
          _iterator37.e(err);
        } finally {
          _iterator37.f();
        }

        if (result.length > 0) {
          return result;
        }

        if (!(this._parent instanceof Scope)) {
          return [];
        }

        return this._parent.findDefinitions(text);
      }
    }, {
      key: "findUsages",
      value: function findUsages(text) {
        var bucket = [];
        var scope = this;

        while (!scope._defines(text)) {
          if (scope._parent instanceof Scope) {
            scope = scope._parent;
          } else {
            break;
          }
        }

        scope._findUsagesDown(text, bucket);

        return bucket.flat();
      }
    }, {
      key: "_findUsagesDown",
      value: function _findUsagesDown(text, bucket) {
        var result = [];

        var _iterator38 = _createForOfIteratorHelper(this.usages()),
            _step35;

        try {
          for (_iterator38.s(); !(_step35 = _iterator38.n()).done;) {
            var child = _step35.value;

            if (child.name === text) {
              result.push(child);
            }
          }
        } catch (err) {
          _iterator38.e(err);
        } finally {
          _iterator38.f();
        }

        bucket.push(result);

        var _iterator39 = _createForOfIteratorHelper(this.scopes()),
            _step36;

        try {
          for (_iterator39.s(); !(_step36 = _iterator39.n()).done;) {
            var _child2 = _step36.value;

            if (!_child2._defines(text)) {
              _child2._findUsagesDown(text, bucket);
            }
          }
        } catch (err) {
          _iterator39.e(err);
        } finally {
          _iterator39.f();
        }
      }
    }, {
      key: "_defines",
      value: function _defines(text) {
        var _iterator40 = _createForOfIteratorHelper(this.definitions()),
            _step37;

        try {
          for (_iterator40.s(); !(_step37 = _iterator40.n()).done;) {
            var child = _step37.value;

            if (child.name === text) {
              return true;
            }
          }
        } catch (err) {
          _iterator40.e(err);
        } finally {
          _iterator40.f();
        }

        return false;
      }
    }, {
      key: "toString",
      value: function toString() {
        var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var scopes = [];
        var parts = [];

        this._children.slice(0).forEach(function (child) {
          if (child instanceof Scope) {
            scopes.push(child.toString(depth + 2));
          } else {
            parts.push(child.toString());
          }
        });

        var indent = " ".repeat(depth);
        var res = "".concat(indent, "Scope@").concat(this.range.start.line, ",").concat(this.range.start.character, "-").concat(this.range.end.line, ",").concat(this.range.end.character);
        res += "\n".concat(indent + indent).concat(parts.join(", "));
        res += "\n".concat(indent).concat(scopes.join("\n".concat(indent)));
        return res;
      }
    }]);

    return Scope;
  }(Node); // server/src/common/features/references.ts


  var ReferencesProvider = /*#__PURE__*/function () {
    function ReferencesProvider(_documents, _trees, _symbols) {
      _classCallCheck(this, ReferencesProvider);

      this._documents = _documents;
      this._trees = _trees;
      this._symbols = _symbols;
    }

    _createClass(ReferencesProvider, [{
      key: "register",
      value: function register(connection2) {
        connection2.client.register(lsp4.ReferencesRequest.type, {
          documentSelector: Languages.getSupportedLanguages("references", ["locals", "identifiers", "references"])
        });
        connection2.onRequest(lsp4.ReferencesRequest.type, this.provideReferences.bind(this));
      }
    }, {
      key: "provideReferences",
      value: function () {
        var _provideReferences = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(params) {
          var document, info, anchor, _definitions, result, _iterator41, _step38, def, _usages, _iterator42, _step39, usage;

          return regeneratorRuntime.wrap(function _callee6$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  _context11.next = 2;
                  return this._documents.retrieve(params.textDocument.uri);

                case 2:
                  document = _context11.sent;
                  info = Locals.create(document, this._trees);
                  anchor = info.root.findDefinitionOrUsage(params.position);

                  if (!(anchor && !anchor.scope.likelyExports)) {
                    _context11.next = 15;
                    break;
                  }

                  _definitions = anchor.scope.findDefinitions(anchor.name);

                  if (!(_definitions.length > 0)) {
                    _context11.next = 15;
                    break;
                  }

                  result = [];
                  _iterator41 = _createForOfIteratorHelper(_definitions);

                  try {
                    for (_iterator41.s(); !(_step38 = _iterator41.n()).done;) {
                      def = _step38.value;

                      if (params.context.includeDeclaration) {
                        result.push(lsp4.Location.create(document.uri, def.range));
                      }
                    }
                  } catch (err) {
                    _iterator41.e(err);
                  } finally {
                    _iterator41.f();
                  }

                  _usages = anchor.scope.findUsages(anchor.name);
                  _iterator42 = _createForOfIteratorHelper(_usages);

                  try {
                    for (_iterator42.s(); !(_step39 = _iterator42.n()).done;) {
                      usage = _step39.value;
                      result.push(lsp4.Location.create(document.uri, usage.range));
                    }
                  } catch (err) {
                    _iterator42.e(err);
                  } finally {
                    _iterator42.f();
                  }

                  return _context11.abrupt("return", result);

                case 15:
                  _context11.next = 17;
                  return this._findGlobalReferences(document, params.position, params.context.includeDeclaration);

                case 17:
                  return _context11.abrupt("return", _context11.sent);

                case 18:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee6, this);
        }));

        function provideReferences(_x14) {
          return _provideReferences.apply(this, arguments);
        }

        return provideReferences;
      }()
    }, {
      key: "_findGlobalReferences",
      value: function () {
        var _findGlobalReferences2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(document, position, includeDeclaration) {
          var _identifierAtPosition;

          var tree, query, ident, result, seenAsUsage, seenAsDef, usages, _iterator43, _step40, usage, definitions, _iterator44, _step41, location;

          return regeneratorRuntime.wrap(function _callee7$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  tree = this._trees.getParseTree(document);

                  if (tree) {
                    _context12.next = 3;
                    break;
                  }

                  return _context12.abrupt("return", []);

                case 3:
                  query = Languages.getQuery(document.languageId, "identifiers");
                  ident = (_identifierAtPosition = identifierAtPosition(query, tree.rootNode, position)) === null || _identifierAtPosition === void 0 ? void 0 : _identifierAtPosition.text;

                  if (ident) {
                    _context12.next = 7;
                    break;
                  }

                  return _context12.abrupt("return", []);

                case 7:
                  result = [];
                  seenAsUsage = false;
                  seenAsDef = false;
                  _context12.next = 12;
                  return this._symbols.getUsages(ident, document);

                case 12:
                  usages = _context12.sent;
                  _iterator43 = _createForOfIteratorHelper(usages);

                  try {
                    for (_iterator43.s(); !(_step40 = _iterator43.n()).done;) {
                      usage = _step40.value;
                      seenAsUsage = seenAsUsage || containsPosition(usage.range, position);
                      result.push(usage);
                    }
                  } catch (err) {
                    _iterator43.e(err);
                  } finally {
                    _iterator43.f();
                  }

                  _context12.next = 17;
                  return this._symbols.getDefinitions(ident, document);

                case 17:
                  definitions = _context12.sent;
                  _iterator44 = _createForOfIteratorHelper(definitions);

                  try {
                    for (_iterator44.s(); !(_step41 = _iterator44.n()).done;) {
                      location = _step41.value.location;
                      seenAsDef = seenAsDef || containsPosition(location.range, position);

                      if (includeDeclaration) {
                        result.push(location);
                      }
                    }
                  } catch (err) {
                    _iterator44.e(err);
                  } finally {
                    _iterator44.f();
                  }

                  if (!(!seenAsUsage && !seenAsDef)) {
                    _context12.next = 22;
                    break;
                  }

                  return _context12.abrupt("return", []);

                case 22:
                  return _context12.abrupt("return", result);

                case 23:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee7, this);
        }));

        function _findGlobalReferences(_x15, _x16, _x17) {
          return _findGlobalReferences2.apply(this, arguments);
        }

        return _findGlobalReferences;
      }()
    }]);

    return ReferencesProvider;
  }();

  function getDocumentUsages(document, trees) {
    var tree = trees.getParseTree(document);

    if (!tree) {
      return [];
    }

    var query = Languages.getQuery(document.languageId, "references");
    var captures = query.captures(tree.rootNode);
    var result = [];

    var _iterator45 = _createForOfIteratorHelper(captures),
        _step42;

    try {
      for (_iterator45.s(); !(_step42 = _iterator45.n()).done;) {
        var capture = _step42.value;
        var name = capture.node.text;
        var range = asLspRange(capture.node);
        result.push({
          name: name,
          range: range,
          kind: lsp4.SymbolKind.File
        });
      }
    } catch (err) {
      _iterator45.e(err);
    } finally {
      _iterator45.f();
    }

    return result;
  } // server/src/common/features/symbolIndex.ts


  var Queue = /*#__PURE__*/function () {
    function Queue() {
      _classCallCheck(this, Queue);

      this._queue = new Set();
    }

    _createClass(Queue, [{
      key: "enqueue",
      value: function enqueue(uri) {
        if (isInteresting(uri) && !this._queue.has(uri)) {
          this._queue.add(uri);
        }
      }
    }, {
      key: "dequeue",
      value: function dequeue(uri) {
        this._queue.delete(uri);
      }
    }, {
      key: "consume",
      value: function consume(n, filter) {
        if (n === void 0) {
          n = this._queue.size;
        }

        var result = [];

        var _iterator46 = _createForOfIteratorHelper(this._queue),
            _step43;

        try {
          for (_iterator46.s(); !(_step43 = _iterator46.n()).done;) {
            var uri = _step43.value;

            if (!filter(uri)) {
              continue;
            }

            this._queue.delete(uri);

            if (result.push(uri) >= n) {
              break;
            }
          }
        } catch (err) {
          _iterator46.e(err);
        } finally {
          _iterator46.f();
        }

        return result;
      }
    }]);

    return Queue;
  }();

  var MemorySymbolStorage = /*#__PURE__*/function () {
    function MemorySymbolStorage() {
      _classCallCheck(this, MemorySymbolStorage);

      this._map = new Map();
    }

    _createClass(MemorySymbolStorage, [{
      key: "insert",
      value: function insert(uri, info) {
        this._map.set(uri, info);
      }
    }, {
      key: "getAll",
      value: function () {
        var _getAll = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
          return regeneratorRuntime.wrap(function _callee8$(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  return _context13.abrupt("return", this._map);

                case 1:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee8, this);
        }));

        function getAll() {
          return _getAll.apply(this, arguments);
        }

        return getAll;
      }()
    }, {
      key: "delete",
      value: function () {
        var _delete2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(uris) {
          var _iterator47, _step44, uri;

          return regeneratorRuntime.wrap(function _callee9$(_context14) {
            while (1) {
              switch (_context14.prev = _context14.next) {
                case 0:
                  _iterator47 = _createForOfIteratorHelper(uris);

                  try {
                    for (_iterator47.s(); !(_step44 = _iterator47.n()).done;) {
                      uri = _step44.value;

                      this._map.delete(uri);
                    }
                  } catch (err) {
                    _iterator47.e(err);
                  } finally {
                    _iterator47.f();
                  }

                case 2:
                case "end":
                  return _context14.stop();
              }
            }
          }, _callee9, this);
        }));

        function _delete(_x18) {
          return _delete2.apply(this, arguments);
        }

        return _delete;
      }()
    }]);

    return MemorySymbolStorage;
  }();

  var Index = /*#__PURE__*/function (_Symbol$iterator2) {
    function Index() {
      _classCallCheck(this, Index);

      this._index = Trie.create();
      this._cleanup = new Map();
    }

    _createClass(Index, [{
      key: "get",
      value: function get(text) {
        return this._index.get(text);
      }
    }, {
      key: "query",
      value: function (_query2) {
        function query(_x19) {
          return _query2.apply(this, arguments);
        }

        query.toString = function () {
          return _query2.toString();
        };

        return query;
      }(function (query) {
        return this._index.query(Array.from(query));
      })
    }, {
      key: _Symbol$iterator2,
      value: function value() {
        return this._index[Symbol.iterator]();
      }
    }, {
      key: "update",
      value: function update(uri, value) {
        var _this$_cleanup$get,
            _this59 = this;

        (_this$_cleanup$get = this._cleanup.get(uri)) === null || _this$_cleanup$get === void 0 ? void 0 : _this$_cleanup$get();

        var _iterator48 = _createForOfIteratorHelper(value),
            _step45;

        try {
          for (_iterator48.s(); !(_step45 = _iterator48.n()).done;) {
            var _step45$value = _slicedToArray(_step45.value, 2),
                name = _step45$value[0],
                kinds = _step45$value[1];

            var all = this._index.get(name);

            if (all) {
              all.set(uri, kinds);
            } else {
              this._index.set(name, new Map([[uri, kinds]]));
            }
          }
        } catch (err) {
          _iterator48.e(err);
        } finally {
          _iterator48.f();
        }

        this._cleanup.set(uri, function () {
          var _iterator49 = _createForOfIteratorHelper(value.keys()),
              _step46;

          try {
            for (_iterator49.s(); !(_step46 = _iterator49.n()).done;) {
              var name = _step46.value;

              var all = _this59._index.get(name);

              if (all) {
                if (all.delete(uri) && all.size === 0) {
                  _this59._index.delete(name);
                }
              }
            }
          } catch (err) {
            _iterator49.e(err);
          } finally {
            _iterator49.f();
          }
        });
      }
    }, {
      key: "delete",
      value: function _delete(uri) {
        var cleanupFn = this._cleanup.get(uri);

        if (cleanupFn) {
          cleanupFn();

          this._cleanup.delete(uri);

          return true;
        }

        return false;
      }
    }]);

    return Index;
  }(Symbol.iterator);

  var SuffixFilter = /*#__PURE__*/function () {
    function SuffixFilter() {
      _classCallCheck(this, SuffixFilter);

      this._suffixes = new Set();
    }

    _createClass(SuffixFilter, [{
      key: "accept",
      value: function accept(uri) {
        var _this$_regex;

        return Boolean((_this$_regex = this._regex) === null || _this$_regex === void 0 ? void 0 : _this$_regex.test(uri));
      }
    }, {
      key: "update",
      value: function update(suffixes) {
        var _iterator50 = _createForOfIteratorHelper(suffixes),
            _step47;

        try {
          for (_iterator50.s(); !(_step47 = _iterator50.n()).done;) {
            var item = _step47.value;

            this._suffixes.add(item);
          }
        } catch (err) {
          _iterator50.e(err);
        } finally {
          _iterator50.f();
        }

        this._regex = new RegExp("\\.(".concat(Array.from(this._suffixes).map(SuffixFilter._escapeRegExpCharacters).join("|"), ")"), "i");
      }
    }], [{
      key: "_escapeRegExpCharacters",
      value: function _escapeRegExpCharacters(value) {
        return value.replace(/[\\\{\}\*\+\?\|\^\$\.\[\]\(\)]/g, "\\$&");
      }
    }]);

    return SuffixFilter;
  }();

  var SymbolIndex = /*#__PURE__*/function () {
    function SymbolIndex(_trees, _documents, _symbolInfoStorage) {
      _classCallCheck(this, SymbolIndex);

      this._trees = _trees;
      this._documents = _documents;
      this._symbolInfoStorage = _symbolInfoStorage;
      this.index = new Index();
      this._syncQueue = new Queue();
      this._asyncQueue = new Queue();
      this._suffixFilter = new SuffixFilter();
    }

    _createClass(SymbolIndex, [{
      key: "addFile",
      value: function addFile(uri) {
        this._syncQueue.enqueue(uri);

        this._asyncQueue.dequeue(uri);
      }
    }, {
      key: "removeFile",
      value: function removeFile(uri) {
        this._syncQueue.dequeue(uri);

        this._asyncQueue.dequeue(uri);

        this.index.delete(uri);
      }
    }, {
      key: "update",
      value: function () {
        var _update = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
          var _this60 = this;

          var uris;
          return regeneratorRuntime.wrap(function _callee10$(_context15) {
            while (1) {
              switch (_context15.prev = _context15.next) {
                case 0:
                  _context15.next = 2;
                  return this._currentUpdate;

                case 2:
                  uris = this._syncQueue.consume(void 0, function (uri) {
                    return _this60._suffixFilter.accept(uri);
                  });
                  this._currentUpdate = this._doUpdate(uris, false);
                  return _context15.abrupt("return", this._currentUpdate);

                case 5:
                case "end":
                  return _context15.stop();
              }
            }
          }, _callee10, this);
        }));

        function update() {
          return _update.apply(this, arguments);
        }

        return update;
      }()
    }, {
      key: "_doUpdate",
      value: function () {
        var _doUpdate2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(uris, async) {
          var sw, tasks, stats, totalRetrieve, totalIndex, _iterator51, _step48, stat;

          return regeneratorRuntime.wrap(function _callee11$(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  if (!(uris.length !== 0)) {
                    _context16.next = 11;
                    break;
                  }

                  sw = new StopWatch();
                  tasks = uris.map(this._createIndexTask, this);
                  _context16.next = 5;
                  return parallel(tasks, 50, new lsp5.CancellationTokenSource().token);

                case 5:
                  stats = _context16.sent;
                  totalRetrieve = 0;
                  totalIndex = 0;
                  _iterator51 = _createForOfIteratorHelper(stats);

                  try {
                    for (_iterator51.s(); !(_step48 = _iterator51.n()).done;) {
                      stat = _step48.value;
                      totalRetrieve += stat.durationRetrieve;
                      totalIndex += stat.durationIndex;
                    }
                  } catch (err) {
                    _iterator51.e(err);
                  } finally {
                    _iterator51.f();
                  }

                  console.log("[index] (".concat(async ? "async" : "sync", ") added ").concat(uris.length, " files ").concat(sw.elapsed(), "ms (retrieval: ").concat(Math.round(totalRetrieve), "ms, indexing: ").concat(Math.round(totalIndex), "ms) (files: ").concat(uris.map(String), ")"));

                case 11:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee11, this);
        }));

        function _doUpdate(_x20, _x21) {
          return _doUpdate2.apply(this, arguments);
        }

        return _doUpdate;
      }()
    }, {
      key: "_createIndexTask",
      value: function _createIndexTask(uri) {
        var _this61 = this;

        return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
          var _t1Retrieve, document, durationRetrieve, _t1Index, durationIndex;

          return regeneratorRuntime.wrap(function _callee12$(_context17) {
            while (1) {
              switch (_context17.prev = _context17.next) {
                case 0:
                  _t1Retrieve = performance.now();
                  _context17.next = 3;
                  return _this61._documents.retrieve(uri);

                case 3:
                  document = _context17.sent;
                  durationRetrieve = performance.now() - _t1Retrieve;

                  _this61.index.delete(uri);

                  _t1Index = performance.now();

                  try {
                    _this61._doIndex(document);
                  } catch (e) {
                    console.log("FAILED to index ".concat(uri), e);
                  }

                  durationIndex = performance.now() - _t1Index;
                  return _context17.abrupt("return", {
                    durationRetrieve: durationRetrieve,
                    durationIndex: durationIndex
                  });

                case 10:
                case "end":
                  return _context17.stop();
              }
            }
          }, _callee12);
        }));
      }
    }, {
      key: "_doIndex",
      value: function _doIndex(document, symbols, usages) {
        var symbolInfo = new Map();

        if (!symbols) {
          symbols = getDocumentSymbols(document, this._trees, true);
        }

        var _iterator52 = _createForOfIteratorHelper(symbols),
            _step49;

        try {
          for (_iterator52.s(); !(_step49 = _iterator52.n()).done;) {
            var symbol = _step49.value;
            var all = symbolInfo.get(symbol.name);

            if (all) {
              all.definitions.add(symbol.kind);
            } else {
              symbolInfo.set(symbol.name, {
                definitions: new Set([symbol.kind]),
                usages: new Set()
              });
            }
          }
        } catch (err) {
          _iterator52.e(err);
        } finally {
          _iterator52.f();
        }

        if (!usages) {
          usages = getDocumentUsages(document, this._trees);
        }

        var _iterator53 = _createForOfIteratorHelper(usages),
            _step50;

        try {
          for (_iterator53.s(); !(_step50 = _iterator53.n()).done;) {
            var usage = _step50.value;

            var _all = symbolInfo.get(usage.name);

            if (_all) {
              _all.usages.add(usage.kind);
            } else {
              symbolInfo.set(usage.name, {
                definitions: new Set(),
                usages: new Set([usage.kind])
              });
            }
          }
        } catch (err) {
          _iterator53.e(err);
        } finally {
          _iterator53.f();
        }

        this.index.update(document.uri, symbolInfo);

        this._symbolInfoStorage.insert(document.uri, symbolInfo);
      }
    }, {
      key: "initFiles",
      value: function () {
        var _initFiles = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(_uris) {
          var uris, sw, persisted, obsolete, _iterator54, _step51, _step51$value, uri, data, _iterator55, _step52, _uri;

          return regeneratorRuntime.wrap(function _callee13$(_context18) {
            while (1) {
              switch (_context18.prev = _context18.next) {
                case 0:
                  uris = new Set(_uris);
                  sw = new StopWatch();
                  console.log("[index] initializing index for ".concat(uris.size, " files."));
                  _context18.next = 5;
                  return this._symbolInfoStorage.getAll();

                case 5:
                  persisted = _context18.sent;
                  obsolete = new Set();
                  _iterator54 = _createForOfIteratorHelper(persisted);

                  try {
                    for (_iterator54.s(); !(_step51 = _iterator54.n()).done;) {
                      _step51$value = _slicedToArray(_step51.value, 2), uri = _step51$value[0], data = _step51$value[1];

                      if (!uris.delete(uri)) {
                        obsolete.add(uri);
                      } else {
                        this.index.update(uri, data);

                        this._asyncQueue.enqueue(uri);
                      }
                    }
                  } catch (err) {
                    _iterator54.e(err);
                  } finally {
                    _iterator54.f();
                  }

                  _iterator55 = _createForOfIteratorHelper(uris);

                  try {
                    for (_iterator55.s(); !(_step52 = _iterator55.n()).done;) {
                      _uri = _step52.value;
                      this.addFile(_uri);
                    }
                  } catch (err) {
                    _iterator55.e(err);
                  } finally {
                    _iterator55.f();
                  }

                  _context18.next = 13;
                  return this._symbolInfoStorage.delete(obsolete);

                case 13:
                  console.log("[index] added FROM CACHE ".concat(persisted.size, " files ").concat(sw.elapsed(), "ms, all need revalidation, ").concat(uris.size, " files are NEW, ").concat(obsolete.size, " where OBSOLETE"));

                case 14:
                case "end":
                  return _context18.stop();
              }
            }
          }, _callee13, this);
        }));

        function initFiles(_x22) {
          return _initFiles.apply(this, arguments);
        }

        return initFiles;
      }()
    }, {
      key: "unleashFiles",
      value: function () {
        var _unleashFiles = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(suffixes) {
          var _this62 = this;

          var asyncUpdate;
          return regeneratorRuntime.wrap(function _callee15$(_context20) {
            while (1) {
              switch (_context20.prev = _context20.next) {
                case 0:
                  console.log("[index] unleashed files matching: ".concat(suffixes.join(",")));

                  this._suffixFilter.update(suffixes);

                  _context20.next = 4;
                  return this.update();

                case 4:
                  asyncUpdate = /*#__PURE__*/function () {
                    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
                      var uris, t1;
                      return regeneratorRuntime.wrap(function _callee14$(_context19) {
                        while (1) {
                          switch (_context19.prev = _context19.next) {
                            case 0:
                              uris = _this62._asyncQueue.consume(70, function (uri) {
                                return _this62._suffixFilter.accept(uri);
                              });

                              if (!(uris.length === 0)) {
                                _context19.next = 3;
                                break;
                              }

                              return _context19.abrupt("return");

                            case 3:
                              t1 = performance.now();
                              _context19.next = 6;
                              return _this62._doUpdate(uris, true);

                            case 6:
                              setTimeout(function () {
                                return asyncUpdate();
                              }, (performance.now() - t1) * 4);

                            case 7:
                            case "end":
                              return _context19.stop();
                          }
                        }
                      }, _callee14);
                    }));

                    return function asyncUpdate() {
                      return _ref4.apply(this, arguments);
                    };
                  }();

                  asyncUpdate();

                case 6:
                case "end":
                  return _context20.stop();
              }
            }
          }, _callee15, this);
        }));

        function unleashFiles(_x23) {
          return _unleashFiles.apply(this, arguments);
        }

        return unleashFiles;
      }()
    }, {
      key: "getDefinitions",
      value: function () {
        var _getDefinitions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(ident, source) {
          var _this$index$get,
              _this63 = this;

          var result, sameLanguageOffset, all, work, _iterator56, _step53, _loop3, _ret;

          return regeneratorRuntime.wrap(function _callee16$(_context21) {
            while (1) {
              switch (_context21.prev = _context21.next) {
                case 0:
                  _context21.next = 2;
                  return this.update();

                case 2:
                  result = [];
                  sameLanguageOffset = 0;
                  all = (_this$index$get = this.index.get(ident)) !== null && _this$index$get !== void 0 ? _this$index$get : [];
                  work = [];
                  _iterator56 = _createForOfIteratorHelper(all);
                  _context21.prev = 7;

                  _loop3 = function _loop3() {
                    var _step53$value = _slicedToArray(_step53.value, 2),
                        uri = _step53$value[0],
                        value = _step53$value[1];

                    if (value.definitions.size === 0) {
                      return "continue";
                    }

                    work.push(_this63._documents.retrieve(uri).then(function (document) {
                      var isSameLanguage = source.languageId === document.languageId;
                      var symbols = getDocumentSymbols(document, _this63._trees, true);

                      var _iterator57 = _createForOfIteratorHelper(symbols),
                          _step54;

                      try {
                        for (_iterator57.s(); !(_step54 = _iterator57.n()).done;) {
                          var item = _step54.value;

                          if (item.name === ident) {
                            var info = lsp5.SymbolInformation.create(item.name, item.kind, item.selectionRange, uri);

                            if (isSameLanguage) {
                              result.unshift(info);
                              sameLanguageOffset++;
                            } else {
                              result.push(info);
                            }
                          }
                        }
                      } catch (err) {
                        _iterator57.e(err);
                      } finally {
                        _iterator57.f();
                      }

                      setTimeout(function () {
                        _this63._asyncQueue.dequeue(document.uri);

                        _this63._doIndex(document, symbols);
                      });
                    }).catch(function (err) {
                      console.log(err);
                    }));
                  };

                  _iterator56.s();

                case 10:
                  if ((_step53 = _iterator56.n()).done) {
                    _context21.next = 16;
                    break;
                  }

                  _ret = _loop3();

                  if (!(_ret === "continue")) {
                    _context21.next = 14;
                    break;
                  }

                  return _context21.abrupt("continue", 14);

                case 14:
                  _context21.next = 10;
                  break;

                case 16:
                  _context21.next = 21;
                  break;

                case 18:
                  _context21.prev = 18;
                  _context21.t0 = _context21["catch"](7);

                  _iterator56.e(_context21.t0);

                case 21:
                  _context21.prev = 21;

                  _iterator56.f();

                  return _context21.finish(21);

                case 24:
                  _context21.next = 26;
                  return Promise.allSettled(work);

                case 26:
                  return _context21.abrupt("return", result.slice(0, sameLanguageOffset || void 0));

                case 27:
                case "end":
                  return _context21.stop();
              }
            }
          }, _callee16, this, [[7, 18, 21, 24]]);
        }));

        function getDefinitions(_x24, _x25) {
          return _getDefinitions.apply(this, arguments);
        }

        return getDefinitions;
      }()
    }, {
      key: "getUsages",
      value: function () {
        var _getUsages = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(ident, source) {
          var _this$index$get2,
              _this64 = this;

          var result, all, work, sameLanguageOffset, _iterator58, _step55, _loop4, _ret2;

          return regeneratorRuntime.wrap(function _callee17$(_context22) {
            while (1) {
              switch (_context22.prev = _context22.next) {
                case 0:
                  _context22.next = 2;
                  return this.update();

                case 2:
                  result = [];
                  all = (_this$index$get2 = this.index.get(ident)) !== null && _this$index$get2 !== void 0 ? _this$index$get2 : [];
                  work = [];
                  sameLanguageOffset = 0;
                  _iterator58 = _createForOfIteratorHelper(all);
                  _context22.prev = 7;

                  _loop4 = function _loop4() {
                    var _step55$value = _slicedToArray(_step55.value, 2),
                        uri = _step55$value[0],
                        value = _step55$value[1];

                    if (value.usages.size === 0) {
                      return "continue";
                    }

                    work.push(_this64._documents.retrieve(uri).then(function (document) {
                      var isSameLanguage = source.languageId === document.languageId;
                      var usages = getDocumentUsages(document, _this64._trees);

                      var _iterator59 = _createForOfIteratorHelper(usages),
                          _step56;

                      try {
                        for (_iterator59.s(); !(_step56 = _iterator59.n()).done;) {
                          var item = _step56.value;

                          if (item.name === ident) {
                            var location = lsp5.Location.create(uri, item.range);

                            if (isSameLanguage) {
                              result.unshift(location);
                              sameLanguageOffset++;
                            } else {
                              result.push(location);
                            }
                          }
                        }
                      } catch (err) {
                        _iterator59.e(err);
                      } finally {
                        _iterator59.f();
                      }

                      setTimeout(function () {
                        _this64._asyncQueue.dequeue(document.uri);

                        _this64._doIndex(document, void 0, usages);
                      });
                    }).catch(function (err) {
                      console.log(err);
                    }));
                  };

                  _iterator58.s();

                case 10:
                  if ((_step55 = _iterator58.n()).done) {
                    _context22.next = 16;
                    break;
                  }

                  _ret2 = _loop4();

                  if (!(_ret2 === "continue")) {
                    _context22.next = 14;
                    break;
                  }

                  return _context22.abrupt("continue", 14);

                case 14:
                  _context22.next = 10;
                  break;

                case 16:
                  _context22.next = 21;
                  break;

                case 18:
                  _context22.prev = 18;
                  _context22.t0 = _context22["catch"](7);

                  _iterator58.e(_context22.t0);

                case 21:
                  _context22.prev = 21;

                  _iterator58.f();

                  return _context22.finish(21);

                case 24:
                  _context22.next = 26;
                  return Promise.allSettled(work);

                case 26:
                  return _context22.abrupt("return", result.slice(0, sameLanguageOffset || void 0));

                case 27:
                case "end":
                  return _context22.stop();
              }
            }
          }, _callee17, this, [[7, 18, 21, 24]]);
        }));

        function getUsages(_x26, _x27) {
          return _getUsages.apply(this, arguments);
        }

        return getUsages;
      }()
    }]);

    return SymbolIndex;
  }(); // server/src/common/server.ts


  var import_vscode_languageserver3 = __toModule(require_main4());

  var import_web_tree_sitter3 = __toModule(require_tree_sitter()); // shared/common/messages.ts


  var CustomMessages;

  (function (CustomMessages2) {
    CustomMessages2["QueueInit"] = "queue/init";
    CustomMessages2["QueueUnleash"] = "queue/unleash";
    CustomMessages2["FileRead"] = "file/read";
  })(CustomMessages || (CustomMessages = {})); // server/src/common/documentStore.ts


  var lsp6 = __toModule(require_main4());

  var import_vscode_languageserver = __toModule(require_main4()); // server/node_modules/vscode-languageserver-textdocument/lib/esm/main.js


  "use strict";

  var FullTextDocument = /*#__PURE__*/function () {
    function FullTextDocument(uri, languageId, version, content) {
      _classCallCheck(this, FullTextDocument);

      this._uri = uri;
      this._languageId = languageId;
      this._version = version;
      this._content = content;
      this._lineOffsets = void 0;
    }

    _createClass(FullTextDocument, [{
      key: "uri",
      get: function get() {
        return this._uri;
      }
    }, {
      key: "languageId",
      get: function get() {
        return this._languageId;
      }
    }, {
      key: "version",
      get: function get() {
        return this._version;
      }
    }, {
      key: "getText",
      value: function getText(range) {
        if (range) {
          var start = this.offsetAt(range.start);
          var end = this.offsetAt(range.end);
          return this._content.substring(start, end);
        }

        return this._content;
      }
    }, {
      key: "update",
      value: function update(changes, version) {
        var _iterator60 = _createForOfIteratorHelper(changes),
            _step57;

        try {
          for (_iterator60.s(); !(_step57 = _iterator60.n()).done;) {
            var change = _step57.value;

            if (FullTextDocument.isIncremental(change)) {
              var range = getWellformedRange(change.range);
              var startOffset = this.offsetAt(range.start);
              var endOffset = this.offsetAt(range.end);
              this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);
              var startLine = Math.max(range.start.line, 0);
              var endLine = Math.max(range.end.line, 0);
              var lineOffsets = this._lineOffsets;
              var addedLineOffsets = computeLineOffsets(change.text, false, startOffset);

              if (endLine - startLine === addedLineOffsets.length) {
                for (var i = 0, len = addedLineOffsets.length; i < len; i++) {
                  lineOffsets[i + startLine + 1] = addedLineOffsets[i];
                }
              } else {
                if (addedLineOffsets.length < 1e4) {
                  var _lineOffsets;

                  (_lineOffsets = lineOffsets).splice.apply(_lineOffsets, [startLine + 1, endLine - startLine].concat(_toConsumableArray(addedLineOffsets)));
                } else {
                  this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));
                }
              }

              var diff = change.text.length - (endOffset - startOffset);

              if (diff !== 0) {
                for (var _i5 = startLine + 1 + addedLineOffsets.length, _len11 = lineOffsets.length; _i5 < _len11; _i5++) {
                  lineOffsets[_i5] = lineOffsets[_i5] + diff;
                }
              }
            } else if (FullTextDocument.isFull(change)) {
              this._content = change.text;
              this._lineOffsets = void 0;
            } else {
              throw new Error("Unknown change event received");
            }
          }
        } catch (err) {
          _iterator60.e(err);
        } finally {
          _iterator60.f();
        }

        this._version = version;
      }
    }, {
      key: "getLineOffsets",
      value: function getLineOffsets() {
        if (this._lineOffsets === void 0) {
          this._lineOffsets = computeLineOffsets(this._content, true);
        }

        return this._lineOffsets;
      }
    }, {
      key: "positionAt",
      value: function positionAt(offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        var lineOffsets = this.getLineOffsets();
        var low = 0,
            high = lineOffsets.length;

        if (high === 0) {
          return {
            line: 0,
            character: offset
          };
        }

        while (low < high) {
          var mid = Math.floor((low + high) / 2);

          if (lineOffsets[mid] > offset) {
            high = mid;
          } else {
            low = mid + 1;
          }
        }

        var line = low - 1;
        return {
          line: line,
          character: offset - lineOffsets[line]
        };
      }
    }, {
      key: "offsetAt",
      value: function offsetAt(position) {
        var lineOffsets = this.getLineOffsets();

        if (position.line >= lineOffsets.length) {
          return this._content.length;
        } else if (position.line < 0) {
          return 0;
        }

        var lineOffset = lineOffsets[position.line];
        var nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
      }
    }, {
      key: "lineCount",
      get: function get() {
        return this.getLineOffsets().length;
      }
    }], [{
      key: "isIncremental",
      value: function isIncremental(event) {
        var candidate = event;
        return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range !== void 0 && (candidate.rangeLength === void 0 || typeof candidate.rangeLength === "number");
      }
    }, {
      key: "isFull",
      value: function isFull(event) {
        var candidate = event;
        return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range === void 0 && candidate.rangeLength === void 0;
      }
    }]);

    return FullTextDocument;
  }();

  var TextDocument;

  (function (TextDocument2) {
    function create(uri, languageId, version, content) {
      return new FullTextDocument(uri, languageId, version, content);
    }

    TextDocument2.create = create;

    function update(document, changes, version) {
      if (document instanceof FullTextDocument) {
        document.update(changes, version);
        return document;
      } else {
        throw new Error("TextDocument.update: document must be created by TextDocument.create");
      }
    }

    TextDocument2.update = update;

    function applyEdits(document, edits) {
      var text = document.getText();
      var sortedEdits = mergeSort(edits.map(getWellformedEdit), function (a, b) {
        var diff = a.range.start.line - b.range.start.line;

        if (diff === 0) {
          return a.range.start.character - b.range.start.character;
        }

        return diff;
      });
      var lastModifiedOffset = 0;
      var spans = [];

      var _iterator61 = _createForOfIteratorHelper(sortedEdits),
          _step58;

      try {
        for (_iterator61.s(); !(_step58 = _iterator61.n()).done;) {
          var e = _step58.value;
          var startOffset = document.offsetAt(e.range.start);

          if (startOffset < lastModifiedOffset) {
            throw new Error("Overlapping edit");
          } else if (startOffset > lastModifiedOffset) {
            spans.push(text.substring(lastModifiedOffset, startOffset));
          }

          if (e.newText.length) {
            spans.push(e.newText);
          }

          lastModifiedOffset = document.offsetAt(e.range.end);
        }
      } catch (err) {
        _iterator61.e(err);
      } finally {
        _iterator61.f();
      }

      spans.push(text.substr(lastModifiedOffset));
      return spans.join("");
    }

    TextDocument2.applyEdits = applyEdits;
  })(TextDocument || (TextDocument = {}));

  function mergeSort(data, compare) {
    if (data.length <= 1) {
      return data;
    }

    var p = data.length / 2 | 0;
    var left = data.slice(0, p);
    var right = data.slice(p);
    mergeSort(left, compare);
    mergeSort(right, compare);
    var leftIdx = 0;
    var rightIdx = 0;
    var i = 0;

    while (leftIdx < left.length && rightIdx < right.length) {
      var ret = compare(left[leftIdx], right[rightIdx]);

      if (ret <= 0) {
        data[i++] = left[leftIdx++];
      } else {
        data[i++] = right[rightIdx++];
      }
    }

    while (leftIdx < left.length) {
      data[i++] = left[leftIdx++];
    }

    while (rightIdx < right.length) {
      data[i++] = right[rightIdx++];
    }

    return data;
  }

  function computeLineOffsets(text, isAtLineStart) {
    var textOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var result = isAtLineStart ? [textOffset] : [];

    for (var i = 0; i < text.length; i++) {
      var ch = text.charCodeAt(i);

      if (ch === 13 || ch === 10) {
        if (ch === 13 && i + 1 < text.length && text.charCodeAt(i + 1) === 10) {
          i++;
        }

        result.push(textOffset + i + 1);
      }
    }

    return result;
  }

  function getWellformedRange(range) {
    var start = range.start;
    var end = range.end;

    if (start.line > end.line || start.line === end.line && start.character > end.character) {
      return {
        start: end,
        end: start
      };
    }

    return range;
  }

  function getWellformedEdit(textEdit) {
    var range = getWellformedRange(textEdit.range);

    if (range !== textEdit.range) {
      return {
        newText: textEdit.newText,
        range: range
      };
    }

    return textEdit;
  } // server/src/common/util/lruMap.ts


  var LRUMap = /*#__PURE__*/function (_Map) {
    _inherits(LRUMap, _Map);

    var _super53 = _createSuper(LRUMap);

    function LRUMap(_options) {
      var _this65;

      _classCallCheck(this, LRUMap);

      _this65 = _super53.call(this);
      _this65._options = _options;
      return _this65;
    }

    _createClass(LRUMap, [{
      key: "set",
      value: function set(key, value) {
        _get(_getPrototypeOf(LRUMap.prototype), "set", this).call(this, key, value);

        this._checkSize();

        return this;
      }
    }, {
      key: "get",
      value: function get(key) {
        if (!this.has(key)) {
          return void 0;
        }

        var result = _get(_getPrototypeOf(LRUMap.prototype), "get", this).call(this, key);

        this.delete(key);
        this.set(key, result);
        return result;
      }
    }, {
      key: "_checkSize",
      value: function _checkSize() {
        var _this66 = this;

        setTimeout(function () {
          var slack = Math.ceil(_this66._options.size * 0.3);

          if (_this66.size < _this66._options.size + slack) {
            return;
          }

          var result = Array.from(_this66.entries()).slice(0, slack);

          var _iterator62 = _createForOfIteratorHelper(result),
              _step59;

          try {
            for (_iterator62.s(); !(_step59 = _iterator62.n()).done;) {
              var _step59$value = _slicedToArray(_step59.value, 1),
                  key = _step59$value[0];

              _this66.delete(key);
            }
          } catch (err) {
            _iterator62.e(err);
          } finally {
            _iterator62.f();
          }

          _this66._options.dispose(result);
        }, 0);
      }
    }]);

    return LRUMap;
  }( /*#__PURE__*/_wrapNativeSuper(Map)); // server/src/common/documentStore.ts


  var DocumentStore = /*#__PURE__*/function (_import_vscode_langua) {
    _inherits(DocumentStore, _import_vscode_langua);

    var _super54 = _createSuper(DocumentStore);

    function DocumentStore(_connection) {
      var _thisSuper, _this67;

      _classCallCheck(this, DocumentStore);

      _this67 = _super54.call(this, {
        create: TextDocument.create,
        update: function update(doc, changes, version) {
          var result;
          var incremental = true;
          var event = {
            document: doc,
            changes: []
          };

          var _iterator63 = _createForOfIteratorHelper(changes),
              _step60;

          try {
            for (_iterator63.s(); !(_step60 = _iterator63.n()).done;) {
              var _change$rangeLength;

              var change = _step60.value;

              if (!lsp6.TextDocumentContentChangeEvent.isIncremental(change)) {
                incremental = false;
                break;
              }

              var rangeOffset = doc.offsetAt(change.range.start);
              event.changes.push({
                text: change.text,
                range: change.range,
                rangeOffset: rangeOffset,
                rangeLength: (_change$rangeLength = change.rangeLength) !== null && _change$rangeLength !== void 0 ? _change$rangeLength : doc.offsetAt(change.range.end) - rangeOffset
              });
            }
          } catch (err) {
            _iterator63.e(err);
          } finally {
            _iterator63.f();
          }

          result = TextDocument.update(doc, changes, version);

          if (incremental) {
            _this67._onDidChangeContent2.fire(event);
          }

          return result;
        }
      });
      _this67._connection = _connection;
      _this67._onDidChangeContent2 = new lsp6.Emitter();
      _this67.onDidChangeContent2 = _this67._onDidChangeContent2.event;
      _this67._decoder = new TextDecoder();
      _this67._fileDocuments = new LRUMap({
        size: 200,
        dispose: function dispose(_entries) {}
      });

      _get((_thisSuper = _assertThisInitialized(_this67), _getPrototypeOf(DocumentStore.prototype)), "listen", _thisSuper).call(_thisSuper, _connection);

      return _this67;
    }

    _createClass(DocumentStore, [{
      key: "retrieve",
      value: function () {
        var _retrieve = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(uri) {
          var result, promise;
          return regeneratorRuntime.wrap(function _callee18$(_context23) {
            while (1) {
              switch (_context23.prev = _context23.next) {
                case 0:
                  result = this.get(uri);

                  if (!result) {
                    _context23.next = 3;
                    break;
                  }

                  return _context23.abrupt("return", result);

                case 3:
                  promise = this._fileDocuments.get(uri);

                  if (!promise) {
                    promise = this._requestDocument(uri);

                    this._fileDocuments.set(uri, promise);
                  }

                  return _context23.abrupt("return", promise);

                case 6:
                case "end":
                  return _context23.stop();
              }
            }
          }, _callee18, this);
        }));

        function retrieve(_x28) {
          return _retrieve.apply(this, arguments);
        }

        return retrieve;
      }()
    }, {
      key: "_requestDocument",
      value: function () {
        var _requestDocument2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(uri) {
          var reply, bytes;
          return regeneratorRuntime.wrap(function _callee19$(_context24) {
            while (1) {
              switch (_context24.prev = _context24.next) {
                case 0:
                  _context24.next = 2;
                  return this._connection.sendRequest(CustomMessages.FileRead, uri);

                case 2:
                  reply = _context24.sent;
                  bytes = new Uint8Array(reply);
                  return _context24.abrupt("return", TextDocument.create(uri, Languages.getLanguageIdByUri(uri), 1, this._decoder.decode(bytes)));

                case 5:
                case "end":
                  return _context24.stop();
              }
            }
          }, _callee19, this);
        }));

        function _requestDocument(_x29) {
          return _requestDocument2.apply(this, arguments);
        }

        return _requestDocument;
      }()
    }, {
      key: "removeFile",
      value: function removeFile(uri) {
        return this._fileDocuments.delete(uri);
      }
    }]);

    return DocumentStore;
  }(import_vscode_languageserver.TextDocuments); // server/src/common/features/completions.ts


  var lsp7 = __toModule(require_main4());

  var _CompletionItemProvider = /*#__PURE__*/function () {
    function _CompletionItemProvider(_documents, _trees, _symbols) {
      _classCallCheck(this, _CompletionItemProvider);

      this._documents = _documents;
      this._trees = _trees;
      this._symbols = _symbols;
    }

    _createClass(_CompletionItemProvider, [{
      key: "register",
      value: function register(connection2) {
        connection2.client.register(lsp7.CompletionRequest.type, {
          documentSelector: Languages.getSupportedLanguages("completions", ["identifiers", "outline"])
        });
        connection2.onRequest(lsp7.CompletionRequest.type, this.provideCompletionItems.bind(this));
      }
    }, {
      key: "provideCompletionItems",
      value: function () {
        var _provideCompletionItems = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(params) {
          var document, tree, result, query, captures, _iterator64, _step61, capture, text, _iterator65, _step62, _step62$value, name, map, _iterator66, _step63, _step63$value, info, _info$definitions, firstDefinitionKind, current, currentCaptures;

          return regeneratorRuntime.wrap(function _callee20$(_context25) {
            while (1) {
              switch (_context25.prev = _context25.next) {
                case 0:
                  _context25.next = 2;
                  return this._documents.retrieve(params.textDocument.uri);

                case 2:
                  document = _context25.sent;
                  tree = this._trees.getParseTree(document);

                  if (tree) {
                    _context25.next = 6;
                    break;
                  }

                  return _context25.abrupt("return", []);

                case 6:
                  result = new Map();
                  query = Languages.getQuery(document.languageId, "identifiers");
                  captures = query.captures(tree.rootNode);
                  _iterator64 = _createForOfIteratorHelper(captures);

                  try {
                    for (_iterator64.s(); !(_step61 = _iterator64.n()).done;) {
                      capture = _step61.value;
                      text = capture.node.text;
                      result.set(text, {
                        label: text
                      });
                    }
                  } catch (err) {
                    _iterator64.e(err);
                  } finally {
                    _iterator64.f();
                  }

                  _iterator65 = _createForOfIteratorHelper(this._symbols.index);
                  _context25.prev = 12;

                  _iterator65.s();

                case 14:
                  if ((_step62 = _iterator65.n()).done) {
                    _context25.next = 37;
                    break;
                  }

                  _step62$value = _slicedToArray(_step62.value, 2), name = _step62$value[0], map = _step62$value[1];
                  _iterator66 = _createForOfIteratorHelper(map);
                  _context25.prev = 17;

                  _iterator66.s();

                case 19:
                  if ((_step63 = _iterator66.n()).done) {
                    _context25.next = 27;
                    break;
                  }

                  _step63$value = _slicedToArray(_step63.value, 2), info = _step63$value[1];

                  if (!(info.definitions.size > 0)) {
                    _context25.next = 25;
                    break;
                  }

                  _info$definitions = _slicedToArray(info.definitions, 1), firstDefinitionKind = _info$definitions[0];
                  result.set(name, {
                    label: name,
                    kind: _CompletionItemProvider._kindMapping.get(firstDefinitionKind)
                  });
                  return _context25.abrupt("break", 27);

                case 25:
                  _context25.next = 19;
                  break;

                case 27:
                  _context25.next = 32;
                  break;

                case 29:
                  _context25.prev = 29;
                  _context25.t0 = _context25["catch"](17);

                  _iterator66.e(_context25.t0);

                case 32:
                  _context25.prev = 32;

                  _iterator66.f();

                  return _context25.finish(32);

                case 35:
                  _context25.next = 14;
                  break;

                case 37:
                  _context25.next = 42;
                  break;

                case 39:
                  _context25.prev = 39;
                  _context25.t1 = _context25["catch"](12);

                  _iterator65.e(_context25.t1);

                case 42:
                  _context25.prev = 42;

                  _iterator65.f();

                  return _context25.finish(42);

                case 45:
                  current = nodeAtPosition(tree.rootNode, params.position, true);
                  currentCaptures = query.captures(current);

                  if (currentCaptures.length === 1) {
                    result.delete(currentCaptures[0].node.text);
                  }

                  return _context25.abrupt("return", Array.from(result.values()));

                case 49:
                case "end":
                  return _context25.stop();
              }
            }
          }, _callee20, this, [[12, 39, 42, 45], [17, 29, 32, 35]]);
        }));

        function provideCompletionItems(_x30) {
          return _provideCompletionItems.apply(this, arguments);
        }

        return provideCompletionItems;
      }()
    }]);

    return _CompletionItemProvider;
  }();

  var CompletionItemProvider = _CompletionItemProvider;
  CompletionItemProvider._kindMapping = new Map([[lsp7.SymbolKind.Class, lsp7.CompletionItemKind.Class], [lsp7.SymbolKind.Interface, lsp7.CompletionItemKind.Interface], [lsp7.SymbolKind.Field, lsp7.CompletionItemKind.Field], [lsp7.SymbolKind.Property, lsp7.CompletionItemKind.Property], [lsp7.SymbolKind.Event, lsp7.CompletionItemKind.Event], [lsp7.SymbolKind.Constructor, lsp7.CompletionItemKind.Constructor], [lsp7.SymbolKind.Method, lsp7.CompletionItemKind.Method], [lsp7.SymbolKind.Enum, lsp7.CompletionItemKind.Enum], [lsp7.SymbolKind.EnumMember, lsp7.CompletionItemKind.EnumMember], [lsp7.SymbolKind.Function, lsp7.CompletionItemKind.Function], [lsp7.SymbolKind.Variable, lsp7.CompletionItemKind.Variable]]); // server/src/common/features/definitions.ts

  var lsp8 = __toModule(require_main4());

  var DefinitionProvider = /*#__PURE__*/function () {
    function DefinitionProvider(_documents, _trees, _symbols) {
      _classCallCheck(this, DefinitionProvider);

      this._documents = _documents;
      this._trees = _trees;
      this._symbols = _symbols;
    }

    _createClass(DefinitionProvider, [{
      key: "register",
      value: function register(connection2) {
        connection2.client.register(lsp8.DefinitionRequest.type, {
          documentSelector: Languages.getSupportedLanguages("definitions", ["locals", "outline"])
        });
        connection2.onRequest(lsp8.DefinitionRequest.type, this.provideDefinitions.bind(this));
      }
    }, {
      key: "provideDefinitions",
      value: function () {
        var _provideDefinitions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(params) {
          var _identifierAtPosition2;

          var document, info, anchor, _definitions2, tree, query, ident, symbols;

          return regeneratorRuntime.wrap(function _callee21$(_context26) {
            while (1) {
              switch (_context26.prev = _context26.next) {
                case 0:
                  _context26.next = 2;
                  return this._documents.retrieve(params.textDocument.uri);

                case 2:
                  document = _context26.sent;
                  info = Locals.create(document, this._trees);
                  anchor = info.root.findDefinitionOrUsage(params.position);

                  if (!anchor) {
                    _context26.next = 9;
                    break;
                  }

                  _definitions2 = anchor.scope.findDefinitions(anchor.name);

                  if (!(_definitions2.length > 0)) {
                    _context26.next = 9;
                    break;
                  }

                  return _context26.abrupt("return", _definitions2.map(function (def) {
                    return lsp8.Location.create(document.uri, def.range);
                  }));

                case 9:
                  tree = this._trees.getParseTree(document);

                  if (tree) {
                    _context26.next = 12;
                    break;
                  }

                  return _context26.abrupt("return", []);

                case 12:
                  query = Languages.getQuery(document.languageId, "identifiers");
                  ident = (_identifierAtPosition2 = identifierAtPosition(query, tree.rootNode, params.position)) === null || _identifierAtPosition2 === void 0 ? void 0 : _identifierAtPosition2.text;

                  if (ident) {
                    _context26.next = 16;
                    break;
                  }

                  return _context26.abrupt("return", []);

                case 16:
                  _context26.next = 18;
                  return this._symbols.getDefinitions(ident, document);

                case 18:
                  symbols = _context26.sent;
                  return _context26.abrupt("return", symbols.map(function (s) {
                    return s.location;
                  }));

                case 20:
                case "end":
                  return _context26.stop();
              }
            }
          }, _callee21, this);
        }));

        function provideDefinitions(_x31) {
          return _provideDefinitions.apply(this, arguments);
        }

        return provideDefinitions;
      }()
    }]);

    return DefinitionProvider;
  }(); // server/src/common/features/documentHighlights.ts


  var lsp9 = __toModule(require_main4());

  var DocumentHighlightsProvider = /*#__PURE__*/function () {
    function DocumentHighlightsProvider(_documents, _trees) {
      _classCallCheck(this, DocumentHighlightsProvider);

      this._documents = _documents;
      this._trees = _trees;
    }

    _createClass(DocumentHighlightsProvider, [{
      key: "register",
      value: function register(connection2) {
        connection2.client.register(lsp9.DocumentHighlightRequest.type, {
          documentSelector: Languages.getSupportedLanguages("highlights", ["locals", "identifiers"])
        });
        connection2.onRequest(lsp9.DocumentHighlightRequest.type, this.provideDocumentHighlights.bind(this));
      }
    }, {
      key: "provideDocumentHighlights",
      value: function () {
        var _provideDocumentHighlights = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(params) {
          var document, info, anchor, result, _iterator67, _step64, def, _iterator68, _step65, usage;

          return regeneratorRuntime.wrap(function _callee22$(_context27) {
            while (1) {
              switch (_context27.prev = _context27.next) {
                case 0:
                  _context27.next = 2;
                  return this._documents.retrieve(params.textDocument.uri);

                case 2:
                  document = _context27.sent;
                  info = Locals.create(document, this._trees);
                  anchor = info.root.findDefinitionOrUsage(params.position);

                  if (anchor) {
                    _context27.next = 7;
                    break;
                  }

                  return _context27.abrupt("return", this._identifierBasedHighlights(document, params.position));

                case 7:
                  result = [];
                  _iterator67 = _createForOfIteratorHelper(anchor.scope.findDefinitions(anchor.name));

                  try {
                    for (_iterator67.s(); !(_step64 = _iterator67.n()).done;) {
                      def = _step64.value;
                      result.push(lsp9.DocumentHighlight.create(def.range, lsp9.DocumentHighlightKind.Write));
                    }
                  } catch (err) {
                    _iterator67.e(err);
                  } finally {
                    _iterator67.f();
                  }

                  if (!(result.length === 0)) {
                    _context27.next = 12;
                    break;
                  }

                  return _context27.abrupt("return", this._identifierBasedHighlights(document, params.position));

                case 12:
                  _iterator68 = _createForOfIteratorHelper(anchor.scope.findUsages(anchor.name));

                  try {
                    for (_iterator68.s(); !(_step65 = _iterator68.n()).done;) {
                      usage = _step65.value;
                      result.push(lsp9.DocumentHighlight.create(usage.range, lsp9.DocumentHighlightKind.Read));
                    }
                  } catch (err) {
                    _iterator68.e(err);
                  } finally {
                    _iterator68.f();
                  }

                  return _context27.abrupt("return", result);

                case 15:
                case "end":
                  return _context27.stop();
              }
            }
          }, _callee22, this);
        }));

        function provideDocumentHighlights(_x32) {
          return _provideDocumentHighlights.apply(this, arguments);
        }

        return provideDocumentHighlights;
      }()
    }, {
      key: "_identifierBasedHighlights",
      value: function _identifierBasedHighlights(document, position) {
        var result = [];

        var tree = this._trees.getParseTree(document);

        if (!tree) {
          return result;
        }

        var query = Languages.getQuery(document.languageId, "identifiers");
        var candidate = identifierAtPosition(query, tree.rootNode, position);

        if (!candidate) {
          return result;
        }

        var _iterator69 = _createForOfIteratorHelper(query.captures(tree.rootNode)),
            _step66;

        try {
          for (_iterator69.s(); !(_step66 = _iterator69.n()).done;) {
            var capture = _step66.value;

            if (capture.node.text === candidate.text) {
              result.push(lsp9.DocumentHighlight.create(asLspRange(capture.node), lsp9.DocumentHighlightKind.Text));
            }
          }
        } catch (err) {
          _iterator69.e(err);
        } finally {
          _iterator69.f();
        }

        return result;
      }
    }]);

    return DocumentHighlightsProvider;
  }(); // server/src/common/features/foldingRanges.ts


  var lsp10 = __toModule(require_main4());

  var FoldingRangeProvider = /*#__PURE__*/function () {
    function FoldingRangeProvider(_documents, _trees) {
      _classCallCheck(this, FoldingRangeProvider);

      this._documents = _documents;
      this._trees = _trees;
    }

    _createClass(FoldingRangeProvider, [{
      key: "register",
      value: function register(connection2) {
        connection2.client.register(lsp10.FoldingRangeRequest.type, {
          documentSelector: Languages.getSupportedLanguages("folding", ["comments", "folding"])
        });
        connection2.onRequest(lsp10.FoldingRangeRequest.type, this.provideFoldingRanges.bind(this));
      }
    }, {
      key: "provideFoldingRanges",
      value: function () {
        var _provideFoldingRanges = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(params) {
          var document, tree, result, commentQuery, commentCaptures, foldingQuery, foldingCaptures, _iterator70, _step67, capture;

          return regeneratorRuntime.wrap(function _callee23$(_context28) {
            while (1) {
              switch (_context28.prev = _context28.next) {
                case 0:
                  _context28.next = 2;
                  return this._documents.retrieve(params.textDocument.uri);

                case 2:
                  document = _context28.sent;
                  tree = this._trees.getParseTree(document);

                  if (tree) {
                    _context28.next = 6;
                    break;
                  }

                  return _context28.abrupt("return", []);

                case 6:
                  result = [];
                  commentQuery = Languages.getQuery(document.languageId, "comments");
                  commentCaptures = commentQuery.captures(tree.rootNode);
                  foldingQuery = Languages.getQuery(document.languageId, "folding");
                  foldingCaptures = foldingQuery.captures(tree.rootNode);
                  _iterator70 = _createForOfIteratorHelper([commentCaptures, foldingCaptures].flat());

                  try {
                    for (_iterator70.s(); !(_step67 = _iterator70.n()).done;) {
                      capture = _step67.value;
                      result.push(lsp10.FoldingRange.create(capture.node.startPosition.row, capture.node.endPosition.row, capture.node.startPosition.column, capture.node.endPosition.column, capture.name));
                    }
                  } catch (err) {
                    _iterator70.e(err);
                  } finally {
                    _iterator70.f();
                  }

                  return _context28.abrupt("return", result);

                case 14:
                case "end":
                  return _context28.stop();
              }
            }
          }, _callee23, this);
        }));

        function provideFoldingRanges(_x33) {
          return _provideFoldingRanges.apply(this, arguments);
        }

        return provideFoldingRanges;
      }()
    }]);

    return FoldingRangeProvider;
  }(); // server/src/common/features/selectionRanges.ts


  var lsp11 = __toModule(require_main4());

  var SelectionRangesProvider = /*#__PURE__*/function () {
    function SelectionRangesProvider(_documents, _trees) {
      _classCallCheck(this, SelectionRangesProvider);

      this._documents = _documents;
      this._trees = _trees;
    }

    _createClass(SelectionRangesProvider, [{
      key: "register",
      value: function register(connection2) {
        connection2.client.register(lsp11.SelectionRangeRequest.type, {
          documentSelector: Languages.allAsSelector()
        });
        connection2.onRequest(lsp11.SelectionRangeRequest.type, this.provideSelectionRanges.bind(this));
      }
    }, {
      key: "provideSelectionRanges",
      value: function () {
        var _provideSelectionRanges = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24(params) {
          var document, tree, result, _iterator71, _step68, _loop5;

          return regeneratorRuntime.wrap(function _callee24$(_context29) {
            while (1) {
              switch (_context29.prev = _context29.next) {
                case 0:
                  _context29.next = 2;
                  return this._documents.retrieve(params.textDocument.uri);

                case 2:
                  document = _context29.sent;
                  tree = this._trees.getParseTree(document);

                  if (tree) {
                    _context29.next = 6;
                    break;
                  }

                  return _context29.abrupt("return", []);

                case 6:
                  result = [];
                  _iterator71 = _createForOfIteratorHelper(params.positions);

                  try {
                    _loop5 = function _loop5() {
                      var position = _step68.value;
                      var stack = [];
                      var offset = document.offsetAt(position);
                      var node = tree.rootNode;
                      stack.push(node);

                      while (true) {
                        var child = node.namedChildren.find(function (candidate) {
                          return candidate.startIndex <= offset && candidate.endIndex > offset;
                        });

                        if (child) {
                          stack.push(child);
                          node = child;
                          continue;
                        }

                        break;
                      }

                      var parent = void 0;

                      for (var _i6 = 0, _stack2 = stack; _i6 < _stack2.length; _i6++) {
                        var node2 = _stack2[_i6];
                        var range = lsp11.SelectionRange.create(asLspRange(node2), parent);
                        parent = range;
                      }

                      if (parent) {
                        result.push(parent);
                      }
                    };

                    for (_iterator71.s(); !(_step68 = _iterator71.n()).done;) {
                      _loop5();
                    }
                  } catch (err) {
                    _iterator71.e(err);
                  } finally {
                    _iterator71.f();
                  }

                  return _context29.abrupt("return", result);

                case 10:
                case "end":
                  return _context29.stop();
              }
            }
          }, _callee24, this);
        }));

        function provideSelectionRanges(_x34) {
          return _provideSelectionRanges.apply(this, arguments);
        }

        return provideSelectionRanges;
      }()
    }]);

    return SelectionRangesProvider;
  }(); // server/src/common/features/validation.ts


  var import_vscode_languageserver2 = __toModule(require_main4());

  var Validation = /*#__PURE__*/function () {
    function Validation(_connection, documents, _trees) {
      var _this68 = this;

      _classCallCheck(this, Validation);

      this._connection = _connection;
      this._trees = _trees;
      this._currentValidation = new Map();
      documents.all().forEach(this._triggerValidation, this);
      documents.onDidChangeContent(function (e) {
        return _this68._triggerValidation(e.document);
      });
      documents.onDidOpen(function (e) {
        return _this68._triggerValidation(e.document);
      });
      documents.onDidClose(function (e) {
        _connection.sendDiagnostics({
          uri: e.document.uri,
          diagnostics: []
        });
      });
    }

    _createClass(Validation, [{
      key: "_triggerValidation",
      value: function () {
        var _triggerValidation2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25(document) {
          var _cts,
              _cts2,
              _this69 = this;

          var config, cts, handle;
          return regeneratorRuntime.wrap(function _callee25$(_context30) {
            while (1) {
              switch (_context30.prev = _context30.next) {
                case 0:
                  if (isInteresting(document.uri)) {
                    _context30.next = 2;
                    break;
                  }

                  return _context30.abrupt("return");

                case 2:
                  _context30.next = 4;
                  return this._connection.workspace.getConfiguration({
                    section: "anycode",
                    scopeUri: document.uri
                  });

                case 4:
                  config = _context30.sent;

                  if (config.diagnostics) {
                    _context30.next = 7;
                    break;
                  }

                  return _context30.abrupt("return");

                case 7:
                  cts = this._currentValidation.get(document);
                  (_cts = cts) === null || _cts === void 0 ? void 0 : _cts.cancel();
                  (_cts2 = cts) === null || _cts2 === void 0 ? void 0 : _cts2.dispose();
                  cts = new import_vscode_languageserver2.CancellationTokenSource();

                  this._currentValidation.set(document, cts);

                  handle = setTimeout(function () {
                    return _this69._createDiagnostics(document);
                  }, 500);
                  cts.token.onCancellationRequested(function () {
                    return clearTimeout(handle);
                  });

                case 14:
                case "end":
                  return _context30.stop();
              }
            }
          }, _callee25, this);
        }));

        function _triggerValidation(_x35) {
          return _triggerValidation2.apply(this, arguments);
        }

        return _triggerValidation;
      }()
    }, {
      key: "_createDiagnostics",
      value: function () {
        var _createDiagnostics2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26(document) {
          var tree, diagnostics, cursor, seen, visitedChildren;
          return regeneratorRuntime.wrap(function _callee26$(_context31) {
            while (1) {
              switch (_context31.prev = _context31.next) {
                case 0:
                  tree = this._trees.getParseTree(document);
                  diagnostics = [];

                  if (!tree) {
                    _context31.next = 25;
                    break;
                  }

                  cursor = tree.walk();
                  seen = new Set();
                  _context31.prev = 5;
                  visitedChildren = false;

                case 7:
                  if (!true) {
                    _context31.next = 22;
                    break;
                  }

                  if (cursor.nodeIsMissing && !seen.has(cursor.nodeId)) {
                    diagnostics.push({
                      range: asLspRange(cursor.currentNode()),
                      message: "Expected '".concat(cursor.nodeType, "'"),
                      severity: import_vscode_languageserver2.DiagnosticSeverity.Error,
                      source: "anycode",
                      code: "missing"
                    });
                    seen.add(cursor.nodeId);
                  }

                  if (!visitedChildren) {
                    if (!cursor.gotoFirstChild()) {
                      visitedChildren = true;
                    }
                  }

                  if (!visitedChildren) {
                    _context31.next = 20;
                    break;
                  }

                  if (!cursor.gotoNextSibling()) {
                    _context31.next = 15;
                    break;
                  }

                  visitedChildren = false;
                  _context31.next = 20;
                  break;

                case 15:
                  if (!cursor.gotoParent()) {
                    _context31.next = 19;
                    break;
                  }

                  visitedChildren = true;
                  _context31.next = 20;
                  break;

                case 19:
                  return _context31.abrupt("break", 22);

                case 20:
                  _context31.next = 7;
                  break;

                case 22:
                  _context31.prev = 22;
                  cursor.delete();
                  return _context31.finish(22);

                case 25:
                  this._connection.sendDiagnostics({
                    uri: document.uri,
                    diagnostics: diagnostics
                  });

                case 26:
                case "end":
                  return _context31.stop();
              }
            }
          }, _callee26, this, [[5,, 22, 25]]);
        }));

        function _createDiagnostics(_x36) {
          return _createDiagnostics2.apply(this, arguments);
        }

        return _createDiagnostics;
      }()
    }]);

    return Validation;
  }(); // server/src/common/features/workspaceSymbols.ts


  var lsp12 = __toModule(require_main4());

  var WorkspaceSymbol2 = /*#__PURE__*/function () {
    function WorkspaceSymbol2(_documents, _trees, _symbols) {
      _classCallCheck(this, WorkspaceSymbol2);

      this._documents = _documents;
      this._trees = _trees;
      this._symbols = _symbols;
    }

    _createClass(WorkspaceSymbol2, [{
      key: "register",
      value: function register(connection2) {
        connection2.client.register(lsp12.WorkspaceSymbolRequest.type, {
          resolveProvider: true
        });
        connection2.onRequest(lsp12.WorkspaceSymbolRequest.type, this.provideWorkspaceSymbols.bind(this));
        connection2.onRequest(lsp12.WorkspaceSymbolResolveRequest.type, this.resolveWorkspaceSymbol.bind(this));
      }
    }, {
      key: "provideWorkspaceSymbols",
      value: function () {
        var _provideWorkspaceSymbols = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(params) {
          var result, all, _iterator72, _step69, _step69$value, name, map, _iterator73, _step70, _step70$value, uri, info, _iterator74, _step71, kind, newLen;

          return regeneratorRuntime.wrap(function _callee27$(_context32) {
            while (1) {
              switch (_context32.prev = _context32.next) {
                case 0:
                  result = [];
                  _context32.next = 3;
                  return Promise.race([this._symbols.update(), new Promise(function (resolve) {
                    return setTimeout(resolve, 250);
                  })]);

                case 3:
                  all = this._symbols.index.query(params.query);
                  _iterator72 = _createForOfIteratorHelper(all);
                  _context32.prev = 5;

                  _iterator72.s();

                case 7:
                  if ((_step69 = _iterator72.n()).done) {
                    _context32.next = 44;
                    break;
                  }

                  _step69$value = _slicedToArray(_step69.value, 2), name = _step69$value[0], map = _step69$value[1];
                  _iterator73 = _createForOfIteratorHelper(map);
                  _context32.prev = 10;

                  _iterator73.s();

                case 12:
                  if ((_step70 = _iterator73.n()).done) {
                    _context32.next = 34;
                    break;
                  }

                  _step70$value = _slicedToArray(_step70.value, 2), uri = _step70$value[0], info = _step70$value[1];
                  _iterator74 = _createForOfIteratorHelper(info.definitions);
                  _context32.prev = 15;

                  _iterator74.s();

                case 17:
                  if ((_step71 = _iterator74.n()).done) {
                    _context32.next = 24;
                    break;
                  }

                  kind = _step71.value;
                  newLen = result.push(lsp12.WorkspaceSymbol.create(name, kind, uri, lsp12.Range.create(0, 0, 0, 0)));

                  if (!(newLen > 2e4)) {
                    _context32.next = 22;
                    break;
                  }

                  return _context32.abrupt("break", 44);

                case 22:
                  _context32.next = 17;
                  break;

                case 24:
                  _context32.next = 29;
                  break;

                case 26:
                  _context32.prev = 26;
                  _context32.t0 = _context32["catch"](15);

                  _iterator74.e(_context32.t0);

                case 29:
                  _context32.prev = 29;

                  _iterator74.f();

                  return _context32.finish(29);

                case 32:
                  _context32.next = 12;
                  break;

                case 34:
                  _context32.next = 39;
                  break;

                case 36:
                  _context32.prev = 36;
                  _context32.t1 = _context32["catch"](10);

                  _iterator73.e(_context32.t1);

                case 39:
                  _context32.prev = 39;

                  _iterator73.f();

                  return _context32.finish(39);

                case 42:
                  _context32.next = 7;
                  break;

                case 44:
                  _context32.next = 49;
                  break;

                case 46:
                  _context32.prev = 46;
                  _context32.t2 = _context32["catch"](5);

                  _iterator72.e(_context32.t2);

                case 49:
                  _context32.prev = 49;

                  _iterator72.f();

                  return _context32.finish(49);

                case 52:
                  return _context32.abrupt("return", result);

                case 53:
                case "end":
                  return _context32.stop();
              }
            }
          }, _callee27, this, [[5, 46, 49, 52], [10, 36, 39, 42], [15, 26, 29, 32]]);
        }));

        function provideWorkspaceSymbols(_x37) {
          return _provideWorkspaceSymbols.apply(this, arguments);
        }

        return provideWorkspaceSymbols;
      }()
    }, {
      key: "resolveWorkspaceSymbol",
      value: function () {
        var _resolveWorkspaceSymbol = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28(item) {
          var document, symbols, _iterator75, _step72, candidate;

          return regeneratorRuntime.wrap(function _callee28$(_context33) {
            while (1) {
              switch (_context33.prev = _context33.next) {
                case 0:
                  _context33.next = 2;
                  return this._documents.retrieve(item.location.uri);

                case 2:
                  document = _context33.sent;
                  symbols = getDocumentSymbols(document, this._trees, true);
                  _iterator75 = _createForOfIteratorHelper(symbols);
                  _context33.prev = 5;

                  _iterator75.s();

                case 7:
                  if ((_step72 = _iterator75.n()).done) {
                    _context33.next = 13;
                    break;
                  }

                  candidate = _step72.value;

                  if (!(candidate.name === item.name && candidate.kind === item.kind)) {
                    _context33.next = 11;
                    break;
                  }

                  return _context33.abrupt("return", lsp12.SymbolInformation.create(item.name, item.kind, candidate.selectionRange, item.location.uri));

                case 11:
                  _context33.next = 7;
                  break;

                case 13:
                  _context33.next = 18;
                  break;

                case 15:
                  _context33.prev = 15;
                  _context33.t0 = _context33["catch"](5);

                  _iterator75.e(_context33.t0);

                case 18:
                  _context33.prev = 18;

                  _iterator75.f();

                  return _context33.finish(18);

                case 21:
                  return _context33.abrupt("return", item);

                case 22:
                case "end":
                  return _context33.stop();
              }
            }
          }, _callee28, this, [[5, 15, 18, 21]]);
        }));

        function resolveWorkspaceSymbol(_x38) {
          return _resolveWorkspaceSymbol.apply(this, arguments);
        }

        return resolveWorkspaceSymbol;
      }()
    }]);

    return WorkspaceSymbol2;
  }(); // server/src/common/trees.ts


  var import_web_tree_sitter2 = __toModule(require_tree_sitter());

  var Entry2 = /*#__PURE__*/_createClass(function Entry2(version, tree, edits) {
    _classCallCheck(this, Entry2);

    this.version = version;
    this.tree = tree;
    this.edits = edits;
  });

  var Trees = /*#__PURE__*/function () {
    function Trees(_documents) {
      var _this70 = this;

      _classCallCheck(this, Trees);

      this._documents = _documents;
      this._cache = new LRUMap({
        size: 100,
        dispose: function dispose(entries) {
          var _iterator76 = _createForOfIteratorHelper(entries),
              _step73;

          try {
            for (_iterator76.s(); !(_step73 = _iterator76.n()).done;) {
              var _step73$value = _slicedToArray(_step73.value, 2),
                  _value3 = _step73$value[1];

              _value3.tree.delete();
            }
          } catch (err) {
            _iterator76.e(err);
          } finally {
            _iterator76.f();
          }
        }
      });
      this._listener = [];
      this._parser = new import_web_tree_sitter2.default();

      this._listener.push(_documents.onDidChangeContent2(function (e) {
        var info = _this70._cache.get(e.document.uri);

        if (info) {
          info.edits.push(Trees._asEdits(e));
        }
      }));
    }

    _createClass(Trees, [{
      key: "dispose",
      value: function dispose() {
        this._parser.delete();

        var _iterator77 = _createForOfIteratorHelper(this._cache.values()),
            _step74;

        try {
          for (_iterator77.s(); !(_step74 = _iterator77.n()).done;) {
            var item = _step74.value;
            item.tree.delete();
          }
        } catch (err) {
          _iterator77.e(err);
        } finally {
          _iterator77.f();
        }

        var _iterator78 = _createForOfIteratorHelper(this._listener),
            _step75;

        try {
          for (_iterator78.s(); !(_step75 = _iterator78.n()).done;) {
            var _item = _step75.value;

            _item.dispose();
          }
        } catch (err) {
          _iterator78.e(err);
        } finally {
          _iterator78.f();
        }
      }
    }, {
      key: "getParseTree",
      value: function getParseTree(documentOrUri) {
        var _this71 = this;

        if (typeof documentOrUri === "string") {
          return this._documents.retrieve(documentOrUri).then(function (doc) {
            return _this71._parse(doc);
          });
        } else {
          return this._parse(documentOrUri);
        }
      }
    }, {
      key: "_parse",
      value: function _parse(documentOrUri) {
        var _info;

        var info = this._cache.get(documentOrUri.uri);

        if (((_info = info) === null || _info === void 0 ? void 0 : _info.version) === documentOrUri.version) {
          return info.tree;
        }

        var language = Languages.getLanguage(documentOrUri.languageId);

        if (!language) {
          return void 0;
        }

        this._parser.setLanguage(language);

        this._parser.setTimeoutMicros(1e3 * 1e3);

        try {
          var version = documentOrUri.version;
          var text = documentOrUri.getText();

          if (!info) {
            var _tree = this._parser.parse(text);

            info = new Entry2(version, _tree, []);

            this._cache.set(documentOrUri.uri, info);
          } else {
            var oldTree = info.tree;
            var deltas = info.edits.flat();
            deltas.forEach(function (delta) {
              return oldTree.edit(delta);
            });
            info.edits.length = 0;
            info.tree = this._parser.parse(text, oldTree);
            info.version = version;
            oldTree.delete();
          }

          return info.tree;
        } catch (e) {
          this._cache.delete(documentOrUri.uri);

          return void 0;
        }
      }
    }], [{
      key: "_asEdits",
      value: function _asEdits(event) {
        var _this72 = this;

        return event.changes.map(function (change) {
          return {
            startPosition: _this72._asTsPoint(change.range.start),
            oldEndPosition: _this72._asTsPoint(change.range.end),
            newEndPosition: _this72._asTsPoint(event.document.positionAt(change.rangeOffset + change.text.length)),
            startIndex: change.rangeOffset,
            oldEndIndex: change.rangeOffset + change.rangeLength,
            newEndIndex: change.rangeOffset + change.text.length
          };
        });
      }
    }, {
      key: "_asTsPoint",
      value: function _asTsPoint(position) {
        var row = position.line,
            column = position.character;
        return {
          row: row,
          column: column
        };
      }
    }]);

    return Trees;
  }(); // server/src/common/server.ts


  function startServer(connection2, factory2) {
    console.log = connection2.console.log.bind(connection2.console);
    console.warn = connection2.console.warn.bind(connection2.console);
    console.error = connection2.console.error.bind(connection2.console);
    var features = [];
    connection2.onInitialize( /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29(params) {
        var initData, options, documents, trees, symbolStorage, symbolIndex;
        return regeneratorRuntime.wrap(function _callee29$(_context34) {
          while (1) {
            switch (_context34.prev = _context34.next) {
              case 0:
                initData = params.initializationOptions;
                options = {
                  locateFile: function locateFile() {
                    return initData.treeSitterWasmUri;
                  }
                };
                _context34.next = 4;
                return import_web_tree_sitter3.default.init(options);

              case 4:
                _context34.next = 6;
                return Languages.init(initData.supportedLanguages);

              case 6:
                documents = new DocumentStore(connection2);
                trees = new Trees(documents);
                _context34.next = 10;
                return factory2.create(initData.databaseName);

              case 10:
                symbolStorage = _context34.sent;
                connection2.onExit(function () {
                  return factory2.destroy(symbolStorage);
                });
                symbolIndex = new SymbolIndex(trees, documents, symbolStorage);
                features.push(new WorkspaceSymbol2(documents, trees, symbolIndex));
                features.push(new DefinitionProvider(documents, trees, symbolIndex));
                features.push(new ReferencesProvider(documents, trees, symbolIndex));
                features.push(new CompletionItemProvider(documents, trees, symbolIndex));
                features.push(new DocumentHighlightsProvider(documents, trees));
                features.push(new DocumentSymbols(documents, trees));
                features.push(new SelectionRangesProvider(documents, trees));
                features.push(new FoldingRangeProvider(documents, trees));
                new Validation(connection2, documents, trees);
                documents.all().forEach(function (doc) {
                  return symbolIndex.addFile(doc.uri);
                });
                documents.onDidOpen(function (event) {
                  return symbolIndex.addFile(event.document.uri);
                });
                documents.onDidChangeContent(function (event) {
                  return symbolIndex.addFile(event.document.uri);
                });
                connection2.onRequest(CustomMessages.QueueInit, function (uris) {
                  symbolIndex.initFiles(uris);
                });
                connection2.onRequest(CustomMessages.QueueUnleash, function (suffixes) {
                  symbolIndex.unleashFiles(suffixes);
                });
                connection2.onDidChangeWatchedFiles(function (e) {
                  var _iterator79 = _createForOfIteratorHelper(e.changes),
                      _step76;

                  try {
                    for (_iterator79.s(); !(_step76 = _iterator79.n()).done;) {
                      var _step76$value = _step76.value,
                          type = _step76$value.type,
                          uri = _step76$value.uri;

                      switch (type) {
                        case import_vscode_languageserver3.FileChangeType.Created:
                          symbolIndex.addFile(uri);
                          break;

                        case import_vscode_languageserver3.FileChangeType.Deleted:
                          symbolIndex.removeFile(uri);
                          documents.removeFile(uri);
                          break;

                        case import_vscode_languageserver3.FileChangeType.Changed:
                          symbolIndex.addFile(uri);
                          documents.removeFile(uri);
                          break;
                      }
                    }
                  } catch (err) {
                    _iterator79.e(err);
                  } finally {
                    _iterator79.f();
                  }
                });
                return _context34.abrupt("return", {
                  capabilities: {
                    textDocumentSync: import_vscode_languageserver3.TextDocumentSyncKind.Incremental
                  }
                });

              case 29:
              case "end":
                return _context34.stop();
            }
          }
        }, _callee29);
      }));

      return function (_x39) {
        return _ref5.apply(this, arguments);
      };
    }());
    connection2.onInitialized(function () {
      var _iterator80 = _createForOfIteratorHelper(features),
          _step77;

      try {
        for (_iterator80.s(); !(_step77 = _iterator80.n()).done;) {
          var feature = _step77.value;
          feature.register(connection2);
        }
      } catch (err) {
        _iterator80.e(err);
      } finally {
        _iterator80.f();
      }
    });
    connection2.listen();
  } // server/src/browser/storage.ts


  var IndexedDBSymbolStorage = /*#__PURE__*/function () {
    function IndexedDBSymbolStorage(_name) {
      _classCallCheck(this, IndexedDBSymbolStorage);

      this._name = _name;
      this._version = 1;
      this._store = "fileSymbols";
      this._insertQueue = new Map();
    }

    _createClass(IndexedDBSymbolStorage, [{
      key: "open",
      value: function () {
        var _open = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30() {
          var _this73 = this;

          return regeneratorRuntime.wrap(function _callee30$(_context35) {
            while (1) {
              switch (_context35.prev = _context35.next) {
                case 0:
                  if (!this._db) {
                    _context35.next = 2;
                    break;
                  }

                  return _context35.abrupt("return");

                case 2:
                  _context35.next = 4;
                  return new Promise(function (resolve, reject) {
                    var request = indexedDB.open(_this73._name, _this73._version);

                    request.onerror = function () {
                      return reject(request.error);
                    };

                    request.onsuccess = function () {
                      var db = request.result;

                      if (!db.objectStoreNames.contains(_this73._store)) {
                        console.error("Error while opening IndexedDB. Could not find '".concat(_this73._store, "' object store"));
                        return resolve(_this73._delete(db).then(function () {
                          return _this73.open();
                        }));
                      } else {
                        resolve(void 0);
                        _this73._db = db;
                      }
                    };

                    request.onupgradeneeded = function () {
                      var db = request.result;

                      if (db.objectStoreNames.contains(_this73._store)) {
                        db.deleteObjectStore(_this73._store);
                      }

                      db.createObjectStore(_this73._store);
                    };
                  });

                case 4:
                case "end":
                  return _context35.stop();
              }
            }
          }, _callee30, this);
        }));

        function open() {
          return _open.apply(this, arguments);
        }

        return open;
      }()
    }, {
      key: "close",
      value: function () {
        var _close = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee31() {
          return regeneratorRuntime.wrap(function _callee31$(_context36) {
            while (1) {
              switch (_context36.prev = _context36.next) {
                case 0:
                  if (!this._db) {
                    _context36.next = 4;
                    break;
                  }

                  _context36.next = 3;
                  return this._bulkInsert();

                case 3:
                  this._db.close();

                case 4:
                case "end":
                  return _context36.stop();
              }
            }
          }, _callee31, this);
        }));

        function close() {
          return _close.apply(this, arguments);
        }

        return close;
      }()
    }, {
      key: "_delete",
      value: function _delete(db) {
        var _this74 = this;

        return new Promise(function (resolve, reject) {
          db.close();
          var deleteRequest = indexedDB.deleteDatabase(_this74._name);

          deleteRequest.onerror = function () {
            return reject(deleteRequest.error);
          };

          deleteRequest.onsuccess = function () {
            return resolve();
          };
        });
      }
    }, {
      key: "insert",
      value: function insert(uri, info) {
        var _this75 = this;

        var flatInfo = [];

        var _iterator81 = _createForOfIteratorHelper(info),
            _step78;

        try {
          for (_iterator81.s(); !(_step78 = _iterator81.n()).done;) {
            var _step78$value = _slicedToArray(_step78.value, 2),
                word = _step78$value[0],
                i = _step78$value[1];

            flatInfo.push(word);
            flatInfo.push(i.definitions.size);
            flatInfo.push.apply(flatInfo, _toConsumableArray(i.definitions));
            flatInfo.push.apply(flatInfo, _toConsumableArray(i.usages));
          }
        } catch (err) {
          _iterator81.e(err);
        } finally {
          _iterator81.f();
        }

        this._insertQueue.set(uri, flatInfo);

        clearTimeout(this._insertHandle);
        this._insertHandle = setTimeout(function () {
          _this75._bulkInsert().catch(function (err) {
            console.error(err);
          });
        }, 50);
      }
    }, {
      key: "_bulkInsert",
      value: function () {
        var _bulkInsert2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee32() {
          var _this76 = this;

          return regeneratorRuntime.wrap(function _callee32$(_context37) {
            while (1) {
              switch (_context37.prev = _context37.next) {
                case 0:
                  if (!(this._insertQueue.size === 0)) {
                    _context37.next = 2;
                    break;
                  }

                  return _context37.abrupt("return");

                case 2:
                  return _context37.abrupt("return", new Promise(function (resolve, reject) {
                    if (!_this76._db) {
                      return reject(new Error("invalid state"));
                    }

                    var t = _this76._db.transaction(_this76._store, "readwrite");

                    var toInsert = new Map(_this76._insertQueue);

                    _this76._insertQueue.clear();

                    var _iterator82 = _createForOfIteratorHelper(toInsert),
                        _step79;

                    try {
                      for (_iterator82.s(); !(_step79 = _iterator82.n()).done;) {
                        var _step79$value = _slicedToArray(_step79.value, 2),
                            uri = _step79$value[0],
                            data = _step79$value[1];

                        t.objectStore(_this76._store).put(data, uri);
                      }
                    } catch (err) {
                      _iterator82.e(err);
                    } finally {
                      _iterator82.f();
                    }

                    t.oncomplete = function () {
                      return resolve(void 0);
                    };

                    t.onerror = function (err) {
                      return reject(err);
                    };
                  }));

                case 3:
                case "end":
                  return _context37.stop();
              }
            }
          }, _callee32, this);
        }));

        function _bulkInsert() {
          return _bulkInsert2.apply(this, arguments);
        }

        return _bulkInsert;
      }()
    }, {
      key: "getAll",
      value: function getAll() {
        var _this77 = this;

        return new Promise(function (resolve, reject) {
          if (!_this77._db) {
            return reject(new Error("invalid state"));
          }

          var entries = new Map();

          var t = _this77._db.transaction(_this77._store, "readonly");

          var store = t.objectStore(_this77._store);
          var cursor = store.openCursor();

          cursor.onsuccess = function () {
            if (!cursor.result) {
              resolve(entries);
              return;
            }

            var info = new Map();
            var flatInfo = cursor.result.value;

            for (var i = 0; i < flatInfo.length;) {
              var word = flatInfo[i];
              var defLen = flatInfo[++i];
              var kindStart = ++i;

              for (; i < flatInfo.length && typeof flatInfo[i] === "number"; i++) {
                ;
              }

              info.set(word, {
                definitions: new Set(flatInfo.slice(kindStart, kindStart + defLen)),
                usages: new Set(flatInfo.slice(kindStart + defLen, i))
              });
            }

            entries.set(String(cursor.result.key), info);
            cursor.result.continue();
          };

          cursor.onerror = function () {
            return reject(cursor.error);
          };

          t.onerror = function () {
            return reject(t.error);
          };
        });
      }
    }, {
      key: "delete",
      value: function _delete(uris) {
        var _this78 = this;

        return new Promise(function (resolve, reject) {
          if (!_this78._db) {
            return reject(new Error("invalid state"));
          }

          var t = _this78._db.transaction(_this78._store, "readwrite");

          var store = t.objectStore(_this78._store);

          var _iterator83 = _createForOfIteratorHelper(uris),
              _step80;

          try {
            for (_iterator83.s(); !(_step80 = _iterator83.n()).done;) {
              var uri = _step80.value;
              var request = store.delete(uri);

              request.onerror = function (e) {
                return console.error(e);
              };
            }
          } catch (err) {
            _iterator83.e(err);
          } finally {
            _iterator83.f();
          }

          t.oncomplete = function () {
            return resolve(void 0);
          };

          t.onerror = function (err) {
            return reject(err);
          };
        });
      }
    }]);

    return IndexedDBSymbolStorage;
  }(); // server/src/browser/main.ts


  var messageReader = new import_browser.BrowserMessageReader(self);
  var messageWriter = new import_browser.BrowserMessageWriter(self);
  var connection = (0, import_browser.createConnection)(messageReader, messageWriter);
  var factory = {
    create: function create(name) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee33() {
        var _result3;

        return regeneratorRuntime.wrap(function _callee33$(_context38) {
          while (1) {
            switch (_context38.prev = _context38.next) {
              case 0:
                _context38.prev = 0;
                _result3 = new IndexedDBSymbolStorage(name);
                _context38.next = 4;
                return _result3.open();

              case 4:
                return _context38.abrupt("return", _result3);

              case 7:
                _context38.prev = 7;
                _context38.t0 = _context38["catch"](0);
                console.error("FAILED to create indexedDB-based storage, using volatile in-memory storage INSTEAD");
                return _context38.abrupt("return", new MemorySymbolStorage());

              case 11:
              case "end":
                return _context38.stop();
            }
          }
        }, _callee33, null, [[0, 7]]);
      }))();
    },
    destroy: function destroy(obj) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee34() {
        return regeneratorRuntime.wrap(function _callee34$(_context39) {
          while (1) {
            switch (_context39.prev = _context39.next) {
              case 0:
                if (!(obj instanceof IndexedDBSymbolStorage)) {
                  _context39.next = 3;
                  break;
                }

                _context39.next = 3;
                return obj.close();

              case 3:
              case "end":
                return _context39.stop();
            }
          }
        }, _callee34);
      }))();
    }
  };
  startServer(connection, factory);
})();