import type { CancellationToken } from 'vscode-languageserver';
import * as lsp from 'vscode-languageserver-types';
import { URI } from 'vscode-uri';
import { ILogger } from '../logging';
import { IMdParser } from '../parser';
import { MdTableOfContentsProvider } from '../tableOfContents';
import { ITextDocument } from '../types/textDocument';
import { Disposable } from '../util/dispose';
import { IWorkspace } from '../workspace';
import { MdWorkspaceInfoCache } from '../workspaceCache';
export declare enum HrefKind {
    External = 1,
    Internal = 2,
    Reference = 3
}
export interface ExternalHref {
    readonly kind: HrefKind.External;
    readonly uri: URI;
}
export interface InternalHref {
    readonly kind: HrefKind.Internal;
    readonly path: URI;
    readonly fragment: string;
}
export interface ReferenceHref {
    readonly kind: HrefKind.Reference;
    readonly ref: string;
}
export declare type LinkHref = ExternalHref | InternalHref | ReferenceHref;
export declare function resolveDocumentLink(inputDocument: URI, link: string, workspace: IWorkspace): {
    path: URI;
    fragment: string;
} | undefined;
export interface MdLinkSource {
    /**
     * The full range of the link.
     */
    readonly range: lsp.Range;
    /**
     * The file where the link is defined.
     */
    readonly resource: URI;
    /**
     * The original text of the link destination in code.
     */
    readonly hrefText: string;
    /**
     * The original text of just the link's path in code.
     */
    readonly pathText: string;
    /**
     * The range of the path.
     */
    readonly hrefRange: lsp.Range;
    /**
     * The range of the fragment within the path.
     */
    readonly fragmentRange: lsp.Range | undefined;
}
export declare enum MdLinkKind {
    Link = 1,
    Definition = 2
}
export interface MdInlineLink {
    readonly kind: MdLinkKind.Link;
    readonly source: MdLinkSource;
    readonly href: LinkHref;
}
export interface MdLinkDefinition {
    readonly kind: MdLinkKind.Definition;
    readonly source: MdLinkSource;
    readonly ref: {
        readonly range: lsp.Range;
        readonly text: string;
    };
    readonly href: ExternalHref | InternalHref;
}
export declare type MdLink = MdInlineLink | MdLinkDefinition;
/**
 * Stateless object that extracts link information from markdown files.
 */
export declare class MdLinkComputer {
    private readonly tokenizer;
    private readonly workspace;
    constructor(tokenizer: IMdParser, workspace: IWorkspace);
    getAllLinks(document: ITextDocument, token: CancellationToken): Promise<MdLink[]>;
    private getInlineLinks;
    private getAutoLinks;
    private getReferenceLinks;
    private getLinkDefinitions;
}
interface MdDocumentLinks {
    readonly links: readonly MdLink[];
    readonly definitions: LinkDefinitionSet;
}
export declare class LinkDefinitionSet implements Iterable<[string, MdLinkDefinition]> {
    private readonly _map;
    constructor(links: Iterable<MdLink>);
    [Symbol.iterator](): Iterator<[string, MdLinkDefinition]>;
    lookup(ref: string): MdLinkDefinition | undefined;
}
/**
 * Stateful object which provides links for markdown files the workspace.
 */
export declare class MdLinkProvider extends Disposable {
    private readonly _workspace;
    private readonly _tocProvider;
    private readonly _linkCache;
    private readonly _linkComputer;
    constructor(tokenizer: IMdParser, _workspace: IWorkspace, _tocProvider: MdTableOfContentsProvider, logger: ILogger);
    getLinks(document: ITextDocument): Promise<MdDocumentLinks>;
    provideDocumentLinks(document: ITextDocument, token: CancellationToken): Promise<lsp.DocumentLink[]>;
    resolveDocumentLink(link: lsp.DocumentLink, _token: CancellationToken): Promise<lsp.DocumentLink | undefined>;
    private toValidDocumentLink;
    private createCommandUri;
    private createOpenAtPosCommand;
}
export declare function createWorkspaceLinkCache(parser: IMdParser, workspace: IWorkspace): MdWorkspaceInfoCache<MdLink[]>;
export {};
