import { CancellationToken } from 'vscode-languageserver';
import * as lsp from 'vscode-languageserver-types';
import { URI } from 'vscode-uri';
import { LsConfiguration } from '../config';
import { Disposable } from '../util/dispose';
import { IWorkspace } from '../workspace';
import { MdWorkspaceInfoCache } from '../workspaceCache';
import { MdLink } from './documentLinks';
import { MdReferencesProvider } from './references';
interface FileRename {
    readonly oldUri: URI;
    readonly newUri: URI;
}
export declare class MdFileRenameProvider extends Disposable {
    private readonly config;
    private readonly workspace;
    private readonly linkCache;
    private readonly referencesProvider;
    constructor(config: LsConfiguration, workspace: IWorkspace, linkCache: MdWorkspaceInfoCache<readonly MdLink[]>, referencesProvider: MdReferencesProvider);
    getRenameFilesInWorkspaceEdit(edits: readonly FileRename[], token: CancellationToken): Promise<lsp.WorkspaceEdit | undefined>;
    private addSingleFileRenameEdits;
    private addDirectoryRenameEdits;
    /**
     * Try to add edits for when a markdown file has been renamed.
     * In this case we also need to update links within the file.
     */
    private tryAddEditsInSelf;
    private addEditsForLinksInSelf;
    /**
     * Update links across the workspace for the new file name
     */
    private addEditsForReferencesToFile;
    private addLinkRenameEdit;
}
export {};
