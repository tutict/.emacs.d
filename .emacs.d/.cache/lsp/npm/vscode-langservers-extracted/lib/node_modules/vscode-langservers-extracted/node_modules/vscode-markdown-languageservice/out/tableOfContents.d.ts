import * as lsp from 'vscode-languageserver-types';
import { URI } from 'vscode-uri';
import { ILogger } from './logging';
import { IMdParser } from './parser';
import { Slug } from './slugify';
import { ITextDocument } from './types/textDocument';
import { Disposable } from './util/dispose';
import { IWorkspace } from './workspace';
export interface TocEntry {
    readonly slug: Slug;
    readonly text: string;
    readonly level: number;
    readonly line: number;
    /**
     * The entire range of the header section.
     *
    * For the doc:
     *
     * ```md
     * # Head #
     * text
     * # Next head #
     * ```
     *
     * This is the range from `# Head #` to `# Next head #`
     */
    readonly sectionLocation: lsp.Location;
    /**
     * The range of the header declaration.
     *
     * For the doc:
     *
     * ```md
     * # Head #
     * text
     * ```
     *
     * This is the range of `# Head #`
     */
    readonly headerLocation: lsp.Location;
    /**
     * The range of the header text.
     *
     * For the doc:
     *
     * ```md
     * # Head #
     * text
     * ```
     *
     * This is the range of `Head`
     */
    readonly headerTextLocation: lsp.Location;
}
export declare class TableOfContents {
    readonly entries: readonly TocEntry[];
    private readonly slugifier;
    static create(parser: IMdParser, document: ITextDocument): Promise<TableOfContents>;
    static createForContainingDoc(parser: IMdParser, workspace: IWorkspace, document: ITextDocument): Promise<TableOfContents>;
    private static buildToc;
    private static getHeaderLevel;
    private static getHeaderText;
    static readonly empty: TableOfContents;
    private constructor();
    lookup(fragment: string): TocEntry | undefined;
}
export declare class MdTableOfContentsProvider extends Disposable {
    private readonly logger;
    private readonly _cache;
    constructor(parser: IMdParser, workspace: IWorkspace, logger: ILogger);
    get(resource: URI): Promise<TableOfContents>;
    getForDocument(doc: ITextDocument): Promise<TableOfContents>;
}
