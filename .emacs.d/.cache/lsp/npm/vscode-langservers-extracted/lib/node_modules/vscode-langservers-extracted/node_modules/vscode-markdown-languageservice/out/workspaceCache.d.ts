import { URI } from 'vscode-uri';
import { ITextDocument } from './types/textDocument';
import { Disposable } from './util/dispose';
import { IWorkspace } from './workspace';
/**
 * Cache of information per-document in the workspace.
 *
 * The values are computed lazily and invalidated when the document changes.
 */
export declare class MdDocumentInfoCache<T> extends Disposable {
    private readonly workspace;
    private readonly getValue;
    private readonly _cache;
    private readonly _loadingDocuments;
    constructor(workspace: IWorkspace, getValue: (document: ITextDocument) => Promise<T>);
    get(resource: URI): Promise<T | undefined>;
    getForDocument(document: ITextDocument): Promise<T>;
    private loadDocument;
    private resetEntry;
    private invalidate;
    private onDidDeleteDocument;
}
/**
 * Cache of information across all markdown files in the workspace.
 *
 * Unlike {@link MdDocumentInfoCache}, the entries here are computed eagerly for every file in the workspace.
 * However the computation of the values is still lazy.
 */
export declare class MdWorkspaceInfoCache<T> extends Disposable {
    private readonly workspace;
    private readonly getValue;
    private readonly _cache;
    private _init?;
    constructor(workspace: IWorkspace, getValue: (document: ITextDocument) => Promise<T>);
    entries(): Promise<Array<[URI, T]>>;
    values(): Promise<Array<T>>;
    getForDocs(docs: readonly ITextDocument[]): Promise<T[]>;
    private ensureInit;
    private populateCache;
    private update;
    private onDidChangeDocument;
    private onDidDeleteDocument;
}
