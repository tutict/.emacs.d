export interface IDisposable {
    dispose(): void;
}
export declare class MultiDisposeError extends Error {
    readonly errors: any[];
    constructor(errors: any[]);
}
export declare function disposeAll(disposables: Iterable<IDisposable>): void;
export interface IDisposable {
    dispose(): void;
}
export declare abstract class Disposable {
    private _isDisposed;
    protected _disposables: IDisposable[];
    dispose(): any;
    protected _register<T extends IDisposable>(value: T): T;
    protected get isDisposed(): boolean;
}
export declare class DisposableStore extends Disposable {
    private readonly items;
    dispose(): void;
    add<T extends IDisposable>(item: T): T;
}
