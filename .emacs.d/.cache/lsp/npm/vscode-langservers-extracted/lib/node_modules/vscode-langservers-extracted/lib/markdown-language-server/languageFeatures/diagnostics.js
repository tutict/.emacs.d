"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.promise.js");

require("regenerator-runtime/runtime.js");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerValidateSupport = void 0;

var md = require("vscode-markdown-languageservice");

var vscode_uri_1 = require("vscode-uri");

var defaultDiagnosticOptions = {
  validateFileLinks: md.DiagnosticLevel.ignore,
  validateReferences: md.DiagnosticLevel.ignore,
  validateFragmentLinks: md.DiagnosticLevel.ignore,
  validateMarkdownFileLinkFragments: md.DiagnosticLevel.ignore,
  ignoreLinks: []
};

function convertDiagnosticLevel(enabled) {
  switch (enabled) {
    case 'error':
      return md.DiagnosticLevel.error;

    case 'warning':
      return md.DiagnosticLevel.warning;

    case 'ignore':
      return md.DiagnosticLevel.ignore;

    default:
      return md.DiagnosticLevel.ignore;
  }
}

function getDiagnosticsOptions(config) {
  var settings = config.getSettings();

  if (!settings) {
    return defaultDiagnosticOptions;
  }

  return {
    validateFileLinks: convertDiagnosticLevel(settings.markdown.experimental.validate.fileLinks.enabled),
    validateReferences: convertDiagnosticLevel(settings.markdown.experimental.validate.referenceLinks.enabled),
    validateFragmentLinks: convertDiagnosticLevel(settings.markdown.experimental.validate.fragmentLinks.enabled),
    validateMarkdownFileLinkFragments: convertDiagnosticLevel(settings.markdown.experimental.validate.fileLinks.markdownFragmentLinks),
    ignoreLinks: settings.markdown.experimental.validate.ignoreLinks
  };
}

function registerValidateSupport(connection, workspace, ls, config) {
  var diagnosticOptions = defaultDiagnosticOptions;

  function updateDiagnosticsSetting() {
    diagnosticOptions = getDiagnosticsOptions(config);
  }

  var manager = ls.createPullDiagnosticsManager();
  connection.languages.diagnostics.on( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(params, token) {
      var _config$getSettings;

      var document, diagnostics;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if ((_config$getSettings = config.getSettings()) !== null && _config$getSettings !== void 0 && _config$getSettings.markdown.experimental.validate.enabled) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return", {
                kind: 'full',
                items: []
              });

            case 2:
              _context.next = 4;
              return workspace.openMarkdownDocument(vscode_uri_1.URI.parse(params.textDocument.uri));

            case 4:
              document = _context.sent;

              if (document) {
                _context.next = 7;
                break;
              }

              return _context.abrupt("return", {
                kind: 'full',
                items: []
              });

            case 7:
              _context.next = 9;
              return manager.computeDiagnostics(document, diagnosticOptions, token);

            case 9:
              diagnostics = _context.sent;
              return _context.abrupt("return", {
                kind: 'full',
                items: diagnostics
              });

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }());
  updateDiagnosticsSetting();
  var configChangeSub = config.onDidChangeConfiguration(function () {
    updateDiagnosticsSetting();
    connection.languages.diagnostics.refresh();
  });
  return {
    dispose: function dispose() {
      manager.dispose();
      configChangeSub.dispose();
    }
  };
}

exports.registerValidateSupport = registerValidateSupport;